<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Oliver Gilan</title><link>https://olivergilan.com/blog/</link><description>Recent content in Blog on Oliver Gilan</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>blog@olivergilan.com (Oliver Gilan)</managingEditor><webMaster>blog@olivergilan.com (Oliver Gilan)</webMaster><copyright>2022 Oliver Gilan All rights reserved</copyright><lastBuildDate>Mon, 16 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://olivergilan.com/blog/rss.xml" rel="self" type="application/rss+xml"/><item><title>The Cloud Hasn't Been Won</title><link>https://olivergilan.com/blog/cloud-hasnt-been-won/</link><pubDate>Mon, 16 Sep 2024 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/cloud-hasnt-been-won/</guid><enclosure url="https://olivergilan.com/images/cloud_marketshare.jpg" type="image/jpeg"/><description>&lt;p>Matthew Parkhurst &amp;amp; I founded Antimetal in April of 2022 to bring my vision around &amp;ldquo;the Cloud&amp;rdquo; to life. I left the company to focus on my health shortly after but it&amp;rsquo;s been fascinating to watch how my thesis has played out over the past two and a half years. I haven&amp;rsquo;t talked in-depth about my original vision since then but I figure now is a good time to put it all in writing as some parts of my thesis have been validated, the market has matured, and there&amp;rsquo;s still plenty of opportunity left.&lt;/p>
&lt;h2 id="market-context">Market Context &lt;a class="anchor" href="#market-context">
#
&lt;/a>&lt;/h2>&lt;p>Cloud hosting is a huge market. AWS is at $100B run rate and it&amp;rsquo;s growth is &lt;a href="https://www.cnbc.com/2024/04/30/aws-q1-earnings-report-2024.html">accelerating&lt;/a>. Azure is estimated to be around $60B in annual revenue with GCP around $30B. The numbers are astronomical and all the players are growing fast even at their already massive size. You only need to capture a fraction of the market to generate millions in revenue like Vercel who recently reported passing $100m in run rate &amp;ndash; a far cry from the top of the market but still a great outcome for a much newer company with far less capabilities than the top players.&lt;/p>
&lt;p>The growth of the entire market and the sheer size of it make it an attractive area for businesses trying to generate venture-scale returns&amp;hellip; and as a result theres many companies trying to do that. To fully understand the landscape of the market and the origin of this thesis you need to understand some of the history.&lt;/p>
&lt;p>In the beginning, any company that used or sold software had to manage its own servers. Entire departments of sys-admins, IT professionals would buy and manage physical servers in a datacenter or often-times in the company&amp;rsquo;s office itself. Engineering teams that wanted to deploy a new service would have to wait for new servers to be bought and installed or if an existing application had a surge in traffic then it became necessary to find extra servers to handle the load. Then came &lt;a href="https://aws.amazon.com/">AWS&lt;/a> in 2006, &lt;a href="https://cloud.google.com/?hl=en">GCP&lt;/a> in 2008, and &lt;a href="https://azure.microsoft.com/en-us">Azure&lt;/a> in 2010 and they exposed their own server hardware running in their data centers through online APIs. What this meant was that if you wanted to host some code you had written you didn&amp;rsquo;t have to go talk to Greg in IT, try to get some server space reserved, and then call Greg again when the machine in your company&amp;rsquo;s basement caught fire. Instead you told AWS you needed a certain amount of compute power, memory, and storage and a couple minutes later you would have that machine up and running in an AWS-managed data center and you could just put your code on it instantly through the internet. They provided Infrastructure as a Service (IaaS) and thus the Cloud was born.&lt;/p>
&lt;p>These early cloud companies owned the full stack from hardware to software and grew rapidly. Today they define what the cloud is and own over 60% of the world&amp;rsquo;s cloud infrastructure. They are commonly referred to as &lt;strong>hyperscalers&lt;/strong> because in theory, they have enough compute in their clouds to meet the needs of any given company. If your company managed its own servers and you wanted to deploy a new application they might not have a server for you! It wasn&amp;rsquo;t uncommon to wait weeks to deploy something while new compute was bought and shipped and installed. The hyperscalers on the other hand can scale workloads on demand and as a user of them you can practically assume that there&amp;rsquo;s no limit to how much you can scale as long as you can pay.&lt;/p>
&lt;p>Then another group of clouds started to pop up. &lt;a href="https://www.heroku.com/">Heroku&lt;/a> was founded in 2007 and &lt;a href="https://www.digitalocean.com/">Digital Ocean&lt;/a> in 2011 and both of their value propositions were how much &lt;em>simpler&lt;/em> they were to use. The hyperscalers were powerful but they were (and still are) &lt;a href="https://x.com/brianleroux/status/1218252704348172288">complicated&lt;/a>. Heroku simply ran on AWS and exposed an interface for deploying Ruby on Rails apps in one click (or one git push) rather than the maze of configuration that was required for AWS. Heroku didn&amp;rsquo;t manage their own servers, AWS still did that for them, but they provided a better experience for the end-user than AWS could. They became the first Platform as a Service (PaaS) and quickly came to dominate among smaller companies and indie developers.&lt;/p>
&lt;p>Heroku was acquired by Salesforce in 2010 and continued to expand its offerings. It became the gold standard for developer experience but then the Salesforce &lt;a href="https://news.ycombinator.com/item?id=31313779">rot&lt;/a> began to seep in. The company stagnated, eventually began to run into reliability issues, and today is a former shell of what it once was. Heroku is technically still around but for all intents and purposes Heroku, as a platform that aims to grow and capture serious market share, is &lt;a href="https://lancecarlson.com/posts/heroku-is-dead/">dead&lt;/a>.&lt;/p>
&lt;p>By 2020 it seemed clear that Heroku was dying and almost everyone was looking for what would come next. And things came. &lt;a href="https://vercel.com/home">Vercel&lt;/a> was founded in 2015, &lt;a href="https://fly.io/">Fly.io&lt;/a> in 2017, &lt;a href="https://render.com/">Render&lt;/a> in 2018, &lt;a href="https://www.porter.run/">Porter&lt;/a> and &lt;a href="https://sst.dev/">SST&lt;/a> and &lt;a href="https://railway.app/">Railway&lt;/a> in 2020. Many of these clouds entered the market with the explicit message that they were the next-generation Heroku and they all had a twist on what made them better. Crucially, all of them are Platforms as a Service with the core idea being they provide a platform for you to deploy and manage your applications while abstracting away the underlying infrastructure.&lt;/p>
&lt;p>&lt;strong>This was the context in which this thesis was formed.&lt;/strong> The impending death of Heroku could be seen years in advance and yet no obvious successor was crowned even in 2022, leaving us with a real gap in the market for a cloud that was simple to use for startups and individuals. The newer players like Porter, SST, and Railway were all in their infancy so it wasn&amp;rsquo;t clear any of them would be successful and clouds like Fly, and Render were showing traction but still very young and limited.&lt;/p>
&lt;p>Furthermore, I felt very strongly that trying to replicate Heroku was not the best way to achieve dominance and that all of these new players could be beaten. Below is my thesis for how and why that could be done. At the end I&amp;rsquo;ll cover a little bit about what has happened since 2022 and how I think my thesis has played out.&lt;/p>
&lt;h2 id="building-a-better-product">Building a Better Product &lt;a class="anchor" href="#building-a-better-product">
#
&lt;/a>&lt;/h2>&lt;p>Beating the existing players and capturing market share is a simple formula really: build a better product than the incumbents.&lt;/p>
&lt;div class="aside">
&lt;div class="aside-text">
Sales and marketing matter, of course, but that&amp;rsquo;s because execution as a whole matters when it comes to building a good company. When it comes to the Cloud and selling to developers it&amp;rsquo;s a lot easier to succeed when your product is superior.
&lt;/div>
&lt;/div>
&lt;p>&lt;strong>Ultimately the quality of a cloud hosting product comes down to 3 dimensions: capabilities, convenience, and price.&lt;/strong> As a startup it is difficult to be best-in-class in all 3 categories so how you prioritize those dimensions and solve for the main problems each one poses will shape the type of company and product you build. Every choice will have tradeoffs and those tradeoffs will determine how your platform stacks up against the others. Most players in the space focus on just 1 dimension but if you want to dominate you need to be best-in-class in a minimum of 2 of those dimensions and if you can be the best at all 3 then you may achieve the size of the hyperscalers.&lt;/p>
&lt;p>Perhaps my most controversial idea is that if you make the right set of tradeoffs it may be possible to become best-in-class along all 3 dimensions. That&amp;rsquo;s a bold claim but it&amp;rsquo;s one I hope to convince you on and only one of the current companies is even headed remotely in that direction.&lt;/p>
&lt;p>Here&amp;rsquo;s how you win on all 3 dimensions.&lt;/p>
&lt;h3 id="capabilities-an-uphill-battle">Capabilities: An Uphill Battle &lt;a class="anchor" href="#capabilities-an-uphill-battle">
#
&lt;/a>&lt;/h3>&lt;p>Few entrants into the market try to compete with hyperscalers on capabilities because it&amp;rsquo;s by far the hardest and therefore the worst angle to differentiate on. To truly have a capability they do not have usually means running your own servers and running your own servers is hard! Servers aren&amp;rsquo;t software &amp;ndash; they break randomly, overheat, get disconnected, fail for mysterious reasons, and have to exist in a physical location. The sheer amount of work that goes into maintaining and running your own servers means you&amp;rsquo;ll probably spend a lot of your time and resources doing that rather than building a good user-facing product for customers. What ends up happening is you have the bandwidth to beat the hyperscalars on a specific capability at the expense of everything else.&lt;/p>
&lt;p>Some companies do try, though. Fly.io differentiated itself by making it extremely easy to deploy containerized applications to an edge network and therefore they run their own servers to create that edge network. And to their credit Fly got a lot of great traction and support but now they&amp;rsquo;re going through a &lt;a href="https://news.ycombinator.com/item?id=34742946">tough patch with reliability&lt;/a> and their product no longer feels like it&amp;rsquo;s on a breakout trajectory like it otherwise could have been. Fly beat the hyperscalars on edge capabilities (although they&amp;rsquo;re all catching up) but in doing so they are more expensive, less reliable, and somewhat of a one-trick pony. If I don&amp;rsquo;t care about edge computing &amp;ndash; and if you&amp;rsquo;re building B2B SaaS you probably don&amp;rsquo;t care about edge computing &amp;ndash; then Fly isn&amp;rsquo;t a super compelling offer.&lt;/p>
&lt;p>Of course, a cloud service that doesn&amp;rsquo;t run it&amp;rsquo;s own servers can also suffer on cost and reliability and it&amp;rsquo;s possible that the only way to really make Fly&amp;rsquo;s bet on edge computing work is to own the full stack. That&amp;rsquo;s fine but then it means the success of the company is almost fully on the bet on edge computing and, personally, I think that&amp;rsquo;s a bad bet.&lt;/p>
&lt;p>There are exceptions to this. There are very narrow slices of capabilities that you can only serve by running your own servers and when those opportunities arise it may be a good move. For example maybe you want to provide compute in space or build an entire cloud of GPUs just for AI training or sell to a government that the current companies can&amp;rsquo;t for legal reasons. This may be possible because the market is too niche (space) or because it&amp;rsquo;s too new and you happen to have an edge by already owning a bunch of GPUs, or because of simple regulatory arbitrage.&lt;/p>
&lt;p>In all these cases, though, when you try to compete on capability you&amp;rsquo;ll build for a very narrow &amp;ndash; but potentially lucrative &amp;ndash; capability set at the expense of everything else and if your narrow capability set turns out to be lucrative enough then you can be sure the hyperscalers will use their buying power and economies of scale to provide competitive offerings eventually. It&amp;rsquo;s for this reason that I think it&amp;rsquo;s impossible for a startup to build a truly venture-scale cloud by focusing on hardware-driven capabilities and I&amp;rsquo;d be very hesitant about any startup trying to that from the outset.&lt;/p>
&lt;p>Software-driven capabilities are a different story and we&amp;rsquo;ll get to that later.&lt;/p>
&lt;h3 id="convenience-an-attractive-trap">Convenience: An Attractive Trap &lt;a class="anchor" href="#convenience-an-attractive-trap">
#
&lt;/a>&lt;/h3>&lt;p>The easiest way to beat the hyperscalers is through convenience and this is how nearly every PaaS enters the market. It&amp;rsquo;s how Heroku did it and now it&amp;rsquo;s how Vercel, Railway, Render, Porter, SST, etc are doing it. Take Vercel for example. Their whole cloud runs on AWS but they let you deploy automatically by simply pushing to your main branch on GitHub and they provide templates to make it extremely easy to automatically deploy common JavaScript frameworks. If you use their own framework, NextJS, they can automatically optimize things for you and make it easy to get an app deployed. Even their Edge Network is a simple wrapper on top of AWS Lambda but for inexperienced devs and small teams it&amp;rsquo;s simply easier to use than Lambda because they&amp;rsquo;re already using a framework like NextJS to write their code.&lt;/p>
&lt;p>This strategy makes sense at a high level. Beating the hyperscalers on convenience and developer experience is a good idea because when it comes to those things the hyperscalers tend to be &lt;a href="https://x.com/CleanPegasus/status/1820017552980111409">dogshit&lt;/a>. The hyperscalers are basically APIs over physical infrastructure but most companies care more about building their product and solving customer problems than they do about infrastructure so it&amp;rsquo;s an attractive proposition if you can simplify that for them. There is a significant amount of money to be made doing this as shown by Heroku and now Vercel and it&amp;rsquo;s the straightest shot to building a super valuable company.&lt;/p>
&lt;p>But this strategy is a trap for a number of reasons.&lt;/p>
&lt;p>Being more convenient and easy to use usually means being simple. When you look at most of these platforms they are entirely geared towards making the common path for many developers very easy so if you want to deploy a full stack web application it&amp;rsquo;ll almost certainly be easier than just using AWS. But the moment you want to do something outside the beaten path then the simple platform makes it extremely difficult or impossible and as a company grows bigger the likelihood that they need to do something outside the beaten path grows. So what do you do if you&amp;rsquo;re Vercel and your largest customers keep asking you to add more features and configuration options? Either you start to add those features and lose the simplicity that made you popular and gave you an edge or you tell those customers that you will not add those features and live with them churning. If you&amp;rsquo;re lucky they&amp;rsquo;ll seek out a hyperscaler just for that one thing you don&amp;rsquo;t handle but in the common case they&amp;rsquo;ll just move over everything to the hyperscaler because managing two clouds is more annoying that managing one and if you need a hyperscaler anyway then you&amp;rsquo;re past the point of needing simplicity. &lt;strong>You either open yourselves to disruption by another platform that comes along and claims to be simpler and easier than you, or you lose your biggest customers because you couldn&amp;rsquo;t provide the capabilities they need.&lt;/strong>&lt;/p>
&lt;p>This actually highlights another big problem with this simplicity-first model: the smaller the customer the more they benefit from simplicity. Your indie devs and small teams probably have one app and are using a common framework to follow the beaten path. The whole point of this model is to make the lives of these customers better but these customers are also the least able to pay. Most indie devs can&amp;rsquo;t pay anything when they start out and small teams who are bootstrapping or just raised a little bit of money cannot pay a lot for just running their app. Heroku and Vercel and most of these tools all have generous free tiers because without a free tier it&amp;rsquo;s quite difficult to win the hearts and minds of these core users. There&amp;rsquo;s an entire cottage industry of influencers talking about how to build things fast and easy and if you don&amp;rsquo;t have a free tier then you won&amp;rsquo;t win over the students and hustlers trying to build their first product. In many ways the entire sales funnel for these simple PaaS offerings rely on a free tier to reduce CAC.&lt;/p>
&lt;p>So you need a free tier and to do that you need to subsidize it by making enterprise plans more expensive. So what you&amp;rsquo;ve set up is a system where your customers start out for free and get up and running easy and that&amp;rsquo;s great for everyone involved but as a few of your customers find traction and grow they go past the free tier and require paid plans and as they grow further those paid plans grow in price significantly. By the time they reach the size of a Series B startup they will be spending far more on your cloud than they would if they were on AWS. Eventually it crosses a threshold where it&amp;rsquo;s literally cheaper to just hire full-time dev-ops engineers to manage an AWS instance than it does to use a &amp;ldquo;simpler&amp;rdquo; cloud. For reference Vercel Functions, which is just a wrapper on AWS Lambda, gives free-tier users 3600 GB-seconds of function time for free. That&amp;rsquo;s great for anyone building a hobby project or just starting out. But once you get past the included free usage they charge $0.00005 per GB-second. AWS Lambda charges you immediately so it&amp;rsquo;s harder to get started with if you can&amp;rsquo;t put down a credit card but they only charge $0.0000166667 per GB-second. Vercel is charging 300% more than AWS just for some simplicity and it only gets worse because the more you use Lambda the &lt;em>cheaper&lt;/em> it gets. At the maximum usage tier Vercel is 375% more expensive per GB-second of usage than AWS.&lt;/p>
&lt;p>This is great for Vercel because they get to make a bunch of money and offer a free tier to their smallest customers which reduces CAC but if you&amp;rsquo;re a startup that finds some success you&amp;rsquo;re going to end up looking at your Vercel bill wondering if it&amp;rsquo;s really worth it to pay over 300% more for the same infrastructure while having fewer capabilities. Between the backwards pricing model and the lack of functionality platforms that focus on simplicity end up &lt;strong>directly incentivizing their most successful customers to churn.&lt;/strong> This is the biggest limiting factor for most of the PaaS providers today and it&amp;rsquo;s a dynamic that needs to be resolved if you want to create a new cloud that can eclipse all of the existing non-hyperscalers.&lt;/p>
&lt;h3 id="price-a-common-painpoint">Price: A Common Painpoint &lt;a class="anchor" href="#price-a-common-painpoint">
#
&lt;/a>&lt;/h3>&lt;p>If you speak to people who use the Cloud the most common complaint is the price. Early on in the cycle of Cloud adoption there was a lot of talk about how the Cloud was cheaper for companies because they didn&amp;rsquo;t need to buy hardware and hire all these people to manage servers. Most of that sentiment has gone away because it seems that for every individual you could fire that was managing physical servers you now need to hire a DevOps engineer and on a per-unit of compute basis, owning your own server is far cheaper than renting from someone else. Renting just happens to be more convenient than dealing with physical servers so the same way that Vercel is more expensive than AWS because it&amp;rsquo;s more convenient, AWS is more expensive than physical servers because it&amp;rsquo;s also more convenient. It&amp;rsquo;s also elastic and you can scale your compute nearly instantly whereas with physical servers if you get a massive spike in traffic you need to go buy those extra servers, wait for them to ship, install them, etc. And if you want to manage peak loads you then have to own extra servers even when you don&amp;rsquo;t have peak load which is wasteful. With the Cloud you can just pay for extra compute when you need it and then scale back down when you don&amp;rsquo;t. Still, everyone agrees on net the Cloud is expensive.&lt;/p>
&lt;p>The problem is, if you&amp;rsquo;re not going to manage your own servers and you just want to build a PaaS on top of AWS then you can&amp;rsquo;t really charge cheaper prices because that would not make any economical sense. Even if you are going to run your own servers you won&amp;rsquo;t have the economies of scale that AWS has so you also probably won&amp;rsquo;t be cheaper than AWS. It&amp;rsquo;s for this reason that I don&amp;rsquo;t think &lt;em>any&lt;/em> non-hyperscaler claims to be cheaper than AWS apart from free tiers for small users. And when it comes to free tiers most don&amp;rsquo;t even come close to the free credits AWS gives out like candy. Just about any company can go and &lt;a href="https://aws.amazon.com/startups?lang=en-US">immediately get $1,000&lt;/a> in free AWS credits and if you&amp;rsquo;re part of an accelerator or have any institutional investors it&amp;rsquo;s usually trivial to get up to $100,000 in free credits. So while not advertised as an explicit free tier AWS does have free perks and it&amp;rsquo;s basically impossible for any competitor, even other hyperscalers to compete on price. If you &lt;em>could&lt;/em> find a way to compete on price you&amp;rsquo;d have a massive competitive advantage.&lt;/p>
&lt;p>Pricing is the most common complaint and I identified it as one of the main wedges when we started Antimetal. There&amp;rsquo;s a couple ways you can handle pricing to be competitive with AWS. The first way is to let the user bring their own cloud like Porter and SST who don&amp;rsquo;t even have their own cloud and just orchestrate everything within your AWS account. Because it&amp;rsquo;s your account you have full control and if you have free credits from AWS you can just apply them automatically. This is a really good way to pass on cheaper hyperscaler costs to your customers but it means it&amp;rsquo;s way harder to generate usage-based revenue which is how most of the revenue is made for someone like Vercel.&lt;/p>
&lt;p>There&amp;rsquo;s also another dynamic at play. There&amp;rsquo;s the absolute price that something costs such as that calculation above around Vercel vs AWS per GB-second pricing but then there&amp;rsquo;s also the predictability of pricing. So often when people complain about the pricing of the Cloud they are specifically talking about how it&amp;rsquo;s really hard to predict the bill you&amp;rsquo;ll be stuck with at the end of the month. Because billing in the Cloud is usage-based and the whole point of the cloud is that you can scale up and down your usage with ease it&amp;rsquo;s pretty common to end up paying way more than you thought you would have to. It doesn&amp;rsquo;t take very much searching to find numerous &lt;a href="https://news.ycombinator.com/item?id=22719573">horror stories&lt;/a> of small teams or &lt;a href="https://www.reddit.com/r/nextjs/comments/12dngvg/small_mistake_leads_to_3000_bill_from_vercel_and/">indie hackers&lt;/a> hosting a small project that goes viral overnight leaving them with a bill in the tens or even &lt;a href="https://x.com/zemotion/status/1798558292681343039">hundreds of thousands of dollars&lt;/a>.&lt;/p>
&lt;p>There&amp;rsquo;s a hidden assumption in here that I&amp;rsquo;ll posit: &lt;strong>companies generally care more about the predictability of cost than the absolute number.&lt;/strong> If you can clearly telegraph that a company will pay $X over the next quarter they will probably be happier with that than paying an unpredictable $Y even if Y &amp;lt; X. The hyperscalers generally have some alerts you can set on spend so that when you reach a certain threshold in your budget it sends you some emails but as far as I&amp;rsquo;m aware there&amp;rsquo;s no hard limits you can set in AWS or any of the clouds to make sure you do not overspend. The spend management experience in the cloud is abysmal.&lt;/p>
&lt;h2 id="new-trends-on-prem">New Trends: On Prem &lt;a class="anchor" href="#new-trends-on-prem">
#
&lt;/a>&lt;/h2>&lt;p>Those were the three big dimensions that really stood out to me back in 2022 but since then there are new trends as well. Specifically how more companies are moving back workloads to their own private clouds. Dropbox is probably the highest profile company to &lt;a href="https://www.wired.com/2016/03/epic-story-dropboxs-exodus-amazon-cloud-empire/">move off of AWS &lt;/a> and they did it quite a while ago. Since then DHH and Hey have made a big stink of their &lt;a href="https://world.hey.com/dhh/we-have-left-the-cloud-251760fb">cloud exodus&lt;/a> and recent reports claim that the vast &lt;a href="https://datacanopy.com/back-to-private-cloud/">majority of enterprises are planning doing the same&lt;/a>. This is almost 100% driven by cost. The cloud &lt;em>is&lt;/em> more expensive but it&amp;rsquo;s really convenient and elastic. The thing is most companies don&amp;rsquo;t need super elastic compute! You&amp;rsquo;d be surprised how even some of the biggest companies in the world really don&amp;rsquo;t get as much internet traffic as you&amp;rsquo;d think and usually if there are spikes in traffic it&amp;rsquo;s due to predictable demand surges around holidays or other special events.&lt;/p>
&lt;p>What I predict will happen is that most companies will begin to move some core workloads off the cloud and use the cloud for the workloads that need hyper-critical reliability or are extremely variable in their usage. This needs to be taken into consideration when attempting to build a new cloud platform. Today some of the hyperscalers allow you to connect their public clouds to your private cloud so you can manage workloads across all of them. I predict this sort of functionality will become increasingly important for big companies and I think this type of hybrid cloud will be common enough that a unicorn can be built on catering to this model.&lt;/p>
&lt;p>To my knowledge, only &lt;a href="https://oxide.computer/">Oxide&lt;/a> seems really well positioned to capitalize on this phenomenon as well as the traditional legacy server vendors. The big takeaway in this new dynamic of multi-cloud architecture is you&amp;rsquo;ll need a hardware component like Oxide but also a software component that can make it super easy to orchestrate resources across the multiple clouds. I believe Oxide is trying to also address the software side of things but it&amp;rsquo;s not clear to me if they&amp;rsquo;ll be able to do both because any software solution that&amp;rsquo;s successful probably won&amp;rsquo;t be tied to a specific hardware stack.&lt;/p>
&lt;h2 id="putting-it-all-together-the-right-tradeoffs">Putting It All Together: The Right Tradeoffs &lt;a class="anchor" href="#putting-it-all-together-the-right-tradeoffs">
#
&lt;/a>&lt;/h2>&lt;p>Okay so I explained these different dimensions and how some of the players deal with them but I mostly just described some of the big problems without describing my solutions. How did I want to approach it with Antimetal? My full vision was a PaaS platform that sat on top of the hyperscalers similar to a Heroku or Vercel. I wanted it to be extremely easy to get started with but contain all the capabilities necessary for enterprise companies. I wanted it to make &lt;em>more&lt;/em> sense for an enterprise team than any other PaaS while not being too complex for small teams. And critically, I wanted it to have the best cost-management experience out of any cloud.&lt;/p>
&lt;p>On the pricing side I wanted to implement price controls where a customer could set soft and hard limits on spend for various resources and groups of resources. This would allow us to create an experience where we can show them a distribution of possible spending scenarios with upper bounds on spend for upcoming quarters. These limits would also have powerful rules attached to them where you could decide what to do as the limit was approached whether it was to send alerts, keep scaling under certain circumstances (maybe there&amp;rsquo;s just a spike of traffic for 2 days), or to just let the service fail under load.&lt;/p>
&lt;p>The second way I wanted to tackle pricing was to take advantage of AWS reserved instances. Reserved instances is where you pay in advance for a certain amount of compute in exchange for discounts up to 60%! Then when you use compute later you can do it from the reserved instance credits you have. The beautiful part about this is reserved instances are relatively low risk, especially as your compute needs grow, because you can resell unused credits. For an individual company just trying to build a product this might be more complexity than it&amp;rsquo;s worth but for a PaaS it makes sense to reserve the compute for a discount and handle that complexity intelligently. What this unlocks is that even if we were to price our product at the same price as AWS' on-demand rate we could still have 60% margins. That&amp;rsquo;s not as good as the 300% that Vercel is getting but it doesn&amp;rsquo;t need to be for the services where you&amp;rsquo;re simply wrapping AWS. I&amp;rsquo;ll explain how we can get higher margins on other services in a moment. The end goal of these two things, though, is we could have a PaaS that basically has price parity with AWS while providing a better cost management experience than any cloud on the market today.&lt;/p>
&lt;p>When it comes to convenience I wanted an experience that worked for small teams that want simplicity and enterprise teams with complex and bespoke needs. I see only one way to solve this: code. Almost every PaaS platform like Vercel or Railway or Render all revolve around a similar core workflow: you create an account on the platform, you click some buttons to connect your GitHub account to the platform, then you press a big &amp;ldquo;Deploy&amp;rdquo; button. In the world of enterprise almost no one is deploying software like that.&lt;/p>
&lt;p>Big companies use Infrastructure as Code (IaC) tools where you use code to specify of the infrastructure you want whether it&amp;rsquo;s servers or storage or domain names and then you provision infrastructure based on that specification. If you want to add a new server you generally update the spec and then push that change to the Cloud. There&amp;rsquo;s a couple reasons this is preferable to clicking around in a dashboard. The first is that it&amp;rsquo;s reproducible. Because it&amp;rsquo;s code that&amp;rsquo;s written down, if all your infrastructure gets deleted for some reason you could in theory just run the code again and bring your cloud back to the desired state. This is super useful if you want to make sure that your development or test environment matches your production environment and stays in sync. Another reason this is helpful is once it&amp;rsquo;s written down you can version it automatically because your codebase is already being versioned anyway. If someone makes a change that breaks some infrastructure in theory you can find which change created the break and then rollback that change easily. And lastly, if you want to change a bunch of resources all at once &amp;ndash; such as changing all your bucket names to have a certain prefix &amp;ndash; you can do that a lot easier in a code editor than clicking around a dashboard.&lt;/p>
&lt;p>Okay, so what? Well, if you want a platform that works for big teams you need to have first-class support for IaC and it just so happens that if you want to allow multiple levels of complexity in one product then code is the best way to do that! Let&amp;rsquo;s say you&amp;rsquo;re a small team and you literally just want to deploy your NextJS app. A PaaS that offers IaC might let you do that like follows:
&lt;div class="code-block">
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span style="color:#000;font-weight:bold">const&lt;/span> domain &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">new&lt;/span> CustomDomain({
...
})
&lt;span style="color:#000;font-weight:bold">const&lt;/span> site &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">new&lt;/span> NextJSApp({
name&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;my-next-app&amp;#34;&lt;/span>,
domain&lt;span style="color:#000;font-weight:bold">:&lt;/span> domain
})
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>That&amp;rsquo;s pretty simple! That would be very easy for any small team or even an individual developer but let&amp;rsquo;s say now you&amp;rsquo;re working on a big team that&amp;rsquo;s using NextJS and wants a lot more control over how it&amp;rsquo;s deployed. Well you could do something like:&lt;/p>
&lt;div class="code-block">
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span style="color:#000;font-weight:bold">const&lt;/span> domain &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">new&lt;/span> CustomDomain({...})
&lt;span style="color:#000;font-weight:bold">const&lt;/span> queue &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">new&lt;/span> Redis({...})
&lt;span style="color:#000;font-weight:bold">const&lt;/span> cdn &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">new&lt;/span> CDN()
&lt;span style="color:#000;font-weight:bold">const&lt;/span> site &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">new&lt;/span> NextJSApp({
name&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;my-next-app&amp;#34;&lt;/span>,
domain&lt;span style="color:#000;font-weight:bold">:&lt;/span> domain,
functions&lt;span style="color:#000;font-weight:bold">:&lt;/span> {
runtime&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;edge&amp;#34;&lt;/span>,
timeout&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;15m&amp;#34;&lt;/span>,
memory&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;512mb&amp;#34;&lt;/span>,
},
cdn&lt;span style="color:#000;font-weight:bold">:&lt;/span> cdn,
queue&lt;span style="color:#000;font-weight:bold">:&lt;/span> queue
})
...
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Or you can go even lower level and have more control:&lt;/p>
&lt;div class="code-block">
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span style="color:#000;font-weight:bold">const&lt;/span> vpc &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">new&lt;/span> VPC({...});
&lt;span style="color:#000;font-weight:bold">const&lt;/span> storage &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">new&lt;/span> DurableStorage({
size&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;16gb&amp;#34;&lt;/span>,
...
})
&lt;span style="color:#000;font-weight:bold">const&lt;/span> vm &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">new&lt;/span> VM({
memory&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;4gb&amp;#34;&lt;/span>,
vcpu&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#099">2&lt;/span>,
storage&lt;span style="color:#000;font-weight:bold">:&lt;/span> storage,
vpc&lt;span style="color:#000;font-weight:bold">:&lt;/span> vpc,
scaling&lt;span style="color:#000;font-weight:bold">:&lt;/span> {
...
}
})
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>This is all half-baked pseudocode to illustrate a point: when you&amp;rsquo;re specifying things in code you can have multiple interfaces for the same thing and you can make one interface have multiple levels of complexity. You can make it so if all someone wants to do is tell you the domain to host their app on you can figure out the rest for them just like Vercel or Render would do but if they want more control they can just start configuring more of the options. You can also have a concept of primitives that build up to higher level concepts. For the power users in big companies you give them primitives to configure VM&amp;rsquo;s with exactly the memory and compute power they want and allow them to configure all the networking rules, etc. For the simpler user you give them a construct like &lt;code>NextJSApp&lt;/code> which is simple but under the hood it just provisions a VM with NodeJS and handles the configuration for them.&lt;/p>
&lt;p>This is such a powerful way to manage infrastructure that it&amp;rsquo;s a real shame more PaaS platforms don&amp;rsquo;t do this by default. The way I see it, this &lt;em>has&lt;/em> to be a first class citizen of a platform to be viable for enterprise customers but I wanted to go as far as making our dashboard completely read-only. I was not going to let people provision or deploy things by clicking on a dashboard and instead provide super easy recipes and starter templates and helpers with a CLI for all the common frameworks. It&amp;rsquo;s kind of funny that most PaaS platforms don&amp;rsquo;t do this. I wonder if they just think their target customers would be scared off by code but for anyone who&amp;rsquo;s done any sort of serious programming they&amp;rsquo;ll know this is preferable to clicking around a dashboard. You get type-safety, the power of your editor&amp;rsquo;s auto complete, and every other benefit of IaC.&lt;/p>
&lt;p>I believe any cloud that started with these two solutions for convenience and price controls would be competitive very quickly. It would be a platform that can scale and work for large teams as well as small ones.&lt;/p>
&lt;p>But it doesn&amp;rsquo;t have to end there. Let&amp;rsquo;s talk about capabilities. Earlier I mentioned how difficult it is to compete on capabilities because it usually means running your own servers and dealing with hardware is hard. You can however compete on software capabilities and improve the margins by doing so.&lt;/p>
&lt;p>Let&amp;rsquo;s look at an AWS service like RDS (Relational Database Service) as an example. RDS is how most companies run their database on AWS but under the hood it&amp;rsquo;s really just a combination of other AWS services. It uses their ec2 VMs, their storage, and then some software to orchestrate all that to make it useful for database management. I don&amp;rsquo;t say that to mean it&amp;rsquo;s a simple service &amp;ndash; RDS is incredibly complex and extremely valuable &amp;ndash; I am simply illustrating that just how you can combine primitives in the IaC spec you can combine cloud primitives with software to create new services and capabilities.&lt;/p>
&lt;p>Every SaaS company needs a number of capabilities that are serviced by various other entire companies but they don&amp;rsquo;t need to be. You can have an Auth service and an Email service and a feature flag service, etc.
&lt;div class="code-block">
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span style="color:#000;font-weight:bold">const&lt;/span> emailProvider &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">new&lt;/span> cloud.Email(&lt;span style="color:#d14">&amp;#34;MyEmail&amp;#34;&lt;/span>, {
sender&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;example.com&amp;#34;&lt;/span>,
dmarc&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#34;v=DMARC1; p=quarantine; adkim=s; aspf=s;&amp;#34;&lt;/span>
});
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>Use the hyperscalers for their base infrastructure and accept lower margins when wrapping that but write your own software to power higher-level services and charge more for those. Simply wrapping AWS Lambda? Don&amp;rsquo;t mark it up by 300% like Vercel. But do you have an Auth service that customers can provision which is just a number of Lambda functions under the hood for performing token exchanges? Charge more for that.&lt;/p>
&lt;p>You can create a platform where any sort of primitive a SaaS company might need they can have and it would be as easy for them to use as simply adding another few lines to their infrastructure spec. And because these services aren&amp;rsquo;t simple wrappers over AWS you can charge more for them. Eventually you have a cloud that isn&amp;rsquo;t just the easiest and best place to deploy your code but also the best platform for building a company.&lt;/p>
&lt;p>You don&amp;rsquo;t even necessarily have to build all these services yourself! AWS has a concept of a marketplace where you can buy software but it probably doesn&amp;rsquo;t work how you expect. You can buy software there but it&amp;rsquo;s usually just a funnel to get you into the sales org of the respective company. You don&amp;rsquo;t actually get the software in your own AWS account you usually just get the lowest-tier license. This model can be improved upon. Any SaaS app that is hosted on your cloud could technically be made into a standalone service because it would exist as an IaC spec which is a combination of your core primitives plus some extra software on top. These SaaS providers could then list their apps on a marketplace and anyone else using your cloud could buy it and &lt;strong>have it deployed to their own accounts.&lt;/strong>&lt;/p>
&lt;p>This happens today when enterprise companies ask SaaS vendors to self-host their products and I&amp;rsquo;ve seen multiple companies spend years refactoring code to enable that and usually even dedicating a percentage of ongoing engineering time to just maintain and support those self-hosted instances . Imagine a world where standing up a new service in your own cloud tenant was as simple as signing a contract on the marketplace. The cloud could manage the contract, the payment, and the provisioning. The cloud could expose granular cross-tenant permissions so that support engineers from the vendor could go modify or observe that specific service in the customer&amp;rsquo;s tenant when appropriate.&lt;/p>
&lt;p>I really think this is an underrated effect of all of this and it&amp;rsquo;s something that should really be it&amp;rsquo;s own blog post. To really understand just how impactful this would be you have to be able to think about 2nd and 3rd order effects of a platform that does everything with IaC and provides the right primitives to combine. If it became extremely easy to provision complex SaaS services into customer tenants while still enabling support and DRM and contract enforcement you could drastically change the business model for the tech landscape. Companies could change how they do procurement and sales to be far more streamlined and efficient. If, as a SaaS provider, you&amp;rsquo;re not running the compute for your customer you can experiment with different business models because your COGS would be far lower. Even the way apps are built could be simplified if you knew that the app would always run in a tenant isolated by the cloud itself. You could even experiment with things like Software as a Product instead of as a Service because in theory there&amp;rsquo;s no reason different tenants can&amp;rsquo;t be running different versions of the same product meaning it would be viable to charge people one-time prices for different releases. Many things would change if a cloud platform was capable of supporting this.&lt;/p>
&lt;p>This is the only way I can imagine a PaaS that doesn&amp;rsquo;t manage its own servers to compete on all dimensions. There&amp;rsquo;s even some things I left out. For example, I think customers should be able to bring their own cloud so they can take advantage of better cost savings and they don&amp;rsquo;t need to churn just because they got bigger. I also wanted to allow the connection to GCP and Azure as well as AWS and make it relatively seamless to manage infrastructure across them which would be useful for giant companies that are adopting a multi-cloud strategy. Once again, IaC makes that easy for the user and this could even allow for private cloud integration as long as a company&amp;rsquo;s private servers expose a certain interface.&lt;/p>
&lt;p>Ultimately these are not easy ideas and anyone who tries to build something like this needs to be prepared for a long road but in my opinion it&amp;rsquo;s the best way to build a generational company in the cloud. There are certainly going to be pitfalls and things that make this approach extremely difficult but in my opinion it&amp;rsquo;s really the only way to get the optimal tradeoff along all 3 dimensions and I think it&amp;rsquo;s the tradeoff that allows someone to build a better cloud than anything that exists today.&lt;/p>
&lt;h2 id="how-its-playing-out">How It&amp;rsquo;s Playing Out &lt;a class="anchor" href="#how-its-playing-out">
#
&lt;/a>&lt;/h2>&lt;p>Well, Antimetal went in a slightly different direction than what I originally had envisioned but I think that was smart of them. To implement price controls and create a better spend experience in the way I envisioned I needed to have a platform in the first place. Matt, my ex- cofounder, found a better way. He said to hell with having an actual cloud and just went ahead and built a platform that sits within your own cloud and orchestrates reserved instances for you so that you can get cost savings. This was a genius move because it meant they could avoid all the complexity of building a PaaS and just focus on selling a product where they only make money if they save their customer money. That tends to be an easy business model to sell and now they are installed in hundreds of customers' clouds earning their trust and gaining momentum. I don&amp;rsquo;t know if they want to even branch out into the PaaS model at this point and I don&amp;rsquo;t even think it would make sense for them to do so but they would be in a pretty good position if they tried.&lt;/p>
&lt;p>Besides Antimetal, it appears that Vercel is winning in the short term as the PaaS of choice for many. I&amp;rsquo;m skeptical of Vercel, however. The vibes feel off, React and NextJS seem to be undergoing somewhat of a schism within the community, and I think many people feel that Vercel does not tend to act in &lt;a href="https://x.com/thdxr/status/1780710481084432849">good faith&lt;/a>. They are in the lead amongst PaaS platforms but $100 million in revenue is far from $100 billion in revenue and I still fundamentally think the way they&amp;rsquo;ve created their product for ultra simplicity has put a very big ceiling that will be hard for them to break out of. Most companies that will pay a lot for cloud hosting do not care about 1-click deployments through a dashboard.&lt;/p>
&lt;p>In my opinion edge computing is also turning out to not be a really good bet and I feel validated in that. There are some operations that work well on the edge but any operation that needs to rely on a database in a central location nullifies the entire benefit of the edge. There are new serverless database offerings that are growing in popularity, though, so it&amp;rsquo;s possible that this calculus changes over time. Still, if you&amp;rsquo;re building a B2B SaaS then 30ms ping vs 120ms ping isn&amp;rsquo;t the difference between your company&amp;rsquo;s product getting customers or not. It seems quite clear to me that if performance really matters for your application you&amp;rsquo;re better off just doing local-first with a smart sync engine than using the edge and if performance doesn&amp;rsquo;t matter that much then you don&amp;rsquo;t need the edge.&lt;/p>
&lt;p>And that brings me to SST which is the only player in the space building something that aligns with what I had in mind. This is not an ad for SST I just get excited about it because their founders seem to really &lt;a href="https://x.com/thdxr/status/1830990051322237260">&amp;ldquo;get&amp;rdquo;&lt;/a> what I had in mind 2 years ago. Remember that example code snippet I used up above to illustrate how you could theoretically let someone send emails from within their product? That&amp;rsquo;s actually a &lt;a href="https://sst.dev/docs/start/aws/email/">code example&lt;/a> from SST! To deploy any infrastructure with SST you need to define it in a type-safe IaC specification built on top of the &lt;a href="https://www.pulumi.com/">Pulumi&lt;/a> engine. They&amp;rsquo;ve created shims on top of AWS and Cloudflare providers in Pulumi to allow for a simpler interface for many of the services while still letting you set basically any complex configuration if you want to.&lt;/p>
&lt;p>They also let you seamlessly deploy to multiple clouds at once because of their use of IaC! Here&amp;rsquo;s a snippet creating an email provider in AWS and configuring it&amp;rsquo;s dns to use Cloudflare. Do you know how wild it is to be able to deploy this sort of configuration this easily?&lt;/p>
&lt;div class="code-block">
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span style="color:#000;font-weight:bold">export&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> email &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">new&lt;/span> sst.aws.Email(&lt;span style="color:#d14">&amp;#34;Email&amp;#34;&lt;/span>, {
sender&lt;span style="color:#000;font-weight:bold">:&lt;/span> domain,
dns&lt;span style="color:#000;font-weight:bold">:&lt;/span> sst.cloudflare.dns(),
});
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>And because they&amp;rsquo;re using Pulumi and simply deploying resources to your own AWS instance any capability that they do not provide with the SST provider you can still use with other Pulumi providers. You can even orchestrate your other SaaS tools like Stripe and then link them to your resources. No fiddling with the Stripe dashboard to set up a new webhook anymore.
&lt;div class="code-block">
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span style="color:#000;font-weight:bold">import&lt;/span> { domain } from &lt;span style="color:#d14">&amp;#34;./dns&amp;#34;&lt;/span>;
sst.Linkable.wrap(stripe.WebhookEndpoint, (endpoint) =&amp;gt; {
&lt;span style="color:#000;font-weight:bold">return&lt;/span> {
properties&lt;span style="color:#000;font-weight:bold">:&lt;/span> {
id&lt;span style="color:#000;font-weight:bold">:&lt;/span> endpoint.id,
secret&lt;span style="color:#000;font-weight:bold">:&lt;/span> endpoint.secret,
},
};
});
&lt;span style="color:#000;font-weight:bold">export&lt;/span> &lt;span style="color:#000;font-weight:bold">const&lt;/span> webhook &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">new&lt;/span> stripe.WebhookEndpoint(&lt;span style="color:#d14">&amp;#34;StripeWebhook&amp;#34;&lt;/span>, {
url&lt;span style="color:#000;font-weight:bold">:&lt;/span> $interpolate&lt;span style="color:#d14">`https://openapi.&lt;/span>&lt;span style="color:#d14">${&lt;/span>domain&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">/hook/stripe`&lt;/span>,
metadata&lt;span style="color:#000;font-weight:bold">:&lt;/span> {
stage&lt;span style="color:#000;font-weight:bold">:&lt;/span> $app.stage,
},
enabledEvents&lt;span style="color:#000;font-weight:bold">:&lt;/span> [
&lt;span style="color:#d14">&amp;#34;payment_method.attached&amp;#34;&lt;/span>,
&lt;span style="color:#d14">&amp;#34;payment_method.detached&amp;#34;&lt;/span>,
&lt;span style="color:#d14">&amp;#34;payment_method.updated&amp;#34;&lt;/span>,
&lt;span style="color:#d14">&amp;#34;product.created&amp;#34;&lt;/span>,
&lt;span style="color:#d14">&amp;#34;product.updated&amp;#34;&lt;/span>,
&lt;span style="color:#d14">&amp;#34;product.deleted&amp;#34;&lt;/span>,
&lt;span style="color:#d14">&amp;#34;price.created&amp;#34;&lt;/span>,
&lt;span style="color:#d14">&amp;#34;price.updated&amp;#34;&lt;/span>,
&lt;span style="color:#d14">&amp;#34;price.deleted&amp;#34;&lt;/span>,
],
});
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>I&amp;rsquo;ve never seen ergonomics this powerful from a PaaS but it&amp;rsquo;s really an obvious conclusion when you think about the 2nd and 3rd-order effects of IaC and the cloud.&lt;/p>
&lt;p>Still, there are open questions to me about their success. For one it&amp;rsquo;s not clear how they make money because their entire platform is open source and they run all the services in your cloud so they don&amp;rsquo;t host anything themselves. From what I gather they simply charge for support contracts and I&amp;rsquo;m not sure how lucrative that is. If all their revenue comes from support then it&amp;rsquo;s more of a consultancy than a product. This means they&amp;rsquo;re not raising tons of money and it seems that they try to keep the team very lean and independent. I personally like that style of work but building a cloud platform that can do a billion in revenue one day is a really hard thing to do and part of me wonders if it&amp;rsquo;s just too &lt;em>big&lt;/em> to do if you aren&amp;rsquo;t going to go the typical VC hyper-growth route. Then again, it&amp;rsquo;s possible that by taking the approach they&amp;rsquo;re taking they can more easily avoid the local minima that the other platforms fall into. Only time will tell.&lt;/p>
&lt;p>The last two things they have going against them are that they are very focused on the serverless aspect of the cloud. This &lt;em>may&lt;/em> be a good long term bet and I sometimes marvel at how simple it makes things when digging seeing example apps built with SST but at the same time there&amp;rsquo;s so many open questions around serverless. I hear so many horror stories about people accidentally racking up bills, misconfiguring lambdas and getting charged for IPs, etc. I want more confidence that what I&amp;rsquo;m doing with serverless is best practice and I want more insight into how much things will cost and how to avoid blowing my own foot off. Part of this might just be better documentation or maybe it is creating primitives that let you set spend limits but overall I think it holds them back. It should be noted you don&amp;rsquo;t &lt;em>need&lt;/em> to use lambdas to use SST and they support deploying containers and again, you can always deploy raw ec2 instances using Pulumi but still most of their branding is around serverless so they will be associated with the vibes of serverless and right now it seems to be a buzzword with mixed feelings amongst devs.&lt;/p>
&lt;p>And the last big problem facing SST is that it &lt;em>is&lt;/em> too complex for beginners. I can&amp;rsquo;t imagine how many users they lose at the top of the funnel when those prospects realize they need to create their own AWS account, &lt;a href="https://sst.dev/docs/aws-accounts/">configure it a certain way&lt;/a>, write code, and only then will they be able to try SST. That&amp;rsquo;s too much overhead. SST should really create a shared managed tenant where someone can go to the SST website, create an account, connect to a GitHub repo and then have a default SST spec opened as a PR in that repo automatically and deployed to a common AWS instance that SST manages. That would allow them to have an experience on par in simplicity to Vercel and it would give them the opportunity to charge users for more than just support. Most users would eventually bring their own cloud and that&amp;rsquo;s okay! But you can&amp;rsquo;t underestimate the power of a sales funnel like that.&lt;/p>
&lt;p>So two and a half years later the space is still as fascinating as it was before. It&amp;rsquo;s matured a lot and there&amp;rsquo;s a ton of really interesting players but SST is the only one that has me really excited, especially with the release of their v3 platform, Ion. I&amp;rsquo;m also keeping my eye on Oxide because they could potentially be the biggest beneficiary to the movement to repatriate workloads but guess what? The best way to help companies orchestrate infrastructure across multiple clouds, including private ones, happens to also be what SST is doing. Ultimately I think it&amp;rsquo;s still anyone&amp;rsquo;s market and no one is invincible and I&amp;rsquo;m extremely excited to see how it plays out in the coming years.&lt;/p></description></item><item><title>Visceral Moments</title><link>https://olivergilan.com/blog/visceral-moments/</link><pubDate>Mon, 24 Jun 2024 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/visceral-moments/</guid><description>&lt;p>There are distinct memories in life, like birthdays or breakups, but then there are moments that are far more real. They stay with me only as a feeling. For some of those moments I will never experience them again such as the last day of school before summer break with all the apprehension and excitement in the air before hearing the final bell ring and running out of the air conditioned building to feel the warm air on my face knowing that for two months, I was free. But for many of these moments I can and do experience them again now as an adult and when they happen I find myself anchored in the present. They do more than just remind of specific memories and events they make me remember what it&amp;rsquo;s like to live every moment totally absorbed in reality rather than living in the abstract space created by my prefrontal cortex. They are memories stored in the body itself, reminding me about the physical world rather than the world of information.&lt;/p>
&lt;p>Many of these moments are felt most strongly when getting ready for sleep. Watching the snow fall outside in the waning light as I sit cozy in a cabin, the only sound coming from the crackling and popping of the fire and the breathing of my family. The stillness and quiet that accompanies a snowfall has a way of putting me at ease better than any meditation ever could. The warmth of a fire and its soft glow activates a mechanism in me that I can only assume to be a primal conditioning that extends to my ancestors thousands of years ago. It tells me to pull my family close and quiet my thoughts and sleep peacefully knowing that I am safe.&lt;/p>
&lt;p>Or laying in bed during a thunderstorm with the slow rolling percussion and the brown noise of rainfall is something I experienced many times as a kid. Now those stormy nights transport me back to my childhood. Perhaps it&amp;rsquo;s the knowledge that I am dry and warm and safe that make those nights feel so satisfying or maybe it&amp;rsquo;s just that bedtime is when I had the opportunity to take a breath and exist in the moment. Even waking up on a winter weekend morning to a howling northeastern wind and knowing that I could sleep in and take my time in the warmth of my blankets would fill me with comfort and gratitude.&lt;/p>
&lt;p>And sometimes a bed wasn&amp;rsquo;t even involved such as the many moments driving home after a long day in the city with my parents and pretending to be asleep in the back of the car so that they would have to carry me inside. I would map out every turn and traffic light and stop sign so that I could pretend to sleep from miles away and still know how close we were to home without needing to open my eyes. And sometimes I would even fall asleep for real only to wake up just before arriving at home but those were the times I had to pretend I was sleeping extra hard. I wasn&amp;rsquo;t going to miss an opportunity to be carried to bed after having legitimately slept!&lt;/p>
&lt;p>Not all these moments involve sleep, though. There&amp;rsquo;s something distinctly unique about a hot day at the beach. Running and swimming. Working up a sweat and then washing it off with a dip in the ocean and then drying off in the heat of the sun. But it&amp;rsquo;s the moment after that sticks with me. Heading back to the house and taking an outdoor shower to wash off all the sand and salt. Feeling the lukewarm freshwater clean and cool me down feels like a day well spent.&lt;/p>
&lt;p>There were long summer days without a single responsibility and only a giant book to read were a staple of my childhood. I finished multiple 500-page books on days like that, usually while finding some new way to arrange myself on the couch every hour.&lt;/p>
&lt;p>And the class right after a big lunch and long recess full of running where I had to prop my head in one hand while leaning over my desk so I could try to pay just enough attention so the teacher wouldn&amp;rsquo;t call me out. It was always these moments when I was physically exhausted and content when I had the most boring classes with a teacher that would drone on and on in just the right way to make me fall asleep. I think the school system designs the curriculum in such a way to be a challenge for students in those moments.&lt;/p>
&lt;p>And there were the days after the first big snowfall of the year when the snowplows would come down our street and pile snow into big dunes 10 feet high! Gearing up and running out to play king of the hill on those giant snow mounds with my siblings was one of the best parts of winter followed by digging tunnel networks and little caves that we play in and then summarily destroy.&lt;/p>
&lt;p>But perhaps the best feeling is the first warm day of spring. When finally after months of gray skies and biting winds the sun comes out and the breeze carries warm air and suddenly you realize there&amp;rsquo;s been a shift and it&amp;rsquo;s officially spring, regardless of what the calendar says. That day is still my favorite even as an adult and anyone who lives in NYC is acutely aware of it because the whole city seems to go mad with optimism and hope. The energy is palpable and infectious.&lt;/p>
&lt;p>So many of these moments are specific to the weather and the nature of changing seasons and that is perhaps the best blessing of growing up in the American Northeast and being exposed to the ultimate form of each season. As I&amp;rsquo;ve grown older I&amp;rsquo;ve grown to appreciate it so much more and it&amp;rsquo;s why I do not think I could live the rest of my life in the endless mild spring of a San Francisco.&lt;/p>
&lt;p>I&amp;rsquo;m sure there are many visceral moments such as these that I&amp;rsquo;ve forgotten and I hope to experience more as I age. The beauty of these feelings is that they are stored deep within the cells of my body and all it takes is one experience to bring them back to the forefront of my conscious mind. They are not lost. I believe the fullness of a life can be measured by the frequency of these moments and I hope to be able to give my own children these experiences so that they can grow up knowing a world full of wonder and contentment.&lt;/p></description></item><item><title>Full Gluten Tolerance</title><link>https://olivergilan.com/blog/full-gluten-tolerance/</link><pubDate>Mon, 25 Mar 2024 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/full-gluten-tolerance/</guid><description>&lt;p>&lt;strong>Overview&lt;/strong>: Summer of 2019 &lt;a href="https://olivergilan.com/blog/living-with-buggy-hardware/">I became violently ill&lt;/a> and only recovered after cutting out all &lt;a href="https://www.hopkinsmedicine.org/health/wellness-and-prevention/fodmap-diet-what-you-need-to-know#:~:text=FODMAP%20stands%20for%20fermentable%20oligosaccharides,digestive%20distress%20after%20eating%20them.">FODMAPs&lt;/a> for a significant portion of time. Over time I successfully reintroduced most FODMAPs except for gluten. Even up to a year ago gluten would trigger an immediate and severe immune response which resulted in rashes, red skin, and bloating. Today after two years of cultivating my microbiome through diet and behavior I can now eat small amounts of gluten with less severe immune responses. The following protocol is designed to accelerate the last bit of recovery and get me back to full gluten tolerance. &lt;br>
&lt;strong>Thesis:&lt;/strong> Dysbiosis&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> &amp;amp; disregulation of intestinal tight junctions&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> lead to immunogenic gluten peptides&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> crossing the intestinal lining and triggering an immune response. Altering intestinal microbiome composition and fixing tight junction functionality via the reduction of zonulin&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> will restore gluten tolerance. &lt;br>
&lt;strong>Timeline:&lt;/strong> Mar 17 - Jun 29 (14 Weeks) &lt;br>
&lt;strong>Goal:&lt;/strong> Achieve full gluten tolerance. &lt;br>&lt;/p>
&lt;h2 id="protocol">Protocol &lt;a class="anchor" href="#protocol">
#
&lt;/a>&lt;/h2>&lt;h3 id="stress-reduction">Stress Reduction &lt;a class="anchor" href="#stress-reduction">
#
&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Metric&lt;/th>
&lt;th>7d avg&lt;/th>
&lt;th>4w avg&lt;/th>
&lt;th>Goal&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Resting Heartrate&lt;/td>
&lt;td>53bpm&lt;/td>
&lt;td>52bpm&lt;/td>
&lt;td>47bpm&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>HRV&lt;/td>
&lt;td>60ms&lt;/td>
&lt;td>59ms&lt;/td>
&lt;td>80ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Stress Score&lt;/td>
&lt;td>30&lt;/td>
&lt;td>32&lt;/td>
&lt;td>15&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Sleep Score&lt;/td>
&lt;td>77&lt;/td>
&lt;td>75&lt;/td>
&lt;td>95&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>60mg full spectrum CBD daily (30mg x 2 daily)&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>&lt;/li>
&lt;li>600mg KSM-66 Ashwagandha (300mg x 2 daily)&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>&lt;/li>
&lt;li>1000mcg Vitamin B12 daily&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>&lt;/li>
&lt;li>L-Theanine 200mg daily&lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup>&lt;/li>
&lt;li>20min breath-work daily (10min x 2)&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup>&lt;/li>
&lt;li>30min sunlight daily&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup>&lt;/li>
&lt;/ul>
&lt;h3 id="microbiome-rehabilitation">Microbiome Rehabilitation &lt;a class="anchor" href="#microbiome-rehabilitation">
#
&lt;/a>&lt;/h3>&lt;ul>
&lt;li>24h fast biweekly&lt;sup id="fnref:11">&lt;a href="#fn:11" class="footnote-ref" role="doc-noteref">11&lt;/a>&lt;/sup>&lt;/li>
&lt;li>72h fast once&lt;sup id="fnref:11">&lt;a href="#fn:11" class="footnote-ref" role="doc-noteref">11&lt;/a>&lt;/sup>&lt;/li>
&lt;li>20g insoluble fiber daily&lt;sup id="fnref:12">&lt;a href="#fn:12" class="footnote-ref" role="doc-noteref">12&lt;/a>&lt;/sup>&lt;/li>
&lt;li>10g soluble fiber daily&lt;sup id="fnref:12">&lt;a href="#fn:12" class="footnote-ref" role="doc-noteref">12&lt;/a>&lt;/sup>&lt;/li>
&lt;li>Fermented foods with each meal&lt;sup id="fnref:13">&lt;a href="#fn:13" class="footnote-ref" role="doc-noteref">13&lt;/a>&lt;/sup>&lt;/li>
&lt;li>Reduced animal proteins&lt;sup id="fnref:14">&lt;a href="#fn:14" class="footnote-ref" role="doc-noteref">14&lt;/a>&lt;/sup>&lt;/li>
&lt;li>800g of vegetables daily (6-8) different sources&lt;sup id="fnref:15">&lt;a href="#fn:15" class="footnote-ref" role="doc-noteref">15&lt;/a>&lt;/sup>&lt;/li>
&lt;li>Low FODMAP, low GI meals&lt;sup id="fnref:16">&lt;a href="#fn:16" class="footnote-ref" role="doc-noteref">16&lt;/a>&lt;/sup>&lt;/li>
&lt;li>Acidic component to every meal&lt;sup id="fnref:17">&lt;a href="#fn:17" class="footnote-ref" role="doc-noteref">17&lt;/a>&lt;/sup>&lt;/li>
&lt;/ul>
&lt;h3 id="exclusion-list">Exclusion List &lt;a class="anchor" href="#exclusion-list">
#
&lt;/a>&lt;/h3>&lt;ul>
&lt;li>Alcohol&lt;sup id="fnref:18">&lt;a href="#fn:18" class="footnote-ref" role="doc-noteref">18&lt;/a>&lt;/sup>&lt;/li>
&lt;li>Weed&lt;sup id="fnref:18">&lt;a href="#fn:18" class="footnote-ref" role="doc-noteref">18&lt;/a>&lt;/sup>&lt;/li>
&lt;li>Caffeine/Coffee&lt;sup id="fnref:19">&lt;a href="#fn:19" class="footnote-ref" role="doc-noteref">19&lt;/a>&lt;/sup>&lt;/li>
&lt;/ul>
&lt;h2 id="philosophy">Philosophy &lt;a class="anchor" href="#philosophy">
#
&lt;/a>&lt;/h2>&lt;p>Since I got sick most of the symptoms and recovery has been very much what you would expect with an autoimmune disease. My family is at risk for a variety of autoimmune disorders and we have a history of psoriasis. It certainly &lt;em>seems&lt;/em> like my immune system is being activated when I eat gluten and so it might make sense to take drugs designed for those sorts of problems. &lt;a href="https://www.fda.gov/about-fda/center-biologics-evaluation-and-research-cber/what-are-biologics-questions-and-answers">Biologics&lt;/a> like Humira are a powerful tool for people with autoimmune problems like this. That being said I do not want to take that path because&lt;/p>
&lt;ol>
&lt;li>those drugs are expensive and it would be one more hassle to worry about if my health insurance changes. (edit: literally just quit my job before posting this so my health insurance will, in fact, change)&lt;/li>
&lt;li>those drugs have nasty side effects and don&amp;rsquo;t travel super well due to refrigeration needs.&lt;/li>
&lt;/ol>
&lt;p>I was healthy my whole life without drugs and I see no fundamental reason why that cannot be my future. I believe the following: a switch was flipped one day that made me intolerant to gluten (I do not have CD according to blood tests) so I just need to flip that switch back.&lt;/p>
&lt;p>This protocol is not designed for the rest of my life it&amp;rsquo;s designed for right now. There are clearly people who drink alcohol and coffee and eat worse diets than me who can digest gluten just fine because the body is a resilient system. But the body is also a complex system-of-systems and in such complexity positive feedback loops can occur that prevent the return to homeostasis. I&amp;rsquo;m hoping this protocol can get my body back to a functioning state so that I can remain healthy even while living a less strict life.&lt;/p>
&lt;p>I expect this protocol to adjust over the course of these 17 weeks and I won&amp;rsquo;t have 100% adherence. I will track my progress and any changes to the protocol and make that data available on this blog at a later date. At the end of this time I will undergo a gluten challenge where I eat gluten normally for a full week and write up the results. The biggest constraint here is my bodyweight. When I became sick I very quickly lost 30lbs and I&amp;rsquo;ve regained 15 of those pounds over the past two years of recovery. I&amp;rsquo;d like to keep gaining weight but I suspect this protocol will make that difficult due to the reduction of red meat consumption as well as regular fasting. I will have to track my weight over these weeks to ensure I do not lose weight. I do believe if my gut heals then we could see my weight go up as I&amp;rsquo;ll be inclined to eat more and absorb more of the nutrients in my food.&lt;/p>
&lt;h2 id="science--references">Science + References &lt;a class="anchor" href="#science--references">
#
&lt;/a>&lt;/h2>&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4838534/#:~:text=Dysbiosis%20is%20defined%20by%20an,bacterial%20distribution%20within%20the%20gut">Dysbiosis&lt;/a> is a broad term that means an imbalance in the composition of gut bacteria. The food you eat doesn&amp;rsquo;t feed you it feeds the bacteria in your gut which break it down into components that your body absorbs along with byproducts called &lt;a href="https://www.cancer.gov/publications/dictionaries/cancer-terms/def/metabolite">metabolites&lt;/a> which affect various systems in your body. The composition of your gut bacteria matters because different strains of bacteria feed on different foods and produce different metabolites. These metabolites can promote or suppress inflammation, regulate the intestinal lining of your gut, affect your mood, and change the way your body absorbs various nutrients. Different strains of bacteria also breakdown food into different components. As it relates to gluten, depending on how this complex protein is broken down can determine if it results in immunogenic molecules or not.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Intestinal tight junctions are protein complexes in the intestinal skin that regulate the movement of molecules across the gut barrier. It is critical for nutrient absorption and controls the balance between tolerance and immunity to non-self antigens. &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6311762/#:~:text=Adjacent%20intestinal%20epithelia%20form%20tight,water%20across%20the%20intestinal%20epithelium">Source&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>Immunogenic gluten peptides are components of gluten that when isolated during digestion cause an immune response. These peptides are not always exposed during gluten digestion and thus its hypothesized that many gluten-related problems may be the result of incorrect gluten digestion. My hypothesis is that if this is what&amp;rsquo;s occuring inside me then fixing my gut composition will fix this.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>Zonulin is the only human protein discovered to date to directly modulate functionality of tight junctions. Zonulin overproduction has been shown as a biomarker of impaired gut barrier functionality and is a specific marker for many autoimmune diseases. Zonulin inhibitors like Larazotide acetate have been shown to significantly reduce autoimmune symptoms for patients with celiac disease. It can be hypothesized that the overproduction of zonulin leads to intestinal tight junction impairment and what&amp;rsquo;s commonly known as leaky gut syndrome which leads to immune response. If this is the case then if I reduce serum zonulin levels I should see a reduction in immune reactions to gluten. The composition of the microbiome as well as stress &lt;em>may&lt;/em> both lead to zonulin production which is why a big part of this protocol focuses on the reduction of baseline stress levels. &lt;a href="https://www.frontiersin.org/articles/10.3389/fnut.2020.00152/full">Source&lt;/a> &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3384703/">Source&lt;/a> &lt;a href="https://sci-hub.se/10.1016/j.biopsycho.2018.08.013">Source&lt;/a> &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC10569989/">Source&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>There are other ways to measure stress such as a cortisol reading from a blood test but I am using these proxies instead because I can get somewhat reliable continuous monitoring of them from my garmin. Heartrate and HRV are also good proxies because they correlate strongly with your internal vagal tone. We know that stress causes dysfunction of the intestinal lining by stimulating production of zonulin. The key here is I&amp;rsquo;m trying to reduce baseline stress not peak stress. When I work out or run hard I will experience peak stress and in those times I actually have a very good stress response because I&amp;rsquo;m a fit individual. The real problem is all the other moments when I should be relaxed but my baseline level of stress is just a little too high causing this constant drip of zonulin and cortisol. To understand how to reduce baseline levels of stress you need to understand the nervous system, namely the autonomic and sympathetic parts of it. The sympathetic nervous system activates the fight or flight mode in humans while the autonomic nervous system balances it out and calms you down. Normally these two systems are in a tug of war with the autonomic system keeping you calm most of the time and your sympathetic nervous system giving you energy in acute moments when you need it. It&amp;rsquo;s possible for the autonomic system to become weak and unable to effectively balance out the sympathetic system leading to higher levels of baseline stress and it&amp;rsquo;s this sort of imbalance that can lead to a bad positive feedback loop: higher stress leads to improper digestion leads to less nutrition absorption leads to worse sleep leads to more stress. So my main strategy for reducing baseline stress levels is to boost the functionality of autonomic nervous system and the biggest component of that is the &lt;a href="https://my.clevelandclinic.org/health/body/22279-vagus-nerve">Vagus nerve&lt;/a>. The vagus nerve is one of the key pathways in which the gut communicates with the brain and vice versa and there is &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5859128/">evidence&lt;/a> that various vagus nerve therapies can reduce inflammation. HRV is a &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6996447/#:~:text=The%20link%20between%20vagus%20nerve,established%2C%20correlating%20with%20vagal%20tone.">great proxy&lt;/a> for understanding the health of the vagus nerve.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>CBD has been shown to be significantly effective in controlling stress responses in humans. &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8704602/">Source&lt;/a>&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>Ashwagandha, specifically the KSM-66 variety has been shown to be significantly effective in controlling stress response in humans. &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8762185/">Source&lt;/a>&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8" role="doc-endnote">
&lt;p>Vitamin B12 is highly correlated with HRV levels specifically when studied among stroke patients but this is unsurprising considering B12 is critical for nerve health. I believe that adequate B12 levels would correlate to a healthier vagus nerve which would lead to improved HRV. that being said my B12 levels are not low nowadays (I unfortunately don&amp;rsquo;t have data from when I was sick for this metric) so I don&amp;rsquo;t expect this to make a huge difference. &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC10118344/">Source&lt;/a>&amp;#160;&lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9" role="doc-endnote">
&lt;p>L-theanine has been shown to reduce stress, anxiety, and improve sleep in humans. &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6836118/">Source&lt;/a>&amp;#160;&lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10" role="doc-endnote">
&lt;p>I feel I do not need to even provide sources for these two. Breathwork has been shown to clinically reduce stress levels and Vitamin D is critical for reguating the immune system and stress levels. I prefer raw, organic, unfiltered sunlight beyond just Vitamin D supplementation and I live in an area of the world where I should be able to get 30 minutes of sunlight a day but in days where I can&amp;rsquo;t I will supplement.&amp;#160;&lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:11" role="doc-endnote">
&lt;p>Fasting can have a profound effect on both the immune system and the gut&amp;rsquo;s microbiome. Studies have reported significant positive changes in the composition of gut bacteria for people undergoing intermittent fasting as well as prolonged fasting. Dysbiosis is simply an imbalance in gut bacteria usually because one or two strains have grown too large and are outcompeting the other strains. Prolonged fasting can be effective at reconsituting this composition by restricting energy to the dominant strains. Fasting is also effective at retraining the immune system. Many studies show that a 72hr water fast is a tipping point where the immune system activates different pathways to recycle old damaged cells and replace them with new ones. I&amp;rsquo;ll admit I do not 100% understand the mechanisms here and I need to read more but I&amp;rsquo;m hoping that near the end of this protocol I will have fixed the root of the issue (leaky gut) and a 3-day fast can help retrain my immune system almost as a &amp;ldquo;factory reset.&amp;rdquo; It&amp;rsquo;s possible that intermittent fasting would actually be more effective here but I worry about my tendency to easily lose weight and I feel it would be easier to maintain or even gain weight while doing more targeted prolonged water fasts. Fasting is valuable but I do not want to sacrifice my weight so if I find bi-weekly to be too often I&amp;rsquo;ll adjust. &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC10495574/">Source&lt;/a> &lt;a href="https://www.cell.com/cell-stem-cell/fulltext/S1934-5909(14)00151-9">Source&lt;/a>&amp;#160;&lt;a href="#fnref:11" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:12" role="doc-endnote">
&lt;p>Fiber is incredibly important for the composition of the gut&amp;rsquo;s microbiome due to the generation of SCFAs and the bacteria that it supports. &lt;strong>If there is an 80/20 for improving gut health then fiber is a part of it!&lt;/strong> It effectively lowers the GI of meals by protecting starchy carbohydrates from being atttacked by enzymes which slows the conversion into glucose. High fiber diets have been shown to correlate with a reduction of symptoms for a variety of autoimmune diseases including psoriasis. Fiber regulates inflammation in the gut and the SCFAs like butyrate play an important role in protecting the gut&amp;rsquo;s mucus layer and inducing new generation of Treg cells which help calm the immune system. Dietary fiber does come in insoluble and soluble form and they do behave differently in the body. Generally I&amp;rsquo;m trying to get a total of 30g of fiber which is the recommended daily intake amount but specifically want to focus on insoluble fiber for its role in generating SCFAs. This is harder to get through just pure eating and will probably have to be supplemented and I will also be careful to slowly ramp up my intake to not overwhelm my system. Also most importantly fiber acts as prebiotic that supports valuable strains of gut bacteria and can help rebalance the composition of the microbiome. &lt;a href="https://pubmed.ncbi.nlm.nih.gov/29950699/">Source&lt;/a> &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7432353/#B28-ijms-21-05405">Source&lt;/a> &lt;a href="https://www.gisymbol.com/low-gi-explained/">Source&lt;/a> &lt;a href="https://www.ucsfhealth.org/education/increasing-fiber-intake">Source&lt;/a> &lt;a href="https://www.todaysdietitian.com/newarchives/0816p34.shtml">Source&lt;/a> &lt;a href="https://www.todaysdietitian.com/newarchives/AS20p24.shtml">Source&lt;/a>&amp;#160;&lt;a href="#fnref:12" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:13" role="doc-endnote">
&lt;p>Just about every civilization in human history has had a diet with a fermented food as its staple and the effect they have on the gut can be profound both in the short and long term. One of the most effective changes I&amp;rsquo;ve made over the past two years has been to increase the amount of fermented foods I eat (saurkraut, kimchi, miso, etc) and I credit it to a large part of my recovery. These fermented foods have live cultures which seed the gut with valuable bacteria and lead to long term diversity gains in the microbiome. I&amp;rsquo;m aiming to eat a portion of something fermented with every meal following &amp;mdash; or along with &amp;mdash; the intake of fiber so that these cultures have a better time colonizing in my gut. &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9003261/">Source&lt;/a>&amp;#160;&lt;a href="#fnref:13" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:14" role="doc-endnote">
&lt;p>This one is controversial and there&amp;rsquo;s a lot of conflicting evidence but it does seem like animal proteins and red meats specifically create more oxidative stress which can lead to gut inflammation. Red meat is abundant in saturated fatty acids which induces inflammation and heme which in turn leads to gut dysbiosis and reduces the synthesis of butyrate. Red meat intake is also correlated with autoimmune diseases but there&amp;rsquo;s so many confounding factors in such studies that it&amp;rsquo;s hard to know if it plays any significant role. I want to maintain my weight and strength and I&amp;rsquo;m already so limited on what calories I can consume that I will not cut it out completely but just reduce my intake. &lt;a href="https://pubmed.ncbi.nlm.nih.gov/29759553/">Source&lt;/a>&amp;#160;&lt;a href="#fnref:14" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:15" role="doc-endnote">
&lt;p>This basically just amounts of getting enough fiber plus some good micronutrients. Should be easy.&amp;#160;&lt;a href="#fnref:15" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:16" role="doc-endnote">
&lt;p>FODMAPs are sugars that are absorbed poorly and ferment in the small intestine. Cutting out FODMAPs was originally how I began to recover and whenever I get a bad flare up it is a strategy that helps control it. I maintain a mostly low FODMAP diet today but with this protocol I want to be stricter there for the time being which mostly amounts to cutting out various sources of sugar. Glycemic Index (GI) is a measure of how carbohydrate foods affect blood glucose levels. High GI foods spike blood glucose and lead to crashes that result in a food coma. Low GI foods are absorbed by the body slowly and give more steady levels of energy over the course of a day. When your blood glucose spikes your body releases more insulin which causes a whole host of problems including diabetes. Higher blood glucose can lead to inflammation and immune activation which is what I&amp;rsquo;m specifically trying to avoid. &lt;a href="https://www.gisymbol.com/low-gi-explained/">Source&lt;/a> &lt;a href="https://www.levelshealth.com/blog/metabolic-health-101">Source&lt;/a>&amp;#160;&lt;a href="#fnref:16" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:17" role="doc-endnote">
&lt;p>The presence of acid in the stomach slows down the conversion of carbohydrates into glucose which lowers the overall GI of a meal. This is one of the reasons fermented foods are so healthy. &lt;a href="https://www.gisymbol.com/low-gi-explained/">Source&lt;/a>&amp;#160;&lt;a href="#fnref:17" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:18" role="doc-endnote">
&lt;p>Alcohol is just not good for the gut, it&amp;rsquo;s not good for the immune system, and it&amp;rsquo;s literally just bad. I probably won&amp;rsquo;t be able to cut it out completely during these 3 months of spring but I will significantly reduce my consumption which is already low. I am not certain of marijuana&amp;rsquo;s effect on inflammation but I tend to either have or notice more inflammation oftentimes when I smoke so I will cut that out for now too.&amp;#160;&lt;a href="#fnref:18" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:19" role="doc-endnote">
&lt;p>There is limited evidence concerning coffee and the microbiome. It&amp;rsquo;s generally accepted that coffee alters the composition of the microbiome in a significant manner but it&amp;rsquo;s not clear from what I&amp;rsquo;ve read if it&amp;rsquo;s a good thing or a bad thing. My prior is that coffee is bad for the microbiome but recent studies show that it may increase microbiome diversity and reduce inflammation. It&amp;rsquo;s hard to know what&amp;rsquo;s real so I will overweight my priors for now and simply maintain a reduced consumption of coffee. If I need the occasional caffeine I will use green tea. &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7282261/">Source&lt;/a> &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC10096519/">Source&lt;/a>&amp;#160;&lt;a href="#fnref:19" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Kidney Crisis</title><link>https://olivergilan.com/blog/kidney-crisis/</link><pubDate>Sun, 04 Feb 2024 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/kidney-crisis/</guid><enclosure url="https://olivergilan.com/images/silicon_kidney.png" type="image/jpeg"/><description>&lt;div id="tocContainer">
&lt;p id="contents">Contents&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#causes-of-kidney-failure">Causes of Kidney Failure&lt;/a>&lt;/li>
&lt;li>&lt;a href="#treatment">Treatment&lt;/a>&lt;/li>
&lt;li>&lt;a href="#revolutions-in-waiting">Revolutions in Waiting&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#better-dialysis">Better Dialysis&lt;/a>&lt;/li>
&lt;li>&lt;a href="#growing-kidneys">Growing Kidneys&lt;/a>&lt;/li>
&lt;li>&lt;a href="#building-an-artificial-kidney">Building an Artificial Kidney&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#path-to-market">Path to Market&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#the-tech">The Tech&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-regulatory-environment">The Regulatory Environment&lt;/a>&lt;/li>
&lt;li>&lt;a href="#financial-viability">Financial Viability&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#looking-forward">Looking Forward&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;p>In the time it takes you to read this post at least one person will have died waiting for a kidney transplant. Kidney disease is the 10th biggest killer in the US and is estimated to rise to the 4th or 5th biggest by 2040. About 1 in 7 people suffer from some form of kidney disease and over 800,000 Americans are living with total kidney failure also known as end-stage renal disease (ESRD). For many of these patients death is the most likely outcome but that may change in the next 10 years.&lt;/p>
&lt;p>I was born with one kidney but I was not aware of the implications of that until recently when I had a health scare two years ago. I had always just assumed kidney disease was a solved problem with transplants and dialysis but what I&amp;rsquo;ve learned that&amp;rsquo;s far from the case. In this post I want to share some of the issues and exciting new developments I&amp;rsquo;ve learned about over the past year and a half.&lt;/p>
&lt;h2 id="causes-of-kidney-failure">Causes of Kidney Failure &lt;a class="anchor" href="#causes-of-kidney-failure">
#
&lt;/a>&lt;/h2>&lt;p>The most common cause of kidney failure is diabetes which accounts for nearly half of the new cases in the U.S. Nephron cells in the kidney responsible for filtering blood are damaged when exposed to repeated high blood sugar and high blood pressure so it should not come as a surprise that kidney disease is on the rise at the same time that obesity and diabetes &lt;a href="https://www.cdc.gov/diabetes/data/statistics-report/index.html">is exploding&lt;/a> in the US. Unless &lt;a href="https://www.drugs.com/semaglutide.html#:~:text=Semaglutide%20is%20the%20active%20ingredient,in%20type%20two%20diabetes%20patients.">semaglutide&lt;/a> reveals itself to be safe over long periods of time, becomes cheaply and widely available, &lt;em>and&lt;/em> proves effective at preventing diabetes then we can expect this trend of kidney failure to continue. &lt;strong>As of 2020, kidney disease is the fastest-growing noncommunicable disease in the U.S.&lt;/strong>&lt;/p>
&lt;p>Kidney failure doesn&amp;rsquo;t happen overnight and it&amp;rsquo;s estimated most individuals suffering with partial kidney failure are not even aware of it and many people never realize they are experiencing total kidney failure and die from lack of treatment. Kidney health is assessed by measuring the total &lt;a href="https://www.kidney.org/kidneydisease/siemens_hcp_gfr#:~:text=GFR%20(glomerular%20filtration%20rate)%20is,of%20CKD%20in%20an%20individual.">glomerular filtration rate (GFR)&lt;/a> which just amounts to the total amount (ml) of blood your kidneys are filtering per minute. The stage of kidney disease a patient is experiencing depends on their GFR with a value below 90 indicating the beginning of kidney disease, a value below 30 indicating severe reduction in capability of the kidneys, and a value below 15 indicating a patient is experiencing ESRD with a requirement for dialysis. These numbers can vary depending on age, sex, and body size.&lt;/p>
&lt;p>GFR is usually measured with a complex procedure using blood plasma or monitoring urinary clearance over an entire day so doctors generally do not measure it directly and instead estimate it using a person&amp;rsquo;s creatinine and cystatin C level in combination with factors such as age, race, and gender. This estimate usually shows up on routine blood exams performed at an annual checkup with a PCP under the label eGFR. Being aware of this value over time is important to understand if you should make lifestyle changes early on to prevent kidney disease from progressing.&lt;/p>
&lt;h2 id="treatment">Treatment &lt;a class="anchor" href="#treatment">
#
&lt;/a>&lt;/h2>&lt;p>I was born with one kidney but never gave it much thought because I, like many people, went my whole life assuming kidney failure wasn&amp;rsquo;t a big deal anymore. I thought the advent of kidney transplants meant that if necessary I could simply get another kidney if mine failed and the odds that I would be compatible with a family member willing to donate one is &amp;mdash; or at least was in my estimation &amp;mdash; high. This turns out not to be as great of a solution as I first thought.&lt;/p>
&lt;p>The transplant solution in which the kidney of a living or decreased donor is matched with a patient and then surgically implanted into their body is the best solution we currently have for people experiencing kidney failure. Only a minority of lucky patients will benefit from it though. &lt;strong>There were only 26 thousand kidney transplants performed in 2022 and of the 130,000 new patients diagnosed with ESRD that year only a little more than 3,000 of them received a transplant.&lt;/strong> The rest went on dialysis.&lt;/p>
&lt;p>If you&amp;rsquo;re lucky enough to get a transplant you will need to take immunosuppressant drugs for the rest of your life. Just like any organ transplant the body is immediately aware that the tissue of the new organ originated from outside itself and will begin to attack it with the immune system unless suppressed. These drugs are costly and need to be taken every single day for the rest of your life. Your immune system will be compromised from these drugs making you a patient and at-risk for events like COVID for the rest of your life.&lt;/p>
&lt;p>The real kicker? &lt;strong>Kidney transplants don&amp;rsquo;t last forever.&lt;/strong> Even with the immunosuppressants the &lt;a href="https://pubmed.ncbi.nlm.nih.gov/33346917/#:~:text=Median%20survival%20for%20deceased%20donor%20transplants%20increased,11.7%20years%20in%20the%20most%20recent%20era.">half-life for a transplanted kidney is 11 years and only 7&lt;/a> when from a deceased donor. There is also a chance of your body suddenly rejecting the kidney far sooner even with the help of drugs. This is usually not seen as an issue because most patients experiencing total kidney failure are older but as kidney disease begins affecting people at younger ages it will become more common to get a transplant and then end up back at square one when the transplant expires.&lt;/p>
&lt;p>If you are not fortunate enough to get a transplant you are put on the waitlist and your only other option in the meantime is dialysis. Hemodialysis is generally performed in a clinic 3 to 4 times a week in sessions of 4 to 5 hours and involves incrementally removing all the blood from the body, running it through a series of semipermeable tubes surrounded by a dialysis liquid which separates the toxins from the blood through the principle of diffusion.&lt;/p>
&lt;p>Dialysis works in the sense that it can keep you alive (barely) but chances are you will not be able to live a normal life while relying on it. Nearly half of patients who reach ESRD and receive hemodialysis are under the age of 65 (working age) and &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3082405/">71% of them&lt;/a> are unemployed despite being employed prior to dialysis. If you can maintain employment and a normal routine during treatment then it may not be for long. &lt;strong>Of all the patients receiving hemodialysis &lt;a href="https://www.renalfellow.org/2018/09/19/what-are-survival-rates-for-dialysis-patients/">68% of them die in the first 5 years&lt;/a>.&lt;/strong> The survival rate of patients on long-term dialysis has even been shown to be shorter than many cancers. The supposed solution to kidney failure that I&amp;rsquo;d heard about my whole life is less of a solution and more of a bandaid on a gaping wound. You do not want to find yourself in a position where dialysis is necessary to survive because odds are, you won&amp;rsquo;t.&lt;/p>
&lt;p>There is a newer form of dialysis called peritoneal dialysis which uses a similar concept to hemodialysis but is much easier to perform. It involves pumping dialysate into the abdominal cavity and relying on osmosis to pull toxins from the blood into the dialysate before draining it. This can usually be performed by the patient themselves at home or on the go which allows for more continuous treatment of the blood. Because the blood is filtered more often the survival rate is higher than hemodialysis but only a little (52% over 5 years).&lt;/p>
&lt;h2 id="revolutions-in-waiting">Revolutions in Waiting &lt;a class="anchor" href="#revolutions-in-waiting">
#
&lt;/a>&lt;/h2>&lt;p>The most surprising part of my reading and talking to people in the field over the past year and a half was learning just how few resources are available to solve this problem. Since 1987 the standard treatment for kidney failure has remained largely the same we&amp;rsquo;ve simply increased the scale at which that treatment is available. Kidney disease was considered a solved problem with the widespread availability of dialysis and nephrology became viewed as a boring field of medicine as a result. Most of the nephrology training programs in the US could not fill all their vacant spots in 2018 and the MDs matching in nephrology &lt;a href="https://asndataanalytics.github.io/AY-2019-Match/">declined by 12%&lt;/a>. The vast majority of funding and attention goes towards flashier parts of the body such as the brain and heart. Only in recent years has the government realized the shortcomings of dialysis and committed to spending more on better solutions. As a result many private startups and labs have begun experimenting with next generation treatments.&lt;/p>
&lt;p>There are three main branches of progress in the space: better dialysis, growing/harvesting real kidneys, and building an artificial kidney.&lt;/p>
&lt;h3 id="better-dialysis">Better Dialysis &lt;a class="anchor" href="#better-dialysis">
#
&lt;/a>&lt;/h3>&lt;p>The better dialysis branch of progress is centered on just that: creating better methods for performing dialysis. This generally boils down to making it easier for a patient to perform dialysis on themselves so that they can do it more regularly, or even constantly, with less chance of error. There is some progress in this area with promising results of &lt;a href="https://pubmed.ncbi.nlm.nih.gov/27398407/">small dialysis machines worn like a backpack&lt;/a> as well as small bedside machines that can be used while sleeping. In the end, though, many of these solutions fail to pass final FDA approval and generally do not receive enough funding to reach mass market. The reliance on dialysate also imposes a challenge on miniaturization as it is a consumable liquid that needs to be constantly replaced as it is used.&lt;/p>
&lt;p>It would be great to see progress in this branch reach the mass markets but I&amp;rsquo;m skeptical that this approach can deliver significantly better outcomes than it already does.&lt;/p>
&lt;h3 id="growing-kidneys">Growing Kidneys &lt;a class="anchor" href="#growing-kidneys">
#
&lt;/a>&lt;/h3>&lt;p>A much more fascinating branch of progress is in growing kidneys themselves. While dialysis focuses on treating the problem that arises with kidney failure growing kidneys aims to solve the transplant supply bottleneck because transplanted kidneys have much better mortality outcomes than dialysis.&lt;/p>
&lt;p>One way to grow kidneys is to let nature do it for us and then just harvest them which is what researchers have been trying to do with pigs and it&amp;rsquo;s shown some promise. Researchers at NYU and the University of Alabama have both successfully &lt;a href="https://nyulangone.org/news/pig-kidney-xenotransplantation-performing-optimally-after-32-days-human-body">transplanted genetically modified pig kidneys&lt;/a> into humans while maintaining functionality. All of these transplants have taken place in brain-dead patients but the latest experiment has shown the kidney to be functional for 32 days after transplant. The genetic modification is necessary to prevent immediate rejection by the host body but otherwise it seems that pig kidneys are close enough in function and throughput to act in place of failed human ones. This could dramatically increase the supply of kidneys available for transplant but it certainly raises some ethical concerns and as a Jewish man I&amp;rsquo;m not sure I&amp;rsquo;d want a kidney from a pig. It&amp;rsquo;s also not an optimal solution because far more immunosuppressants are required to make this work than for a normal kidney. It&amp;rsquo;s likely that these kidneys will have a shorter half-life after transplantation and leave the patient in a weaker state than a regular human kidney but if the outcomes are still better than dialysis that could be a worthwhile tradeoff.&lt;/p>
&lt;p>The second approach to growing real kidneys is to quite literally grow them in a lab using stem cells. This approach is still in its infancy and although &lt;a href="https://www.nature.com/articles/s41587-022-01429-5">there has been progress&lt;/a> I would not expect this to be available to patients for another couple decades at least. Ultimately this &lt;em>could&lt;/em> be the holy grail: a full human kidney, grown for little cost in a lab with customized antibodies to prevent rejection completely without the use of immunosuppressants. This is the approach that is furthest from being ready but it is the ideal and should be invested in far more than it is today. The science is still young and the hurdles to making this a reality are massive but it&amp;rsquo;s a moonshot that we should chase.&lt;/p>
&lt;h3 id="building-an-artificial-kidney">Building an Artificial Kidney &lt;a class="anchor" href="#building-an-artificial-kidney">
#
&lt;/a>&lt;/h3>&lt;p>The last approach, and the one I&amp;rsquo;m particularly excited about, similarly aims to solve the transplant supply issue while being financially cheaper than both transplanted kidneys and dialysis &lt;em>and&lt;/em> also being available far sooner than grown kidneys. The efforts to &lt;a href="https://pharm.ucsf.edu/kidney">design and build an artificial kidney&lt;/a> are being led by Dr. Shuvo Roy and William Fissell, MD at UCSF and Vanderbilt respectively. The idea is that when it comes to filtering the blood within the human body you don&amp;rsquo;t need a full biological kidney and a silicon-based implantable device can be manufactured for cheap and replace the need for human kidney donors.&lt;/p>
&lt;p>The device consists of two main parts: a hemofilter and biochamber which respectively work to separate toxins from the blood and produce urine just like a normal kidney would. The hemofilter is built around a semipermeable silicon wafer with slit-shaped pores just 7nm in width. When blood flows over this membrane it is partitioned at a molecular level as big protein molecules &amp;mdash; such as albumin &amp;mdash; cannot pass through the pores while water, salt, and small toxins can. Using &lt;a href="https://en.wikipedia.org/wiki/Photolithography#:~:text=Photolithography%20is%20a%20subclass%20of,magnetic%20fields%2C%20or%20scanning%20probes.">photolithography&lt;/a> and other techniques used in the manufacturing of computer chips it&amp;rsquo;s possible to design these semipermeable membranes with the precision and scale that&amp;rsquo;s required for this selective filtration.&lt;/p>
&lt;p>The albumin and other proteins that don&amp;rsquo;t pass through the membrane are immediately recycled back into the blood stream while the water, salt, and toxins dissolved in them are passed into the biochamber. The biochamber is the only part of the device containing biological material and consists of human renal tubular cells which are responsible for reabsorption of the salt and water. The cells transport these water and salt molecules to a separate channel where they are recycled back into the blood just like they do in a real kidney. This leaves only the toxins remaining where they condense as urine and are passed directly into the bladder.&lt;/p>
&lt;p>The beautiful part of this device is the lack of a power source. The internal blood pressure of a patient is enough to push blood through the device just like a regular kidney so no pump is needed which means this can be implanted in a human much easier than other solutions. The lack of dialysate also means there is no consumable element of this device so as long as the semipermeable membrane remains structurally sound and the renal cells remain alive this device can remain in the patient for the rest of their life.&lt;/p>
&lt;p>Further, because only the dissolved water, salt, and toxins are entering the biochamber the patient&amp;rsquo;s immune systems won&amp;rsquo;t even be aware of the presence of external cells. The only organic part of the device is completely separated from the rest of the blood by the silicon membrane. This would allow a patient to not only restore their kidney functionality but also keep their immune system intact.&lt;/p>
&lt;p>The challenges &amp;mdash; of which there are many &amp;mdash; come down to ensuring that no part of the device &amp;mdash; especially the semipermeable membrane &amp;mdash; form blood clots over time, culturing the renal cells, making sure they stay alive within the patient, and monitoring the performance of the device. The problem with silicon is that it&amp;rsquo;s naturally not very hemocompatible and blood clots will form on the membrane over time. To prevent this Dr. Roy and his team applied a polyethylene glycol (PEG) coating to the membrane which successfully prevented blood from clotting but was not durable over time longer time periods. PEG is aqueous so it&amp;rsquo;s not a great candidate for durability in the human body. More recently they experimented with polysulfobetaine methacrylate which showed extremely little erosion over time, is non-toxic, and prevented blood clotting even better than PEG. The existence of these coatings and the ability to find new, better coatings, will only improve and I&amp;rsquo;m confident that this part of the device is already at a stage where it can be commercialized.&lt;/p>
&lt;p>The bigger challenges surround the renal cells. For the renal cells to perform their task they need to be cultured to the point of &lt;a href="https://en.wikipedia.org/wiki/Cellular_differentiation">differentiation&lt;/a> which is where they express specific genes to perform the function they are designed for. Typically renal cells have been difficult to differentiate in a lab which means they would not actually perform their jobs of transporting the water and salt ions but Dr. Roy and his team have not only discovered how to do it effectively they&amp;rsquo;ve even tested these cells in a device implanted in a pig and they performed as expected. The key then is to ensure they can handle the throughput necessary for a human. In a real kidney these cells perform many functions beyond the reabsorption of salt and water but in this artificial device we only need that one function. By genetically engineering these cells to be more efficient at reabsorbing salt and water we can make them capable of handling human loads. Dr. Roy and his team are working to optimize that process now.&lt;/p>
&lt;p>And then in the end we need to monitor the device so that any loss of functionality or structural damage can be diagnosed and dealt with. Once a device is in a patient it will not be easy to inspect the device but low-powered onboard chips and sensors can be used to wirelessly transmit important diagnostics for monitoring. These chips would need to be powered by the human body as the device will not have a power source itself.&lt;/p>
&lt;p>Just about all of the remaining problems to overcome for this artificial kidney are engineering in nature and do not require a deep insight. I&amp;rsquo;m confident that with enough funding and time Dr. Roy and his team will be able to create a fully functioning form of this device at a scale for humans to use.&lt;/p>
&lt;h2 id="path-to-market">Path to Market &lt;a class="anchor" href="#path-to-market">
#
&lt;/a>&lt;/h2>&lt;p>I&amp;rsquo;m hopeful about the future of ESRD treatment because we are seeing a convergence of many different solutions all at once but also because the non-technological factors at play are coming together in a way that should make progress possible. For any of these treatments to reach real patients and make a dent on the problem they need to pass regulatory bodies and be financially viable for companies to both invest in and for patients to pay for. When it comes to solving the non-technological problems of reaching patients I believe an artificial kidney is best positioned to win and here&amp;rsquo;s why.&lt;/p>
&lt;h3 id="the-tech">The Tech &lt;a class="anchor" href="#the-tech">
#
&lt;/a>&lt;/h3>&lt;p>When it comes to the tech better dialysis is just that. Quite frankly better dialysis would be great but in comparison to fully restoring a patients functionality and reducing adverse outcomes, it&amp;rsquo;s sorely lacking.&lt;/p>
&lt;p>On the other hand growing real kidneys is extremely technologically advanced. Too much so. Growing a kidney custom for each patient so that the immune system fully accepts it is the holy grail but it&amp;rsquo;s still a question if that&amp;rsquo;s even possible or not. Either way, the tech for that is far out and unproven. Harvesting a kidney from an animal seems to work and is already being tried in real patients &amp;mdash; brain-dead patients but patients altogether &amp;mdash; but can be considered equal or worse than getting a human kidney transplant. You still need to suppress your immune system (even more so than for a regular transplant) but at least this option seems viable. If you do not care about the optics of having an animal&amp;rsquo;s organ in your body then getting a pig&amp;rsquo;s kidney could definitely be preferable over dialysis if those are the only two options.&lt;/p>
&lt;p>And then there&amp;rsquo;s an artificial kidney which wouldn&amp;rsquo;t require suppressing the immune system at all and could in theory last the entire lifetime of the patient. Even if it had a lifetime of 20 years that could still be a superior option to anything else. The technology here is has been tested in both dogs and pigs for varying periods up to 30 days and is simple which reduces costs and reduces the chance of something going wrong. Unlike better dialysis or kidney harvesting the technology here is superior but it&amp;rsquo;s also far more viable and mature than custom grown kidneys.&lt;/p>
&lt;p>The challenges remaining for the artificial kidney are almost fundamentally engineering in nature and not requiring immense scientific breakthroughs. Money can solve engineering problems but it can&amp;rsquo;t increase the speed at which new insights are attained. This bears well for the artificial kidney.&lt;/p>
&lt;h3 id="the-regulatory-environment">The Regulatory Environment &lt;a class="anchor" href="#the-regulatory-environment">
#
&lt;/a>&lt;/h3>&lt;p>The regulatory environment is also uniquely aligned to bring these new technologies to market. One of the big changes was President Trump signing &lt;a href="https://www.federalregister.gov/documents/2019/07/15/2019-15159/advancing-american-kidney-health">Executive Order 13879 on Advancing American Kidney Health&lt;/a> which explicitly aims to open the door towards tackling the kidney crisis. Among other initiatives to improve preventative care the Order explicitly calls for policy to &lt;strong>&amp;ldquo;increase patient choice through affordable alternative treatments for ESRD by encouraging higher value care, educating patients on treatment alternatives, and encouraging the development of artificial kidneys.&amp;quot;&lt;/strong>&lt;/p>
&lt;p>The Order goes on to explicitly call for regulatory bodies such as the FDA and Congress to increase their support and collaboration with the private sector to develop an artificial kidney.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Sec. 6&lt;/strong>. &lt;em>Encouraging the Development of an Artificial Kidney.&lt;/em> Within 120 days of the date of this order, in order to increase breakthrough technologies to provide patients suffering from kidney disease with better options for care than those that are currently available, the Secretary shall:&lt;/p>
&lt;p>(a) announce that the Department will consider requests for premarket approval of wearable or implantable artificial kidneys in order to encourage their development and to enhance cooperation between developers and the Food and Drug Administration; and&lt;/p>
&lt;p>(b) produce a strategy for encouraging innovation in new therapies through the Kidney Innovation Accelerator (KidneyX), a public-private partnership between the Department and the American Society of Nephrology.&lt;/p>
&lt;/blockquote>
&lt;p>Dr. Roy and his team has been awarded multiple prizes by KidneyX for their work on the artificial kidney and has been in contact with the FDA for years now, ironing out what it would take to get to clinical trials. The FDA granted Dr. Roy&amp;rsquo;s device &lt;a href="https://www.fda.gov/medical-devices/how-study-and-market-your-device/breakthrough-devices-program">Breakthrough Device&lt;/a> designation which speeds up the regulatory review process during premarket development and in discussions with Dr. Roy he&amp;rsquo;s described to me the criteria the FDA has laid out before they grant approval for clinical trials:&lt;/p>
&lt;ol>
&lt;li>The device must not produce blood clots&lt;/li>
&lt;li>The device must not activate the immune system&lt;/li>
&lt;li>The device must successfully produce urine.&lt;/li>
&lt;/ol>
&lt;p>If they device can be shown to fulfill all of the above for a duration of 30 continuous days in a pig without breaking and without any assistance from the pig&amp;rsquo;s natural kidneys then they will grant clinical trial approval.&lt;/p>
&lt;p>Because the components of the device have been developed in different stages each part of the criteria has been tested to varying degrees. Animal ethics boards will not allow you to test a full device for 30 days right out the gate so instead each experiment needs to be tested for 3 days, then 7 days, then 30 days. The semipermeable silicon membrane was developed first and has thus been tested for 30 days successfully. The biochamber was developed second and has been shown to not trigger the immune system for up to 7 days successfully. The last component of the biochamber which is the proper functionality of the renal cells to produce urine has been shown to successfully work for up to 3 days in a pig. The last few experiments for those components are in the process of happening as his lab waits for more funding. In the meantime they are working to improve the throughput of the device to meet the scale of a human body. &lt;strong>It&amp;rsquo;s very possible this device will enter clinical trials within a couple years.&lt;/strong>&lt;/p>
&lt;p>It&amp;rsquo;s so rare for medical devices and medical innovations with such a large potential impact on the world to have the bureaucratic machine removing roadblocks for it. This isn&amp;rsquo;t just limited to the work of Dr. Roy but it does inspire confidence that if this technology fails to reach the markets it won&amp;rsquo;t be because the FDA killed it prematurely.&lt;/p>
&lt;h3 id="financial-viability">Financial Viability &lt;a class="anchor" href="#financial-viability">
#
&lt;/a>&lt;/h3>&lt;p>The last component that determines whether a technology will reach the market is its financial viability. This includes both how much it&amp;rsquo;ll cost to develop it as well as how much it&amp;rsquo;ll cost to produce it once developed. I am less familiar with the financial environment for other branches of progress but I can talk about what it looks like for the artificial kidney and the market as a whole.&lt;/p>
&lt;p>Dr. Roy has been working on the artificial kidney for nearly two decades by relying exclusively on federal grants, private donors, and university funding. He believes today that he only needs $10m to achieve approval for clinical trials. To date his lab has raised around $13m over the past two decades. These are paltry numbers compared to the investments VC&amp;rsquo;s regularly pour into startups and the potential impact of such a device vastly outstrips the potential of said startups. This is also an order of magnitude cheaper than it would cost to develop the science to grow real kidneys in a lab. In terms of R&amp;amp;D the science around developing a silicon-based artificial kidney is far cheaper than the R&amp;amp;D for fully growing a kidney.&lt;/p>
&lt;p>Once it is developed Dr. Roy believes early versions of the artificial kidney will be comparable in price to normal transplants which puts it at around $200k but the ongoing lifetime cost of the device is far less than a transplant because the patient will not require expensive immunosuppressants. It&amp;rsquo;s not unreasonable to believe this price will go down as production of the device is scaled and I can envision a world where this price is driven down to be even cheaper than dialysis.&lt;/p>
&lt;p>The interesting wrench in the market around the device is who the buyer actually is. Namely, it&amp;rsquo;s not the patient who&amp;rsquo;s paying for the device and it&amp;rsquo;s not necessarily even their insurance. It&amp;rsquo;s Medicare. To understand how kidney treatment works today you need to go back to 1972 when Congress passed the &lt;a href="https://arc.net/l/quote/tfockhwf">Social Security Amendments&lt;/a> that guaranteed coverage for treatment of ESRD regardless of age effectively making Medicare the biggest customer in this market. This move was in large part due to the mistaken idea that dialysis was &amp;ldquo;the cure&amp;rdquo; and that by heavily subsidizing it the government could prevent a large chunk of the population from dying or being unproductive. Unfortunately now most dialysis patients still die and are not economically productive until that happens.&lt;/p>
&lt;p>Medicare pays for dialysis treatments after 3 months for anyone with ESRD, subsidizes kidney transplants, and pays for immune-suppressing drugs &lt;del>for 3 years&lt;/del> (EDIT: &lt;strong>Comprehensive Immunosuppressive Drug Coverage for Kidney Transplant Patients Act&lt;/strong> passed in 2020 extends coverage to the lifetime of the patient) post surgery even if they are under the age of 65. In 2019 Medicare spent nearly &lt;a href="https://www.cdc.gov/kidneydisease/basics.html#:~:text=Total%20Medicare%20fee%2Dfor%2Dservice,the%20Medicare%20paid%20claims%20costs.">$90,000 per patient&lt;/a> with ESRD totaling $37 billion in costs. These patients make up 1% of the Medicare beneficiaries but account for 7% of total Medicare costs. The cost per patient living with a kidney transplant averages $30,000 per year just to pay for their immune drugs. These staggering costs is a large reason why the government is actively trying to encourage better solutions to the kidney crisis and Dr. Roy&amp;rsquo;s team, in conjunction with a medical economist, concluded that even conservative estimates show their artificial kidney would save Medicare $10 billion annually.&lt;/p>
&lt;p>This subsidization by Medicare screws up the incentives for any product or service trying to enter the market. Insurance companies do not feel the need to find or fund a solution because once a patient reaches ESRD they can pawn them off to the government and the pharmaceutical companies are happy to sell the immunosuppressants no matter who is buying. Any solution that aims to reach the market needs to get the stamp of approval from Medicare so that it can be reimbursed or payed for by the government just like dialysis is so Dr. Roy has tried to get this approval ahead of time but their answer is clear: they want a better solution and are open to changing the rules around what&amp;rsquo;s covered but they need to see clinical approval first. So for now, it&amp;rsquo;s all about developing the device further to get it tested in real patients.&lt;/p>
&lt;h2 id="looking-forward">Looking Forward &lt;a class="anchor" href="#looking-forward">
#
&lt;/a>&lt;/h2>&lt;p>The kidney crisis is a problem that threatens the health of the nation. It drains our Medicare system of its funds, it takes hundreds of thousands (and soon millions) of people out of work, and leaves our country weaker. When speaking to Dr. Roy it&amp;rsquo;s obvious that he&amp;rsquo;s passionate about this problem and his team has been making incredible progress the past two decades. Besides him there are incredible researchers and doctors working around the world to materialize a revolution in kidney treatment with many of them showing promise. I personally believe an artificial kidney such as the one that Dr. Roy is designing offers the best potential outcomes with the most achievable hurdles to overcome. I&amp;rsquo;m hopeful that in my lifetime (and hopefully quite soon!) we can see the kidney crisis become a thing of the past and I hope if I ever find myself in need of another kidney to complement the one I have that I can reach for a solution that gets me back to full health without compromises.&lt;/p></description></item><item><title>Goals for 2024</title><link>https://olivergilan.com/blog/goals-for-2024/</link><pubDate>Sat, 09 Dec 2023 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/goals-for-2024/</guid><description>&lt;p>A year ago I &lt;a href="https://olivergilan.com/blog/goals-for-2023/">wrote down my goals&lt;/a> that I hoped to accomplish during 2023 and now is the right time to take stock on what happened this year, how I did against those stated goals, and what I&amp;rsquo;m looking forward to in this coming year.&lt;/p>
&lt;p>I categorized my various goals into career, health, adventure, and mind. When it comes to my career I redacted most of the goals but the few I wrote down I did not achieve. I did not get super into LLMs and I can&amp;rsquo;t really bring myself to get excited about the AI hype-train. I simultaneously did not take part in interviewing at all but I do think my work had a sizable impact and I&amp;rsquo;m proud of what I accomplished here. There is still a lot more to do but I believe I made the most of the opportunities I was given and delivered on the promises I made.&lt;/p>
&lt;p>Jumping to my goals around adventure I definitely fulfilled those:&lt;/p>
&lt;ul>
&lt;li>Live in San Francisco for a month and work out of Census HQ&lt;/li>
&lt;li>Travel alone to a country that speaks a foreign language&lt;/li>
&lt;li>2-day motorcycle trip across the Moroccan desert&lt;/li>
&lt;li>Wild card adventure&lt;/li>
&lt;/ul>
&lt;p>I traveled alone to Brazil last Christmas and stayed there for all of January, living for a bit in Porto Alegre and then in Rio, where I made friends, learned Portuguese, and worked remotely. That was fun and rewarding and it helped me regain some of the confidence in myself that I&amp;rsquo;d lost. I did not do the 2-day motorcycle trip but I did move to SF in October and now I&amp;rsquo;m living here and working out of the Census office and it&amp;rsquo;s been great so far. I&amp;rsquo;ve been meeting new people, making new friends, bought a motorcycle, and overall been really enjoying living in a new city for the first time in my life. I also traveled to Portugal with some college friends in the Summer and traveled around the entire country from Lisbon to Albufeira to Porto. We befriended a couple Dutch travelers, a Ukrainian refugee, and some Portuguese locals to make for an exciting experience. I&amp;rsquo;m more than satisfied with the adventures I&amp;rsquo;ve partaken in this year.&lt;/p>
&lt;p>My goals around my mind focused on my communication and more specifically:&lt;/p>
&lt;ul>
&lt;li>Post at least once a month on this blog&lt;/li>
&lt;li>Share my writing more publicly&lt;/li>
&lt;li>Add a blogroll of other independent blogs I am inspired by&lt;/li>
&lt;li>Write some non-technical posts about topics such as education, my illness, etc.&lt;/li>
&lt;/ul>
&lt;p>I did not post once a month but I&amp;rsquo;m happy with how much I&amp;rsquo;ve written. I released 10 posts this year and I have at least one more (maybe two) to come before the end of the year. Ultimately the quantity is less important than the quality with writing and I do believe the quality of my writing is improving while also engaging with more interesting topics. I wrote more non-technical posts such as my experiences &lt;a href="https://olivergilan.com/blog/living-with-buggy-hardware/">developing then living with an autoimmune problem&lt;/a>, my &lt;a href="https://olivergilan.com/blog/i-moved-to-sf/">move to SF&lt;/a>, my growing appreciation for the &lt;a href="https://olivergilan.com/blog/changing-of-the-seasons/">changing seasons&lt;/a> (something I don&amp;rsquo;t really get in SF), and why &lt;a href="https://olivergilan.com/blog/believing-is-the-difference/">believing can be the difference&lt;/a> between succeeding and failing. I also wrote some more technical posts about career and tech including the &lt;a href="https://olivergilan.com/blog/software-crisis/">Software Crisis&lt;/a>, the &lt;a href="https://olivergilan.com/blog/6-questions/">6 questions&lt;/a> that I regularly think about and would love to see answered/solved in my lifetime, the importance of &lt;a href="https://olivergilan.com/blog/thinking-short-and-long/">thinking short and long&lt;/a>, and what the &lt;a href="https://olivergilan.com/blog/what-the-nfl-taught-me-about-business/">NFL taught me about business&lt;/a>.&lt;/p>
&lt;p>I did not really share my writing more publicly and I&amp;rsquo;m still quite embarassed when I learn that people I know in real life read my blog but more people in my life have definitely been reading it and I&amp;rsquo;ve even gained some job opportunities from this blog in the past year. I&amp;rsquo;ve also expanded the site to include a blogroll as well as a reading list of books I find valuable and I hope to continue expanding it to include more things beyond just blog posts/essays.&lt;/p>
&lt;p>So for all of those above goals I&amp;rsquo;m pretty happy with their outcomes but my greatest frustrations and failures surround my goals for my health:&lt;/p>
&lt;ul>
&lt;li>Weigh 155 lbs by EOY&lt;/li>
&lt;li>Run 10 miles at a pace of 8 minutes a mile&lt;/li>
&lt;li>Be capable of performing a split&lt;/li>
&lt;li>Perform reps on the ab wheel from a standing position&lt;/li>
&lt;/ul>
&lt;p>The only somewhat success I had here was around running. Near the end of this Spring I canceled my gym membership and just began running and doing calisthenics and it was a phenomenal decision. Leaving the office at 5pm and having the beautiful summer New York weather did not inspire strong workouts indoors under fluorescent lights so instead I spent that time running and exercising outside which gave me an opportunity to start running seriously. Up to that point I&amp;rsquo;d run 6 miles once in my life and my average run was around 2 to 3 miles. A couple months later on September 11 I ran 10 miles for the first time in my life with an average pace of 8:41/mi. Over the next two weeks I ran 10 miles two more times at paces of 8:54/mi and 9:04/mi. Then last month I ran 11 miles at 8:48/mi. My aerobic endurance is higher than its ever been and I can comfortably run 4 miles on my worst days when I&amp;rsquo;ve had shitty sleep, no food, and feeling weak. At this point my average run is about 5-6 miles and I&amp;rsquo;m working on improving my speed. At the start of this month I ran 5 miles at 7:58/mi. I am happy with my progress towards this goal but I could have gone even further. Recently I&amp;rsquo;ve started lifting again 2 days a week and I can immediately notice that slowing me down and making it harder to push the distances but it&amp;rsquo;s worth it as the weather becomes colder again. I have no desire to push the distance beyond 10 miles in any material way mostly because 1) it takes a long time and it&amp;rsquo;s hard to regularly find multiple hours to dedicate just to a single run and 2) aerobic endurance is just one component of my overall fitness and I don&amp;rsquo;t want to maximize that at the expense of everything else. In my opinion you see dramatically diminishing returns to increasing distance beyond 10 miles. So for now I&amp;rsquo;m focusing on keeping my average run length at around 6 miles with occasional 10 milers and pushing the speed.&lt;/p>
&lt;p>Apart from that I failed at all my other health goals. I didn&amp;rsquo;t even work on doing a split and performing a rep from the ab wheel in a standing position so those were failures but the worst failure is around my bodyweight. I do not currently weight 155lbs and I instead weigh 145lbs &amp;mdash; the same weight as when I started the year. I did gain weight this year reaching 149lbs on two different occasions but proceeded to lose the weight every time due to traveling, moving, and other general stressors. I&amp;rsquo;m now unhappily plateaued at the same weight as when I started and I consider this an utter failure. Ironically enough the part of the year I saw the most success in gaining weight were the summer months when I was running consistently and doing calisthenics.&lt;/p>
&lt;p>The biggest bottleneck around my weight as well as my general happiness and ability to achieve the rest of my goals is the allergies to dairy and gluten that I developed three years ago. These allergies are highly problematic because they severely limit my access to otherwise healthy calories and nutrients that my body could use (basically all the calories and nutrition from most salads come from their cheese components). High quality dairies and glutens contain critical nutrients for overall health and are often far healthier than modern alternatives like fake butters and other processed foods that are chock full of vegetable oils. Currently if I eat these foods, however, I will experience severe inflammation, bloating, a weakened immune system, and excess fatigue. The inflammation in my gut will prevent efficient metabolization of the other foods I eat and will make my various tendons and joints more susceptible to injuries while exercising. My energy levels will drop, the pain will cause brain fog, and ultimately I will find myself sleeping for longer periods so I can recover. I &lt;a href="https://olivergilan.com/blog/living-with-buggy-hardware/">wrote&lt;/a> about my experience when these allergies first developed and how physically and mentally painful and exhausting it was to constantly have my body attacking itself due to gluten. I was in constant pain, lost a ton of weight, and became a shell of myself. I simply cannot go back to that.&lt;/p>
&lt;p>It is because of these restrictions that my diet is actually the most important piece of all my goals. The allergies force me to spend a lot of cognitive and physical energy maintaining this part of my routine and the consequences of failing here disrupts every other area of my life. Because of these restrictions I cook basically all of my meals which simply adds up to a lot of &lt;em>time.&lt;/em> Buying groceries, preparing, cooking, then cleaning, then repeating that 3 times every day can quickly accumulate to many hours each week. At least once or twice a day I have to context switch from whatever I&amp;rsquo;m doing to think about what groceries I have and what I need to buy, what meals I can make with the supplies I have, what the timing will be for when I&amp;rsquo;m home and can start cooking, etc. Then I have to spend the time actually cooking and cleaning and I have to do this every&amp;hellip; single&amp;hellip; day. It&amp;rsquo;s mentally and physically draining and it takes up far too much time that I could spend working towards my other goals. And most frustratingly is that none of this work compounds. Every single day my caloric situation resets to zero and I have to start the whole process of getting enough calories from scratch. It&amp;rsquo;s a persistent and daily tax on my productivity.&lt;/p>
&lt;p>These dietary allergies also make it almost impossible to rely on getting an easy bite to eat when out and about. While it may not be the healthiest option if you find yourself out late with friends or at the office it&amp;rsquo;s normally trivial to grab a slice of pizza or a burger. Sure maybe you eat unhealthily for one meal but then you can still sleep at night and have the energy to recover and exercise and get back on your routine the next day. If I find myself in that situation I can either eat a food that will act like poison, go hungry and have a tough time sleeping, or wait until I&amp;rsquo;m home and make some food quickly which may disrupt my sleep schedule but at least I get the nutrients I need (if I happen to have any ingredients in my fridge). Basically in every case I lose weight or mess up my routine because the inflammation of eating gluten destroys my appetite and not eating means I don&amp;rsquo;t get the calories I need and not getting enough sleep means I have to skip a workout the next morning. I constantly have anxiety around being spontaneous and social because of worries around finding food and it forces me to play it safe and reduce my surface area of luck more than I&amp;rsquo;d like. &lt;strong>Reducing this dietary burden is one of the highest leverage problems I can solve to free up my time and enable me to achieve my health, career, and personal goals.&lt;/strong>&lt;/p>
&lt;p>Meal prep can help reduce this burden but it&amp;rsquo;s not without its problems. For starters I cannot travel with a week&amp;rsquo;s worth of meal prep so any time I want to go on a week-long trip I&amp;rsquo;m either confined to getting a place with a proper kitchen (hotels never do and AirBnB&amp;rsquo;s are hit-or-miss) and buying a bunch of groceries or operating on a caloric deficit for the week. That&amp;rsquo;s partially why it&amp;rsquo;s so important for me to gain weight: if I weighed 155-160 lbs with 3-4% &lt;em>more&lt;/em> body fat than I have now then I could more easily handle those weeks of traveling on a caloric deficit. As it stands now I have basically no buffer room with my body weight. Secondly, meal prepping isn&amp;rsquo;t easy! I still need to spend a bunch of time figuring out &lt;em>what&lt;/em> to make and then buying groceries and doing the bulk cooking. I should be able to do this but it takes discipline so that I do not miss the day I&amp;rsquo;m supposed to do the cooking. It also lends itself to eating the same thing every day which is not the worst thing &amp;mdash; better to eat the same healthy foods every day than varied unhealthy foods &amp;mdash; but eating an unvaried diet can make you more susceptible to developing food allergies and I suspect that&amp;rsquo;s at least partially the cause of me developing allergies to dairy and gluten. If I lose another food group it&amp;rsquo;s over for my ass. But these roadblocks are surmountable. I need to figure out what a somewhat varied meal plan is that I can make in bulk at the start of the week and just pull from that throughout the week. I&amp;rsquo;ll still have to spend time reheating and cleaning for every meal but in a pinch I can rely on a microwave and eat right out of the tupperware. It&amp;rsquo;s definitely an improvement over cooking every meal from scratch and I&amp;rsquo;ve had a lot of success with it in the past I just haven&amp;rsquo;t developed a proper routine for it since moving to SF.&lt;/p>
&lt;p>There&amp;rsquo;s another solution besides meal prepping and that&amp;rsquo;s simply to cure my allergies altogether. When it comes to my goals for 2024 this is the only one that really matters to me. &lt;strong>By the end of 2024 I must be able to eat gluten and dairy again without any adverse reactions.&lt;/strong> I need to dedicate serious time to figuring out how to make that happen and I&amp;rsquo;m willing to forego a lot to accomplish such a feat. I firmly believe curing these allergies is possible and I have the inklings of a plan for how to do it but I need to sit down and make the plan concrete. It&amp;rsquo;s gotten to the point where I feel significantly hindered in my other pursuits because of these dietary problems and I&amp;rsquo;m willing to make a big sacrifice to get back to where I am. I&amp;rsquo;ll give up my net worth, my job, and all my other goals for the year if it means I can get back to a fully healthy and functioning body. As long as I have my health I can get back to where I am with ease. I have some other goals besides this but they&amp;rsquo;re all secondary.&lt;/p>
&lt;p>You can sum up my goals for 2024 as:&lt;/p>
&lt;ul>
&lt;li>Cure my dietary allergies&lt;/li>
&lt;li>Run 10 miles @ 8:00/mi&lt;/li>
&lt;li>Weigh 155 lbs by EOY&lt;/li>
&lt;li>Find a wife&lt;/li>
&lt;/ul></description></item><item><title>What the NFL Taught Me About Business</title><link>https://olivergilan.com/blog/what-the-nfl-taught-me-about-business/</link><pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/what-the-nfl-taught-me-about-business/</guid><description>&lt;p>Each year 224 collegiate football players are drafted into the NFL across seven rounds. After the draft is over teams will sign undrafted players as free agents and currently the league is comprised of about 30% undrafted players with &lt;a href="https://www.profootballhof.com/news/2005/01/news-undrafted-hofers/">15 of them&lt;/a> having been inducted into the Hall of Fame. Of the 224 players that are drafted only about the first 10 are expected to be impactful enough to change the direction of a franchise. The first 32-64 players are expected to be good enough to play meaningful snaps (a unit of play) during their first two seasons. The rest are basically a tossup for if they even play a snap in the NFL and how their careers turn out. I can take 3 useful lessons from the NFL Draft that apply to business and life in general:&lt;/p>
&lt;ol>
&lt;li>Talent is not evenly distributed&lt;/li>
&lt;li>Talent is hard to measure&lt;/li>
&lt;li>True outliers are scarce&lt;/li>
&lt;/ol>
&lt;p>Ive learned these lessons and others from watching and loving the NFL but over the years I&amp;rsquo;ve begun to understand how they apply to other areas of life. So how does the NFL apply to business and startups? What can we learn just from the nature of the Draft and the composition of the league? Let&amp;rsquo;s start with those three lessons of the draft.&lt;/p>
&lt;h2 id="understanding-talent">Understanding Talent &lt;a class="anchor" href="#understanding-talent">
#
&lt;/a>&lt;/h2>&lt;h4 id="lesson-1-talent-isnt-evenly-distributed">Lesson 1: Talent Isn&amp;rsquo;t Evenly Distributed&lt;/h4>&lt;p>In the world of programming there&amp;rsquo;s the concept of a 10x programmer which is someone who is 10 times more productive than the average programmer. This idea gets a lot of &lt;a href="https://payne.org/blog/the-myth-of-the-myth-of-the-10x-programmer/">pushback&lt;/a> in engineering circles with many claiming such a person doesn&amp;rsquo;t exist or isn&amp;rsquo;t even &lt;em>possible&lt;/em> but we can see in the NFL and in every other skilled endeavor that talent clearly isn&amp;rsquo;t evenly distributed. What&amp;rsquo;s so remarkable about the Draft is the stark divide even amongst the best of the best. The average college football player is easily 10x more athletic than a normal person and yet the ones drafted are 10x better than the average college player and then even amongst the pros at the top of their game the divide between them and a Top 10 Draft pick can be 10x or more. A player like &lt;a href="https://www.pro-football-reference.com/players/B/BosaNi00.htm">Nick Bosa&lt;/a> drafted 2nd in 2019 has recorded 15x as many sacks and 5x as many tackles as &lt;a href="https://www.pro-football-reference.com/players/C/CollLJ00.htm">L.J. Collier&lt;/a> &amp;mdash; another player drafted in the same position on the same year but 27 picks later. If Collier is a 10x football player (and being drafted in the first round means he is) then Bosa is a 100x player. The 10x programmer is absolutely real and so is the &lt;a href="https://twitter.com/dhh/status/1718347850361589947">100x programmer&lt;/a> we just don&amp;rsquo;t have good stats to measure what that means.&lt;/p>
&lt;h4 id="lesson-2-talent-is-hard-to-measure">Lesson 2: Talent Is Hard To Measure&lt;/h4>&lt;p>Talent is easy to identify and hard to measure. For the best of the best talent can jump off the page at a young age and it&amp;rsquo;s often easy to see if someone has potential but it can be a lot harder to determine how &lt;em>much&lt;/em> potential someone might have. That 30% of the NFL is made up of undrafted players and that year after year we see undrafted or late Draft picks break out as stars shows just how difficult it is to evaluate talent. Tom Brady was the 199th pick in his draft and went on to become the best football player of all time. In business and especially programming the domain is so varied and the intangibles required by practitioners so great I would argue it&amp;rsquo;s a lot harder to accurately measure talent than it is in the NFL. The average hiring process for companies is probably better than random but I&amp;rsquo;m not sure it&amp;rsquo;s by that much. If you’re lucky enough to have a 10x engineer walk into your hiring pipeline it &lt;em>might&lt;/em> be obvious that they&amp;rsquo;re great but what about disambiguating everyone else? The candidates that might be a 1.5x or 2x engineer or 0.8x engineer? Good luck figuring that out. It&amp;rsquo;s easy to want to hire the best but chances are you don&amp;rsquo;t know who they are.&lt;/p>
&lt;h4 id="lesson-3-greatness-is-rare">Lesson 3: Greatness is Rare&lt;/h4>&lt;p>A great player can change the outcomes of games and even seasons. Great quarterbacks can change the outcomes of franchises. When Nick Bosa is injured or not playing the defense of the San Francisco 49ers is noticeably worse and when a star quarterback like Aaron Rodgers tears his achilles tendon it usually means the end of the season for the team. These players dominate the game but they are &lt;em>rare&lt;/em> and we are lucky if we get one or two new ones each year. It&amp;rsquo;s generally expected that the first 10 players in the Draft are the only ones with even the potential to be so good. Anyone who’s been responsible for hiring engineers at a company will have the same stories about the quality of their candidates: piles of candidates that struggle to code at all or cannot partake in even a modicum of social collaboration. Forget 10x engineers, finding someone even a little above average can be an extreme challenge. So ask yourself: why would a truly 10x engineer want to work for you? Why would they dedicate their time and efforts to your mission? The vast majority of companies — even with a ton of growth potential and value for the world — are not sexy or interesting. Payroll for construction isn’t captivating in the same way a space company might be even if its arguably more beneficial for the average person. So do not be surprised if you don’t get any 10x candidates especially when your ability to compensate them with competitive equity goes down after each successive hire. &lt;strong>10x engineers exist you just can’t hire them.&lt;/strong>&lt;/p>
&lt;h2 id="how-to-win-without-the-best">How to Win Without the Best &lt;a class="anchor" href="#how-to-win-without-the-best">
#
&lt;/a>&lt;/h2>&lt;p>If the NFL is any indication you don’t need a team of entirely A+ players to win. One of my favorite teams in the NFL was the New England Patriots with Tom Brady and for two decades they would enter the season with a team chock-full of B players and dominate the league. Over 20 years that team won six Super Bowls, nine AFC titles, and 17 division titles. They also had 19 consecutive winning seasons and nine straight AFC Championship appearances making them the most prolific team in football history. If they were a startup they would have been beyond a unicorn and one of the most successful companies of all time. So how did they do it? How did they routinely face teams with more talent and come out on top again and again?&lt;/p>
&lt;p>It all comes down to building a great system. The Patriots faced many young, talented teams but such teams often had big personalities, big egos, and relied on their star players to execute in order to win. The Patriots on the other hand relied on a &lt;em>system&lt;/em> that they had crafted and perfected over the years and this system enabled them to plug-in different players into different positions from game to game and season to season. The effect of this was resilience in the face of injuries, consistency across seasons with massive changes to the roster, and accumulated process knowledge. Cedric Chin at &lt;a href="https://commoncog.com/">Commoncog&lt;/a> notes that such systems can be extremely effective in business although often at the &lt;a href="https://commoncog.com/deming-paradox-operational-rigour/">expense of the enjoyment of its participants&lt;/a>. Similarly the Patriots were known to be a grueling team to work for but the results were undeniable. When you have a competent system B and C players can produce at the level of A and B players &amp;mdash; and A players can become stars.&lt;/p>
&lt;p>But &amp;ldquo;build a great system&amp;rdquo; isn&amp;rsquo;t much more actionable than &amp;ldquo;hire the best people&amp;rdquo; so how do you actually execute on that? There&amp;rsquo;s 3 characteristics/lessons of the Patriots system that I think apply well to business.&lt;/p>
&lt;h4 id="lesson-4-do-your-job">Lesson 4: Do Your Job&lt;/h4>&lt;p>One of the defining mottos of the Patriots and why they were so successful was the &lt;em>Do Your Job&lt;/em> mentality. When teams rely on star power and raw talent it places pressures on individuals to overextend themselves and try to do too much. The Patriots made sure individuals knew their sole responsibility at any given time and then pushed them to focus just on that. If you do your part and the man beside you does his then the overall picture will come into focus. Just as in business one man cannot do it all but if you can focus on just one task then your teammates can learn to trust you to get your job done which allows them to focus just on theirs and then the whole team begins performing optimally. Peter Thiel takes this to the extreme by making sure everyone he manages only focuses on one thing:&lt;/p>
&lt;div class="quote-block">
&lt;div class="quote-block-inner">
&lt;blockquote>
&lt;p>The best thing I did as a manager at PayPal was to make every person in the company responsible for doing just one thing. Every employee’s one thing was unique, and everyone knew I would evaluate him only on that one thing.&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;div class="quote-block-attribution">
&lt;p class="quote-author">
Peter Thiel
&lt;/p>
&lt;a href="https://www.goodreads.com/work/quotes/25332940" class="quote-link">
Zero to One: Notes on Start Ups, or How to Build the Future
&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>By focusing on one thing you free people from the cognitive overhead of figuring out what to work on, you enable them to hyper-specialize and become one of the best at what they do, it becomes easier to evaluate their performance, and ambiguity around responsibility is reduced. Single responsibility allows B players to contribute meaningfully to a project often without slowing those around them and sometimes even performing at or above the level that a competitor&amp;rsquo;s A player is performing because said competitor&amp;rsquo;s attention is divided amongst multiple tasks.&lt;/p>
&lt;h4 id="lesson-5-outwork-your-competition">Lesson 5: Outwork Your Competition&lt;/h4>&lt;p>The Patriots were known as a grueling team to play for and churn was high. Often-times veteran players would choose to play for the team for a year or two and take less money than they otherwise could get because the promise of greatness made it worth it. Win or lose, the Patriots consistently worked harder than most other teams in the NFL. Business is no different. Intelligent people often underestimate how sheer grinding can overcome differences in ability and talent. This is doubly true for people early in their career. It&amp;rsquo;s remarkably obvious how much room I have to grow as an engineer whenever I work with a true 10x engineer and yet I can hold my own against these more experienced counterparts because I will simply put in more hours. I have less responsibility and more time and I can use that time to overcome the inefficiencies of inexperience. So if your team isn&amp;rsquo;t all A+ players and you still want to win you should be prepared to work harder than everyone else and if your team &lt;em>is&lt;/em> all A+ players and you don&amp;rsquo;t want someone else to eat your lunch you should also work harder than everyone else. Working hard won&amp;rsquo;t guarantee success but it does certainly feel like a prerequisite both in football and business.&lt;/p>
&lt;h4 id="lesson-6-sweat-the-details">Lesson 6: Sweat the Details&lt;/h4>&lt;p>When everyone focuses on a single responsibility and everyone is working harder than the competition it unlocks a third characteristic of successful systems &amp;mdash; one that showed up again and again across the Patriot&amp;rsquo;s dynasty: sweating the details. There is no better example of this than the &lt;a href="https://www.youtube.com/watch?v=U7rPIg7ZNQ8">defining moment&lt;/a> of SuperBowl 49 and the &lt;a href="https://youtu.be/_aaYTbaOCDY?si=V9Q127wPjK0a4NQf&amp;amp;t=2129">practice leading up to that moment&lt;/a>. The Patriots were the most detail-oriented team in the NFL year after year and sometimes in a game of inches that isn&amp;rsquo;t enough to win but after two decades those inches begin to stack up and you&amp;rsquo;re left with a track record that blows everyone out of the water. This matters in business. The best products and the best companies are those where the details are cared for. This can only happen when people feel empowered over their small domain &amp;mdash; another thing that you get with the single-responsibility principle &amp;mdash; and when there&amp;rsquo;s a culture of excellence. You must be dedicated to the craft and willing to invest time and energy to fix the little things even if they don&amp;rsquo;t immediately translate to a metric improving.&lt;/p>
&lt;p>Sweating the details is probably one of the rarest elements of businesses today and I can almost guarantee that any company at scale is &lt;em>not&lt;/em> doing this which makes it one of the best ways for a startup to compete with incumbents. Over the lifetime of a company sweating the details will lead to loyal customers, a superior product, and superior execution. At the limit the details can even be a moat. Apple won not because its devices had better technical specs than those of competitors &amp;mdash; in many cases they were worse &amp;mdash; but because they offered fully polished experiences. My favorite app to use today is &lt;a href="https://linear.app/">Linear&lt;/a> (who&amp;rsquo;s crushing it by the way) and it&amp;rsquo;s not because they offer anything fundamentally unique compared to its competitors. On paper it has basically no differentiators and yet they sweat the details: the keyboard shortcuts for every action, the responsiveness of the UI, intelligent placement of elements in the design, etc. all combine to provide an experience that its competitors do not.&lt;/p>
&lt;h2 id="how-to-build-your-team">How to Build Your Team &lt;a class="anchor" href="#how-to-build-your-team">
#
&lt;/a>&lt;/h2>&lt;p>If your system allows for singular responsibility, contains people working harder than your competitors, and encourages attention to detail then it&amp;rsquo;ll be a winning system. This does not mean however that you can win with just anyone. My problem with the advice &amp;ldquo;just hire the best&amp;rdquo; isn&amp;rsquo;t that it&amp;rsquo;s untrue it&amp;rsquo;s just not very actionable. A good system lets you win with less than the best but you still need to compose your team properly. So if you still need good people and the above is all true about talent being scarce then how do you actually build your team? Once again there are a couple principles from the NFL and the Patriots dynasty that I believe applies well to business.&lt;/p>
&lt;h4 id="lesson-7-embrace-superstars">Lesson 7: Embrace Superstars&lt;/h4>&lt;p>Often times strategists and leaders fall in love with a system and then they make the critical mistake of thinking they can win with anyone. This can lead to the conscious or unconscious exclusion of superstars from the team because superstars are often destabilizing in nature due to their overwhelming presence and talent. A good system should take this into account and create an environment where superstars can thrive. Randy Moss was one of the best wide receivers of his generation with a &lt;a href="https://bleacherreport.com/articles/1500178-randy-moss-character-issues-prevent-him-from-being-the-best-reciever-ever">penchant for trouble&lt;/a> and a disregard for authority. By all accounts he was not a great fit for the rigid and strict Patriots team but during his tenure on the team from 2007-2010 his effect was undeniable. What was normally a good team became an unfair team and his first year there the Patriots won every single game of the season and is widely considered to be one of the best teams to ever play in a single season.&lt;/p>
&lt;p>Whenever you come across a Randy Moss &amp;mdash; a 10x player among 10x players &amp;mdash; you hire them and you find a way for them to be valuable. System believers often adhere to the rules a little too much and expect the same adherence from their superstars that they expect from everyone else. &amp;ldquo;If I let you do X then I&amp;rsquo;ll have to let everyone else do X&amp;rdquo; is a common refrain that is simply wrong. Real superstars aren&amp;rsquo;t the same as everyone else and if you need to bend the rules to keep them happy then bend the rules. Embrace superstars, remove anything that stops them from making an impact, and then let them do their thing.&lt;/p>
&lt;h4 id="lesson-8-leaders-are-irreplaceable">Lesson 8: Leaders Are Irreplaceable&lt;/h4>&lt;p>This rule is not one I always understood but it became undeniable after the Patriots dynasty ended. It didn&amp;rsquo;t end because they lost all their defensive players or all their receivers or all their linemen &amp;mdash; they&amp;rsquo;ve faced and overcome all those hurdles &amp;mdash; but because one player left: Tom Brady. When Brady left after a personal rift between himself and the coach, Bill Belichick, the dynasty was over. It turns out that the rigorous and efficient &lt;em>Patriot Way&lt;/em> doesn&amp;rsquo;t work after losing just a single key leader and today the team is a shell of its former self. A similar dynasty in the NBA is the San Antonio Spurs under head coach Gregg Popovich and star player Tim Duncan. For a decade they dominated the league with a strong system and focus on teamwork but it all sort of fell apart the moment Duncan retired. Similarly we see incredible businesses with a total understanding of their market and a bright path forward suddenly stagnate and collapse when a star CEO or executive leaves. All these instances have led me to understand that systems are valuable but capable leaders are irreplaceable. &lt;strong>The leaders &lt;em>are&lt;/em> the system.&lt;/strong>&lt;/p>
&lt;p>If anything this lesson should help reconcile what I said before with traditional startup advice. It &lt;em>is&lt;/em> genuinely so important to hire A players early on in the life of a company because the people you hire early will grow into leadership roles and thus they will dictate what the system looks like in your company. In a traditional B2B SaaS basically everyone should be an A player at the Series A. By Series B you can probably introduce a couple of capable B players that demonstrate an ability to learn and grow and then by Series C you will have to probably introduce around 20% B players but you can probably avoid C players. These numbers are meant to be more directionally relevant as opposed to exact descriptions. The overall truth is that the average caliber of employee will &lt;em>have&lt;/em> to go down as your team size increases but by the time you get to Series C you should have a strong cultural system driven by great leaders that allow those lower performers to bat above their weight.&lt;/p>
&lt;p>I should briefly note that leadership can be explicit or implicit. Early employees will always influence the culture and system in place even if not formally promoted into leadership positions. Just the deep knowledge of a system can be enough to make an IC a leader and there are very interesting human dynamics that will inevitably form around implicit hierarchies such as these. Do not assume that you can just hire an IC early on with little impact to the overall culture of the company.&lt;/p>
&lt;h4 id="lesson-9-help-people-grow">Lesson 9: Help People Grow&lt;/h4>&lt;p>If you want B and C players to perform better than they otherwise could and if you want your early employees to grow into the competent leadership your company will need then your system and culture will &lt;em>need&lt;/em> to help people grow. The Patriots didn&amp;rsquo;t just draft and sign the best players they focused on players that could learn and then they taught them how to succeed. Year after year they had one of the best offensive line units in the league and it was mostly due to coaching. Their Offensive Line coach, &lt;a href="https://en.wikipedia.org/wiki/Dante_Scarnecchia">Dante Scarnecchia&lt;/a>, grew up around football and coached on the Patriots for 34 years! He was extremely experienced not just about football but also about teaching and the results of his coaching showed up on the field every year.&lt;/p>
&lt;p>It&amp;rsquo;s undeniable that great coaches and teachers in any field can make an incredible difference in the performance of their students and business is no different. The single-responsibility principal makes it easy to keep people in a box performing the same work that they&amp;rsquo;ve mastered over and over but talented people in such positions will grow bored and leave. If someone is capable of mastering a given domain there&amp;rsquo;s a good chance they can master the next, harder, domain as well. You should identify people&amp;rsquo;s strengths and their propensity to learn and grow and then do your best to keep giving them new challenges and responsibilities at a rate that lines up with their zone of proximal development. This rate will be different for everyone but successfully understanding and taking advantage of this as a boss is probably the best way to keep smart employees engaged on the mission while growing their abilities.&lt;/p>
&lt;p>Companies that rely on college and university to do the teaching for their future employees will be at a sore disadvantage to the company that hires people with talent and ambition and then follows up by giving them the tools and mentorship required to make them succeed. As a leader you should absolutely be focusing on your company&amp;rsquo;s onboarding process, your company&amp;rsquo;s knowledge distribution process, your employees' rate of growth, and anything else that can dictate or explain how a given employee may grow over time. If you&amp;rsquo;re an ambitious young person chase great leadership over maximizing salary early in your career. Great leadership that can make you great is rare and consequently if you&amp;rsquo;re one of those great leaders that can significantly increase the abilities of others then that&amp;rsquo;s one of your best assets for competing against FAANG companies offering higher salaries than you can afford.&lt;/p>
&lt;p>So in the end a system and culture that helps people grow will attract more ambitious and intelligent young people, turn its early participants into the capable leaders needed as the company grows, and help B and C players perform above their level.&lt;/p>
&lt;hr>
&lt;/br>
&lt;p>As a fan of the NFL I am constantly reminded of these lessons and others throughout the year and I cannot help but notice them occur in other aspects of life. The NFL acts as a microcosm for business and can teach us lessons about building successful organizations from small startups to large companies. Understanding these lessons will shape the choices and effectiveness of both leadership and ICs and can radically alter the outcomes of a business. As third parties these choices will affect us as we are all dependent on organizations, whether private companies or government agencies, to work competently and create goods and services that improve our lives.&lt;/p>
&lt;p>These principles apply to all the institutions around us and they are quite effective at understanding why some businesses are more successful than others, why some governments are more effective than others, etc. At the end of the day if you want to accomplish great things with others you will be working on the same substrate of human behavior and the dynamics that will make your group successful are the same principles that make sports teams, businesses, governments, etc. successful. As I interact with such institutions more and more I will have to update my understanding of these principles so that I can use them effectively in my own endeavors.&lt;/p></description></item><item><title>I Moved to San Francisco</title><link>https://olivergilan.com/blog/i-moved-to-sf/</link><pubDate>Sun, 01 Oct 2023 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/i-moved-to-sf/</guid><enclosure url="https://olivergilan.com/images/sf.jpeg" type="image/jpeg"/><description>&lt;p>Today I woke up at 3:30am, hopped in an Uber, and headed to JFK where I flew to my new home in San Francisco. This is the first time in my 25 years of life that I will not be living within an hour of my parents in the suburbs of NYC. I&amp;rsquo;ve traveled alone including a backpacking trip to Costa Rica, a month of working remotely in Brazil, and other fun trips here and there but never have I lived permanently in a whole new part of the world like this.&lt;/p>
&lt;p>The word &lt;em>permanently&lt;/em> is certainly doing a lot of work here. There&amp;rsquo;s nothing necessarily permanent about this because a lot can change overnight and there&amp;rsquo;s no real commitment for me to stay here if I don&amp;rsquo;t want to. But I did not come here with the intention of going back tomorrow. Nor next week or month. So why did I come here?&lt;/p>
&lt;p>Well Census, the company I work for, is headquartered here but we have an office in NYC as well and it&amp;rsquo;s not like I&amp;rsquo;m being forced by them to move. We also have a fully remote-friendly culture so I could theoretically have moved to any city as long as the timezones weren&amp;rsquo;t obscene. So Census isn&amp;rsquo;t the whole story. This city has more to offer than just that.&lt;/p>
&lt;p>For starters, I needed to get out of New York. I was born in NYC, raised in it&amp;rsquo;s suburbs, went to college in New Jersey, and then moved to Manhattan after graduating. I love New York and I love the chaos and dynamism and opportunity. I love the stories of the people there and I&amp;rsquo;m captured by the personality and history of its buildings, streets, and neighborhoods. I firmly believe it&amp;rsquo;s one of, if not the, best city in the world.&lt;/p>
&lt;p>And yet everything about it is familiar. The weather and how it changes with the seasons, the shortening and lengthening of the days, the rhythm of the city over the hours, days, weeks, and months. The way the light bounces off the buildings, the manic drivers, the debauchery, the class. All of it is familiar and right now as I move on from my &lt;a href="https://olivergilan.com/blog/living-with-buggy-hardware/">long illness&lt;/a> and the world moves on from COVID I do not want familiar. I want new settings, new people, new challenges. I want to go out and see things I haven&amp;rsquo;t seen before and inject a bit of entropy into my life as most young people should. Being alone so far from everything I know isn&amp;rsquo;t a bug it&amp;rsquo;s a feature of this move.&lt;/p>
&lt;p>So why SF? There&amp;rsquo;s a number of reasons but ultimately it &lt;em>just makes sense&lt;/em>. At least for now. When I was young I always wanted to go out West, my job is headquartered here, I have a couple friends in this city from college and from work so I&amp;rsquo;m not starting completely from scratch, and if I execute on my dreams to start my own company any time soon then SF is a great place to be for that. I&amp;rsquo;ll also be close to so many other awesome parts of America although I will be further from Europe which is a bummer. The opportunity for me to grow and improve on many dimensions exists in SF and that&amp;rsquo;s ultimately what I&amp;rsquo;m excited for.&lt;/p>
&lt;p>I will have to go out of my way to meet new people and make new friends (if you&amp;rsquo;re located in SF reach out to me!) and I&amp;rsquo;ll have to build new routines. I&amp;rsquo;ll be working in-person far more than I previously have which will be the first time in my professional career (apart from my first internship at Prudential) where that is really the case. I&amp;rsquo;ll also be living with roommates for the first time since my Sophomore year of college pretty much. All of that means I&amp;rsquo;ll have to put concerted effort into carving out high-quality personal time where I can be alone with my own thoughts as well. I&amp;rsquo;ll also have the opportunity to take advantage of the natural beauty and abundant nature within a short distance of the city and relearn my old hobbies around sailing and surfing as well as some new ones. I&amp;rsquo;m starting with a blank slate here and I&amp;rsquo;ll be presented with opportunities I would have missed in New York due to my entrenched patterns and behaviors.&lt;/p>
&lt;p>The signs for my destiny point to SF in this moment but that can change and I will keep an open mind with all things. I want to give this city a fair shot and to me that means a minimum of 6 months but potentially even a year or more of living here. Life is unpredictable, however, and I may soon find myself moving yet again but even if I do I do not think I&amp;rsquo;ll be going back to New York. The gravity of that city is powerful and I &lt;em>already&lt;/em> have attractive opportunities there that would incentivize me to move back but I&amp;rsquo;m intentionally turning away from those for now. This is the time for me to explore the rest of the world beyond the New York metropolitan area and I&amp;rsquo;m going to take advantage of that. I&amp;rsquo;m going to seize the opportunities this city brings my way and my mantra for the next indefinite amount of months can be summarized with the following:&lt;/p>
&lt;img src="../images/give_me_stronger_battles.jpeg" width="500" /></description></item><item><title>Changing of the Seasons</title><link>https://olivergilan.com/blog/changing-of-the-seasons/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/changing-of-the-seasons/</guid><enclosure url="https://olivergilan.com/images/fall_watercolor.jpeg" type="image/jpeg"/><description>&lt;p>I used to look upon the short, dark winter days of New York with dismay. The biting wind and dry air cuts through many layers of clothing and attacks any piece of exposed skin. The sky is dark when you wake up and dark when you leave the office. If it&amp;rsquo;s not dark you&amp;rsquo;re lucky to see the sun instead of a diffuse gray blanket of weak light. You&amp;rsquo;re lucky if you feel direct sunlight on your skin twice a month. That&amp;rsquo;s what I disliked the most about it all. The whole period of winter was depressing for me primarily because the sun is so far away.&lt;/p>
&lt;p>I really internalized the idea today that I no longer feel this way. Instead I am welcoming the changing of the seasons and as I do I remember that I didn&amp;rsquo;t always fear the winter. When I was young I was excited for the new seasons and the changes they would bring. It felt as though every season lasted just long enough and the next one had a whole new way of life to shake up what had just become routine. Each season brought with it its own character and traditions and behaviors and mindsets.&lt;/p>
&lt;p>Winter was for working hard; for bearing down and focusing. All the plans set during the turning of the year and the goals set in the previous year were to be executed on and chased. It was a time to grow physically stronger. It was a time for nature and society to throw its hurdles at me and for me to overcome them. I grew physically older in the winters.&lt;/p>
&lt;p>Spring would roll around just as my body&amp;rsquo;s battery was running low and all that was dormant sprang to life again. The flowers would bloom, the trees would bring color back to a grayscale landscape, and animals would return and one of those animals would be me. Spring brought with it an air of hope and good spirits. It would feel as if my own consciousness would bloom along with the flowers and my battery drained from winter was recharged.&lt;/p>
&lt;p>Summer followed shortly after with its freedom and time. In Summer I could move slower. I was unburdened by obligations of school and society so I could pause and take stock of what was around me. I would appreciate where I was and what I was doing and I could take that time to explore my curiosities and examine new sides of myself. It was a time where I grew mentally and emotionally.&lt;/p>
&lt;p>Fall brought relief from the hot summer days and a time to connect with family both past and present. Cold dew-filled mornings served as a reminder that winter was coming and the easy times were ending but the holidays preparations for it easy. Dinners with family and friends brought me close to the people I love and the traditions of the holidays brought me close to my ancestors who went through those same traditions. Stories around the fireplace taught me the history of my parents and their parents. The shortening of the days and the falling of leaves was a stark reminder that nothing is permanent and that what matters is the ones we love and the the person we become.&lt;/p>
&lt;p>And now the seasons &lt;em>still&lt;/em> represent all of that I am simply the one who forgot. As I got older and my family became far more fragmented I forgot the annual traditions. As I started to work my summers became less free and I took less time to pause and slow down. As I began to experience serious illness and injury for the first time I forgot what it was like to have absolute faith in my body to carry me through the hard times. But none of my earlier understanding of the world came for free I just didn&amp;rsquo;t see all the work that went into crafting my environment. My parents put great effort into organizing large holiday gatherings and the natural schedule of school as well as family vacations provided natural moments for me to slow down and embrace my freedom. As I grow older I&amp;rsquo;m becoming more aware that such events are important to me for a quality life and that I must no longer rely solely on my parents to provide them. Instead the onus has fallen on myself and my siblings to bring our family together. It falls on me to carve out time for myself in the summers and to focus on my health and goals in the winter. The changing seasons reflect a world that is dynamic and alive and now it falls on me to live the type of life that reflects that. I believe I am finally beginning to do that.&lt;/p></description></item><item><title>Is Tech Losing Its Leverage?</title><link>https://olivergilan.com/blog/is-tech-losing-its-leverage/</link><pubDate>Mon, 25 Sep 2023 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/is-tech-losing-its-leverage/</guid><enclosure url="https://olivergilan.com/images/tech_leverage.png" type="image/jpeg"/><description>&lt;p>&lt;strong>I was interested in business before I was interested in tech but when I fell in love with computers and taught myself how to code in high school it seemed like an obvious marriage between my skillset and interests.&lt;/strong> At the time it felt as though tech was the highest leverage skill one could have when building or operating a business and it made sense that the darling companies of the day were all high growth tech giants like Google, Facebook, and before them Microsoft. These companies stood above most others because of the clear advantages and leverage that tech provided them.&lt;/p>
&lt;p>The biggest advantage for software companies was zero marginal cost for increasing inventory. Consider a traditional automobile company that spends $10m to build 1,000 cars. If they successfully sell all those units they can only create another 1,000 cars if they spend another $10m and that&amp;rsquo;s not to mention the time and cost to get assembly lines and manufacturing in place as well as the risk of recalls and other manufacturing defects that might eat into the profits. This is different from software companies where once the product is built the marginal cost of producing 1 copy of it versus 10 billion copies is simply the cost of creating a new CD. Once the consumer internet became fast enough and companies moved off of CDs in favor of downloading software the marginal cost actually reached zero. Microsoft might have spent $1 billion to build Windows (random estimate) but the cost to them for selling 100m copies of it versus 500m was the same. This allowed tech to scale far better than traditional business models. Sure, car companies might see savings from economies of scale but that&amp;rsquo;s negligible compared to the scalability of software.&lt;/p>
&lt;p>You might think the tradeoff for such scalability is higher upfront costs but upfront capex was almost always lower for tech than physical products and the margins much higher. It felt like every other billion dollar tech company was started by a couple friends in a garage or hobbyists and tinkerers plugging away at their code. There was not such a need for credentials or permission from investors and bankers just to get the funds needed to &lt;em>try&lt;/em> a new venture. You could even build and distribute your software anonymously which opened the playing field to many people who were traditionally excluded from many avenues of business due to age, race, or sexuality.&lt;/p>
&lt;p>Software didn&amp;rsquo;t just have better scalability and capex but also better logistics. You didn&amp;rsquo;t have to spend time talking to suppliers, getting factories set up, dealing with regulators and governments, etc. You could just start building. And if you were good at building and you built something useful then you could create products that were used by millions with just a few people. And even once it was it built changing it or upgrading it was far faster and easier than traditional products where you needed to update factory processes and deal with the whole cycle around that. Software engineers could move massive building blocks with a few strokes of the keyboard and make sweeping changes to mature products faster than ever before.&lt;/p>
&lt;p>&lt;strong>The leverage provided by software that was once the obvious differentiator between tech companies and the rest is no longer so apparent to me these days.&lt;/strong> Whether it was interning at Fortune-50 &amp;ldquo;legacy&amp;rdquo; companies, working at Microsoft, or hearing stories from friends at their tech startups the power of software to deliver business outcomes seems to be diminishing rapidly. Entire teams of engineers are employed to maintain simple features and new features are implemented at a snails pace. Adding new endpoints to an api gateway to enable a new product line at Microsoft was a multi-quarter endeavor. Changing simple UI components, fixing a deploy pipeline, adding a new api endpoint, fixing a bug and many other small tasks take weeks instead of minutes, even at tech companies an order of magnitude smaller than Microsoft. I personally have experienced this frustration countless times across every job I&amp;rsquo;ve had and every friend who works in tech has recounted similar frustrations even at some of the highest growth startups that are supposed to be agile and lean.&lt;/p>
&lt;p>The experience I&amp;rsquo;m generally describing is work that Google calls &lt;a href="https://sre.google/sre-book/eliminating-toil/">toil&lt;/a> : fighting with the tooling, debugging dev environment problems, fixing CI/test flakiness, and everything else that isn&amp;rsquo;t easily automatable but also isn&amp;rsquo;t novel work nor related to the core value prop that the software is trying to provide. It sometimes feels like upwards of 70% of an average engineer&amp;rsquo;s job is just toil these days except at a select few startups and I believe it&amp;rsquo;s why so many companies slow their innovation and feature improvements to a crawl. Why do Notion, Airtable, the social medias, GitHub, Zapier, etc. all basically feel like the same products they were 3-4 years ago? Maybe this is what happens at scale: your core value prop is baked in and there&amp;rsquo;s not much reason to rock the boat but perhaps I&amp;rsquo;m naive in doubting that many of these tech unicorns can justify their valuations in their current states. Airtable and Notion are two big examples here because they are solid products but in the enterprise space which they both &lt;a href="https://www.airtable.com/newsroom/company/airtable-new-direction">seem to be committing their focus on&lt;/a> they are competing with giants like Microsoft and Google. I don&amp;rsquo;t see how a smooth but narrow product like they currently have can outcompete Office. And just because you have a solid core product offering doesn&amp;rsquo;t mean you should take your foot off the gas in expanding its capabilities. Notion should want powerful spreadsheets embeddable in its documents and it should want notion pages that can become presentation slides and yet they don&amp;rsquo;t seem to be able to build these features and even if they were to, say, buy Airtable is anyone confident they could actually integrate the two products in a way that&amp;rsquo;s synergistic? Maybe I&amp;rsquo;m wrong to conclude that the reasons they &lt;em>haven&amp;rsquo;t&lt;/em> done these things is because of all the time they&amp;rsquo;re wasting on toil and other tech debt but for whatever reason the challenge must feel too big for them and when you spend the majority of your time working on toil then it &lt;em>is&lt;/em> too big.&lt;/p>
&lt;p>&lt;strong>My instincts tell me that as an industry we have taken two steps forward and four steps back in many regards.&lt;/strong> For starters, you can throw away the zero marginal cost of inventory. Not because you can&amp;rsquo;t distribute your product freely anymore but because it&amp;rsquo;s quite rare for a company to actually do so. Instead the dominant business model is to distribute a license to use the product which is running on hardware in the cloud owned by the seller. This means that to increase units sold i.e. increase the active users you need more compute and the seller is paying for that compute. The cost to Figma for selling its product to 1,000 users is &lt;em>not&lt;/em> the same as selling its product to 1 million users. Software as a Service has changed the scalability equations for software companies.&lt;/p>
&lt;p>SaaS comes with many benefits and there&amp;rsquo;s a reason why it&amp;rsquo;s become the dominant business model but it does mean that many companies have switched from product companies to quite literally service companies. How many of those benefits are actually software related versus business related? Investors and boards like recurring revenue because it&amp;rsquo;s predictable and can be planned around. It also means you can potentially earn more lifetime revenue for a single customer even if the product doesn&amp;rsquo;t change much. Whereas in the past you&amp;rsquo;d need to provide a new version of the product that is good enough to convince an existing user to upgrade, with SaaS they will continue to pay as long as they need their problem solved. Renting is more profitable than selling. But does it make it easier to build and distribute software?&lt;/p>
&lt;p>The second problem that SaaS introduces is that products are never finished. In theory this is good: products should keep getting better over time but in practice this means that products are actually just sold before they are ready. This is not just a side-effect but an encouraged practice for startups and if you&amp;rsquo;re a founder or investor this is great! It lowers the upfront capex requirements for building software products even more and gives you an opportunity to pivot earlier if you do not have product-market fit. The downside is you become beholden to paying users before you are ready. This can distort the incentives of product teams and companies as a whole which leads to feature-bloat and tech debt that is carried throughout the lifetime of the company. It&amp;rsquo;s essentially a greedy algorithm for company building which disincentivizes proper software methodologies and patterns. Advocates for this playbook will correctly argue that code is not the product its just a means to an end but how many medium-size and growth startups are drowning under the weight of their tech debt? Would many tech unicorns be growing faster today without that early tech debt? Maybe scale is to blame here and there&amp;rsquo;s no avoiding the slowdown that comes with success but I&amp;rsquo;m doubtful that explains everything. Is the ship-fast-at-all-costs model of company building a local maxima?&lt;/p>
&lt;p>If we ignore the change in business models around software I feel that the adoption of agile methodology in many instances has hurt rather than helped productivity for the same reasons. Anecdotally speaking the enterprise organizations I&amp;rsquo;ve worked for that touted their agile work environment have used it as an excuse for shitty planning and irresponsible creation of tech debt. Of course, leadership will never actually allocate the time to pay down that debt but they love to listen to the troops so be sure to point out the cracks in the system during your next retro. If you&amp;rsquo;re enterprising enough as an IC they&amp;rsquo;ll encourage you to fix those issues on your own time (you won&amp;rsquo;t have the resources to make the required cross-cutting changes ofc). I&amp;rsquo;ve even experienced the discouragement of &lt;em>any&lt;/em> planning or technical specifications because it &amp;ldquo;wasn&amp;rsquo;t agile.&amp;rdquo; You combine this with micro-services and you&amp;rsquo;re guaranteed to reduce the pace of development by an order of magnitude and make the defining contributions of smart engineers the reordering of some buttons and the deployment of one or two new functions during their 3 year tenure at your company. This development style leads to a weird situation where so much engineering time is spent on random minutiae of these giant systems while at the same time the end-product feels so disorganized and unpolished. The rough edges show everywhere and the product improves at a snails pace because no individual or team is capable of moving large enough building blocks across the codebase.&lt;/p>
&lt;p>Specifically relating to the tech we use to build I believe the unification around the web as the dominant runtime set us back in many ways. We had gotten pretty good at creating rich experiences using native apps and moving to the web nullified a lot of that tech tree. We became constrained by static hyper-text documents and over the past decade we&amp;rsquo;ve been reinventing all the tooling required to build those rich app experiences in the browser. The web also made us lose so much of the offline capabilities we used to build applications around. Maybe this helps for DRM and deploying updates but it means that any sufficiently powerful app needs to run on a server hosted by the company that built it and storage that used to come from a user&amp;rsquo;s disk now needs to be paid for in &amp;ldquo;the cloud&amp;rdquo; and the surface area for security vulnerabilities becomes a non-trivial problem. It did allow us to unify around Javascript (although unification is a strong word) and avoid cross-compatibility problems of different operating systems but I&amp;rsquo;m not convinced that&amp;rsquo;s a worthy tradeoff for what we have now. We are still hamstrung by supporting different browsers and mobile platforms while our best Javascript frameworks are only starting to catch up to some of the capabilities that we had a decade ago and the economic scalability of a software product is now worse than before.&lt;/p>
&lt;p>I strongly believe moving to the web also changed the way dependencies are used in software development to focus on APIs instead of libraries. APIs are rarely conformant to a spec like OpenAPI and are difficult to customize when necessary. How much time is wasted because your startup&amp;rsquo;s subscriptions are handled in Stripe and your auth is handled in Auth0 and your secrets are managed in Doppler and half your application is spread across random AWS services so now a simple change to rename or add a payment tier to your offering is accompanied by the rewiring of all these disparate pieces tied into different places in the codebase. And if, God-forbid, you want to make a change or add something that is slightly out of the scope of what these services might provide you&amp;rsquo;ll have to hack around their API interfaces instead of just modifying or forking a library.&lt;/p>
&lt;p>&lt;strong>It&amp;rsquo;s not clear to me if this loss of leverage is even a real phenomenon or if I&amp;rsquo;m naively misremembering what once was.&lt;/strong> I wasn&amp;rsquo;t working professionally back before the dominance of web development and Javascript frameworks and everything else that has now become the standard. It&amp;rsquo;s also not lost on me how requirements and expectations of tech and its applications today have grown immensely even from 15 years ago. Security, redundancy, usability, speed of development, support expectations, feature-sets, etc have all become much more complex and harder to fully implement. The demands from customers and the problems that tech is being asked to solve continue to grow and it&amp;rsquo;s possible the change in productivity I am describing is a result of that.&lt;/p>
&lt;p>After all, the cloud is ridiculously complex but it almost certainly lowers the barrier to entry by removing the need to manage physical servers in a fledgeling company. And for all the complexity of SaaS it does theoretically make software more profitable. Unifying around the web simplifies target runtime environments that need to be supported, deployments and updates can happen on the schedule that best suits the developer, and has lowered the barrier to entry even further by making Javascript a somewhat universal language.&lt;/p>
&lt;p>These were necessary advances in the tech landscape because it means that many more people can build software to supply the exploding need of it. And maybe I have it completely backwards: tech has more leverage than ever because there&amp;rsquo;s almost no such thing as a tech vs non-tech company if you look at it through the lens of using software in daily operations. Every company uses software to solve some problem and an increasing number of companies need engineers to build custom software even &amp;ldquo;legacy&amp;rdquo; brick and mortar companies like Starbucks and Dominoes. Maybe a bunch of the inefficiencies and problems I see today with software is a result of this influx of inexperienced and often young cohort of engineers in the workforce and the fact that these legacy companies can build software at all should be considered a raving success. It&amp;rsquo;s obvious that a lot of the progress in the industry has been necessary and beneficial and maybe my disillusionment is the result of seeing how the sausage is made so to speak. I don&amp;rsquo;t think that&amp;rsquo;s the full picture here, though.&lt;/p>
&lt;p>As I write this I realize I&amp;rsquo;m just describing the &lt;a href="https://olivergilan.com/blog/software-crisis/">Software Crisis&lt;/a> and maybe that&amp;rsquo;s why I&amp;rsquo;m so frustrated by these experiences. It feels like every new language, framework, cloud provider, and random dev tool is claiming to change the way we develop and provide the solution to this development problem we find ourselves mired in but none seem to deliver on this promise. Not only does it feel like this problem is worse than before it feels like it&amp;rsquo;s getting progressively worse. Surely as an industry we should be able to figure out why it often feels like making even small changes to codebases to add a feature or solve an underlying problem comes with so much baggage and effort for such little gain. As engineers we are failing to use tech to drive solutions for a business when we cannot implement necessary changes to products in an appropriate timeframe. Projects fail and companies die because of this failing.&lt;/p>
&lt;p>&lt;strong>I do not have a clear idea of what the solution looks like because it&amp;rsquo;s not clear to me if there is a single cause to this problem of increasing toil.&lt;/strong> We can start by creating better tooling to handle all the common problems that every SaaS product faces: pricing/account tiers, emails, common models like workspaces, organizations, users, etc, a variety of auth methods, trials, user invites, auditing, admin panels, OpenAPI-conformant endpoints, etc. There are some products in this space such as &lt;a href="https://shipsaas.com/">Ship SaaS&lt;/a>, &lt;a href="https://saasstartupkit.com/">Go SaaS&lt;/a> and &lt;a href="https://www.saasstarterkit.com/">SaaS Starter Kit&lt;/a> as well as others, but none of these sorts of solutions seem to be mature and well thought out enough to really solve these problems at scale. Another thing we can do is create new frameworks that handle many of these problems far better than they do today. Rails is the best web framework I&amp;rsquo;ve ever used and does basically everything right but it simply relies on too much magic with untyped Ruby and meta-programming. Combine that with Ruby&amp;rsquo;s Object-Oriented design and the intense coupling to the DB with ActiveRecord and most Rails projects become incomprehensible at scale (I find this unfortunate because Rails is awesome and Ruby is far more beautiful than Javascript). At the risk of introducing yet another JS framework into the world it would be nice to see a Rails-esque framework written in Typescript with first-class support for reactive frontends and built-in standard library for solving most of the common problems web apps need to solve.&lt;/p>
&lt;p>Either way I do think this problem is solvable because many startups seemed to have avoided it. From the outside companies like Stripe (a few years ago), Replit, Linear, Tailscale, Ramp, Clickup and some others seem to innovate at a breakneck pace. It&amp;rsquo;s hard to know if that&amp;rsquo;s because they&amp;rsquo;ve actually solved a lot of the complexity and toil internally or if they just brute-forced this pace of delivery but from the outside they are releasing features at a pace that most companies simply aren&amp;rsquo;t. It&amp;rsquo;ll also be interesting to see how the culture of these companies changes over time as they grow and scale and if most of their shipping velocity is behind them. Can any of their lessons and philosophies be systematized and scaled to larger organizations? To more organizations? Oftentimes these companies are successful because they have a unique composition of 10x engineers that drive the core growth in the early years when the team is small but that&amp;rsquo;s not a scalable strategy. As the need for software grows we need methodologies and tools that allow even 1x engineers writing software for your local DMV to ship quality consistently.&lt;/p>
&lt;p>These days when I talk to my friends outside of tech I&amp;rsquo;m consistently surprised by how much better many of those opportunities appear to be. A friend working for a boxed wine startup that&amp;rsquo;s only been around for 6 months is seeing higher growth and revenue than many startups I know that have raised tens of millions &amp;mdash; hundreds of millions even &amp;mdash; of dollars. And between AWS and all the other SaaS subscriptions modern tech teams use the margins on the boxed wine is far superior! Maybe the low hanging fruit in the enterprise software space is simply gone or maybe the requirements and expectations have outgrown our abilities. For one reason or another it feels like tech has lost its leverage.&lt;/p></description></item><item><title>Living With Buggy Hardware</title><link>https://olivergilan.com/blog/living-with-buggy-hardware/</link><pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/living-with-buggy-hardware/</guid><enclosure url="https://olivergilan.com/images/the_body.png" type="image/jpeg"/><description>&lt;p>On the morning of August 2019, a few weeks before my 21st birthday and my Junior year of college, I experienced the most intense pain in my stomach I&amp;rsquo;ve ever felt. It occurred while stuck in traffic during my one-hour commute to the offices of Prudential in Newark. The pain was sharp and deep in my abdomen and it had me doubled over, debating if I should pull to the side of the road. The pain dissipated a few minutes before arriving at work and sitting in the parking garage I took some deep breaths and questioned what just happened. After a few minutes of no pain I concluded that nothing serious was wrong so I continued on with my day.&lt;/p>
&lt;p>Over the two years following that moment I experienced the hardest period of my life. I experienced greater physical and psychological pain than ever before, I lost my strength and watched my body wither away, endured hopelessness and disillusionment in the heart of the American healthcare system, and experienced extreme anxiety and depression. All of this happened as I took the hardest classes of my college career, graduated at the height of COVID, and burned out at my first full-time job. The experience altered the way I see myself and the world. It made me rethink my own mortality and my relationships with those around me. It broke my body and wore down my mind. That I am here today is part luck, part resilience, and a lot of discipline yet I am still a fraction of what I once was. I’ve held off on writing about this period in my life because in my mind it’s still not over yet but so many people close to me do not know what I have been through and cannot fully understand me today without this context. That this period of my life will ever fully close is unclear so I’ve decided to write about it before I forget what I experienced myself.&lt;/p>
&lt;h2 id="the-descent">The Descent &lt;a class="anchor" href="#the-descent">
#
&lt;/a>&lt;/h2>&lt;p>Looking back on it I am not sure that the event in the car was the beginning of my problems (or even related to them at all) but it stands out to me as the moment when my digestive tract began to not behave as it should. The thing is, random acute pains are not fundamentally abnormal nor concerning and do not always indicate something is seriously wrong. Up to that point I&amp;rsquo;d been a remarkably healthy individual and very in-tune with my bodily functions. I was lean with a body weight of 155-160lbs at 5'11, very active, and grew up eating organic whole foods cooked by my parents. Even throughout college I&amp;rsquo;d cook most of my meals and spent a majority of what little money I had on high quality groceries. I drank alcohol little compared to the average college kid, avoided unhealthy sleeping habits, and worked out regularly. Doctors would occasionally express amazement at just how healthy most of my indicators appeared on the results of my physical checkups. For most of my life I&amp;rsquo;d gotten random sharp pains in my chest or experienced stomach pangs or would wake up with a sore muscle/tendon randomly and as far as I can tell this is just a normal part of the human experience. The pain in my stomach that day far exceeded anything I&amp;rsquo;d randomly really felt before but it completely went away after 30 minutes and later that night when my stool was loose I assumed the entire event was just a form of food poisoning.&lt;/p>
&lt;p>Over the next few days my stool continued to degrade in quality (it feels weird to comment on that mostly because I meet many people who do not have a clear concept of a &amp;ldquo;healthy&amp;rdquo; bowel movement but your stool is probably the most reliable indicator for the overall health of your digestive tract and internal systems as a whole). I&amp;rsquo;ve always had extremely healthy bowel movement with the exceptions only being times I was sick and they never lasted more than a week so when it was two weeks later and my stool was still not healthy it definitely set off alarm bells. I brought it up to my GP but after some tests none of my other indicators expressed any issues and I was otherwise having no problems with my health so it was once again dismissed. I had the beginning of a new semester to deal with as well as continuing my internship so I was happy to hear there was nothing to worry about and move on.&lt;/p>
&lt;p>The puking began 3 weeks later during the first couple days of my Junior year. I hadn&amp;rsquo;t thought about that initial incident in the car for a few weeks at that point but while attending a baseball game with two friends I had a single drink and felt sick the rest of the night. The next morning I awoke and rushed to the toilet where I promptly vomited. Kneeling there gripping the toilet seat I thought about that incident in the car and if it was related to what had just occurred. &lt;em>&amp;ldquo;Maybe just no hard liquor for a while&amp;rdquo;&lt;/em> I thought to myself. That night I attended the first party for the semester that my fraternity was throwing but I didn&amp;rsquo;t even make it to the next morning and vomited after two beers. All my friends laughed it off as me having drank too much but at that moment, with my stomach burning like fire, I became seriously concerned for the first time. During that entire first week of the semester I tried different amounts of foods and alcohols until by the end of the week having a single sip of a beer was enough to make me vomit and my stomach was regularly burning intensely.&lt;/p>
&lt;p>So I cut it out. I stopped drinking entirely in an attempt to ease the issue. I sat down and thought about what could possibly be happening and concluded that I might have a stomach ulcer that was being aggravated by alcohol. Over the next few weeks I didn&amp;rsquo;t touch alcohol at all but my symptoms continued. I&amp;rsquo;d routinely go to sleep with my stomach burning in pain and I could feel my appetite slowly decreasing all the while the hardest semester of my college career was getting into full swing. After two weeks of this I booked an appointment with a nearby GI doctor and explained my symptoms. He promptly diagnosed it as a stomach ulcer and prescribed Pantoprazole to reduce my stomach acid so that I could heal.&lt;/p>
&lt;p>I optimistically took the medication over the next month and a half but nothing improved. The pain would come and go in seemingly random waves. My stomach would feel as if it was burning from the inside, my skin felt extremely sensitive to the touch, and I began to experience bouts of nausea. At the time I was working out 5 days a week and on a cold Tuesday after class I remember walking home from a particularly hard core-focused workout and immediately feeling the pain wash over me. From that point on every time I worked out my core I would experience the burning pain. I immediately began to reduce the intensity of my workouts which helped for a little. Then I had to avoid core workouts entirely which avoided direct stress on my stomach but as the weeks went on I found myself modifying my workouts more and more. The problem with the core is that most any athletic endeavor or exercise uses it. I had to drop my weight down so that I could isolate my muscles more without the need to brace my core but in the end it wasn&amp;rsquo;t enough.&lt;/p>
&lt;p>I went back to the doctor and explained things were worsening including the inability to workout. I asked about the possibility of herniation but he dismissed my concerns and informed me that the medication takes time and that I should try it for another two to three months. And so I did. At the time I was in the best shape of my life at a lean 160lbs. I was lifting far more than my bodyweight in most compound lifts, hitting PR&amp;rsquo;s regularly, and had a lot of energy as a young man. The 3 months after that second doctor&amp;rsquo;s meeting I experienced a rapid decline in all those areas. My appetite dwindled fast, even the smallest workouts would leave me in pain the rest of the day, my energy to even try to workout quickly evaporated, and my stomach became so sensitive I began to experience insomnia. Over those 3 months I lost 30 pounds and became a shell of myself at 130lbs. All the work I had done over the past four years to gain weight and muscle was wiped out.&lt;/p>
&lt;p>I couldn&amp;rsquo;t quite comprehend what I was experiencing over that time period. I was watching my body whither away and my mind was in a state of panic, denial, and frustration. I would go to fraternity events and hang out with other friends but it became tiring to constantly decline alcohol. In the end I didn&amp;rsquo;t even have the energy to try to socialize and I stopped going. I quit my internship (that I had continued to work at during the school year) because I could not handle the energy required for school and work. The little energy I had went towards maintaining my grades and my relationship with my girlfriend at the time. My fear and desperation was growing but I held on to this stubborn belief that I would wake up the next day and recover and I wanted to make sure that when that recovery happened I wouldn&amp;rsquo;t have sabotaged my schooling and future. School was the priority for me and so I invested my little energy into that and by the time I was done with classes and assignments I had nothing left. My life consisted of class, homework, sleeping, and distracting myself from the new reality I found myself in.&lt;/p>
&lt;p>I tried explaining what I was experiencing to my parents but it did not feel as though they understood. My mother urged me to go to the doctor again and my father gave me the sort of holistic advice such as “workout more” and “make sure to only eat good food” that I just didn&amp;rsquo;t want to hear. I &lt;em>had been&lt;/em> exercising. I &lt;em>was&lt;/em> eating good food. What little money I had from my internship was going to school, rent, and groceries and I was eating organic whole foods that I was cooking myself. I became resentful that all my friends around me could live such easy lifestyles with shitty diets, poor sleep habits, and drug abuse and yet they were all thriving and I was the one suffering. At the 5 month mark I went to sleep every night wondering if I was headed towards a young death. Scenarios and possibilities flashed through my mind and fear became a constant in my life. The only one who seemed to sympathize was my girlfriend at the time mostly because she saw the decline up-close every day. She watched as the guy she first met slowly began to fall apart and her standing by me during that time is one of the most important reasons I didn&amp;rsquo;t completely lose myself.&lt;/p>
&lt;h2 id="searching-for-a-solution">Searching for a Solution &lt;a class="anchor" href="#searching-for-a-solution">
#
&lt;/a>&lt;/h2>&lt;p>At the 6 month mark I had settled into school and also realized that if prioritizing school meant dying then it wasn&amp;rsquo;t worth it. I can&amp;rsquo;t fully remember the order of events but I set my mind on figuring out what was happening to me. I no longer believed it was a stomach ulcer and I realized I would need a more comprehensive medical journey to figure out what was going wrong. I began by meeting with a GP and from there I embarked down a road involving multiple doctors from GPs to GIs to Radiologists to try and figure out what was wrong. Over the next 6 months I conducted ultrasounds, CT scans, SIBO breath tests, blood tests, urine tests, an endoscopy, colonoscopy, etc. I was tested for cancers, Crohn&amp;rsquo;s, Celiac&amp;rsquo;s, and every other potential fatal disease.&lt;/p>
&lt;p>With each test my hopes of finding the cause of my problems would rise and with each test the results came back negative and with each negative test my frustration and anger grew. I was in the most pain I&amp;rsquo;ve ever experienced, my old life was gone and I was barely holding on. Fatigue was a constant, pain was a constant, I couldn&amp;rsquo;t seem to retain water and I was continuously dehydrated. I had no energy and barely any strength left yet all I heard from doctors was my systems look normal and fine and that in everything they could see I was a healthy individual. I could not believe at the time how my body would be considered healthy by any serious medical system. It was even suggested to me once to explore the possibility of a psychosomatic approach to my problems but that did not bear fruit. This was not a problem of the mind.&lt;/p>
&lt;p>All this happened over months as I struggled to fit in doctors visits between classes and on weekends. I ended up getting second and third opinions trying desperately to figure out what these doctors were missing. That no one could point to an obvious root cause began to drive me mad.&lt;/p>
&lt;h2 id="the-war-in-my-mind">The War In My Mind &lt;a class="anchor" href="#the-war-in-my-mind">
#
&lt;/a>&lt;/h2>&lt;p>7 months after that initial pain in the car my symptoms seemed to level off. I wasn&amp;rsquo;t doing well but I also wasn&amp;rsquo;t getting worse. I had reached a steady state of suffering but the relief from that was short lived: death almost became a preferable outcome to the prospect of living the rest of my life in this state and as my body seemed to pause its deterioration my mind began to crumble.&lt;/p>
&lt;p>How could I possibly achieve my hopes and dreams of building a family and a business and a community when I could barely stay awake for 10 hours a day and had no energy or strength to do anything beyond sit at my computer and do some schoolwork? How could I possibly lift up my kids and be the dad I want to be when even the slightest physical exertion had me doubled over in pain? How could I ever ask a woman to sign up for a life with me in such a state? It felt as though I had stuck my head in a microwave and every second new thoughts and scenarios would pop in and out and bombard my mind with terrible ideas.&lt;/p>
&lt;p>Over the course of my life I was always able to call on my body when I needed to. I was such an active kid that would constantly play outside, climb trees, go for runs and bike rides. Whether I wanted to play a sport or learn how to surf or scuba dive; whether I wanted to dance or play I could do it all. I had definitely always been more cerebral than physical but my body was always there when I wanted it and it always did what I asked of it. I was proud of my mind-body connection and I attribute a lot of my early psychological confidence to the dependability my body provided me. To watch that all disappear over the course of a couple months destroyed my mind in ways that are hard to fully appreciate.&lt;/p>
&lt;p>For the first time in my life my body and health felt out of my control and with them, my destiny. My dreams felt out of reach and the future felt like a long dark corridor with no sign of light at the end of it all. I had always been someone to face things directly and one of the defining attributes I hold highly about myself is high executive functioning. I was used to staring at uncomfortable and hard work that needs to be done and doing it regardless of how I felt. I was used to changing who I was and growing when necessary. Depression in high school had made me acutely aware of my own psyche and I was comfortable with the dark corners of my mind but that was suddenly an irrelevant skill: my body was failing and no amount of mental resolve was stopping it. I slept as much as possible not just because I was tired but because being awake had little benefit. I began to resort more and more to the escapism of video games and movies. I gave up on discipline and executive functioning &amp;mdash; it made little difference anyway &amp;mdash; and did whatever I could to procrastinate and distract myself from reality.&lt;/p>
&lt;p>These actions led to me despising myself. When I looked in the mirror the man that looked back was not myself. I felt locked in the prison of my broken body and my resentment at others grew in ways I am embarrassed to admit. Watching friends and influencers make progress in the gym made me jealous and listening to thought leaders talk about waking up early and solving all your problems by grinding harder infuriated me to no end. &lt;em>To have a body that can wake up at all is a blessing that is out of our control&lt;/em> I would think to myself. Even watching other students go for a jog would cloud my mind with thoughts of how unlucky I had become. I am not religious but I spent many nights wondering why the universe was doing this to me, why God was punishing me. I would spend hours racking my memories for things I had done so wrong in my life that I deserved this outcome. In the end fatalism seemed to be the only answer: I was simply an unlucky roll of the dice in a cruel and unrelenting universe.&lt;/p>
&lt;p>Literature and history is full of humans suffering in dignity but that is not how I would describe my experience. At the very least the inner turmoil in my mind stripped me of any sort of self respect or dignity. I grew impatient and hard to be around. I became increasingly quick to anger and my frustration at the doctors who couldn&amp;rsquo;t help me, the world that didn&amp;rsquo;t seem to care, and the body that yielded no clues to what was going wrong continued to mount. My life and future was falling apart around me but the rest of the world kept moving as usual. Until it didn&amp;rsquo;t.&lt;/p>
&lt;h2 id="the-year-the-earth-stood-still">The Year the Earth Stood Still &lt;a class="anchor" href="#the-year-the-earth-stood-still">
#
&lt;/a>&lt;/h2>&lt;p>COVID came to America in early 2020 and my school shut down in-person classes at the beginning of March, 8 months after my symptoms began. When the world stopped because of that virus a big part of me was relieved. The end of social activities relieved me of the burden of turning down invites and making excuses for why I wouldn&amp;rsquo;t attend yet another party or gathering. Remote classes meant I could attend school from the comfort of my home and save the energy I would have otherwise spent on commuting to class. The lack of public activities meant I could avoid the stress of trying to hide my pain and sickness from others. I was suffering just like before but now at least I didn&amp;rsquo;t feel as though the rest of the world was moving on without me.&lt;/p>
&lt;p>Turns out that was a naive reaction to the pandemic as the little social interaction I &lt;em>did&lt;/em> have before disappeared and I felt more isolated and alone than ever. Being stuck inside so much and doing my classes all on Zoom turned out to be terrible and the last two semesters of my schooling was a joke. I increasingly began to fight burnout from being inside staring at a computer screen so much. On top of that seeing a doctor became impossible for at least 6 months and so did chances of figuring out what my problem was. The world was in stasis and now so was I but my state was suffering.&lt;/p>
&lt;p>As the world found a new normal with COVID and lockdowns I found my own normal with my condition. Those days felt like limbo. My context window of consciousness collapsed and I just lived moment to moment. Despite what the Buddhists may say it did not feel like enlightenment. I planned for no tomorrow, couldn&amp;rsquo;t remember what I&amp;rsquo;d eaten for breakfast the day before and simply drifted on. I was not in hell, just purgatory. I finished my Junior year then my first Senior semester and graduated early and joined Microsoft. I knew I was going to have the credits to graduate early and for years I had planned to take that time after graduating early to travel. Had I even been healthy enough to travel COVID made that impossible so I pushed up my start date and began working.&lt;/p>
&lt;p>A little over a year and a half after my problems began the world began to open up again and I was able to make appointments with doctors again. Over the next 3 months I repeated the process of testing and waiting and testing and waiting. I became sick of explaining my symptoms and the timeline of everything to new doctors. After a period of unsuccessful doctor visits a family friend recommended a GI near me and so I met with her and we concluded that with all the tests I&amp;rsquo;d done in the past there was not much else left to explore. She ran a few tests again to rule out false negatives and tested for a few more problems but after a month of that she sat across from me and informed that she couldn&amp;rsquo;t do anything else. She&amp;rsquo;d tested for everything she could and it was still unclear what was happening to me. The best she could offer was IBS medication to potentially ease the symptoms. &lt;strong>I don&amp;rsquo;t know why but when I heard that she could do no more to help me it changed everything.&lt;/strong>&lt;/p>
&lt;h2 id="priority-1">Priority #1 &lt;a class="anchor" href="#priority-1">
#
&lt;/a>&lt;/h2>&lt;p>Up to that point I had been outsourcing my health to the professionals. Between school, internships, and then my first job at Microsoft I had so much on my plate it felt like the logical choice to offload the task of researching and fixing my health to the people who specialized on that one task. Unfortunately personal health is probably the starkest example of the &lt;a href="https://en.wikipedia.org/wiki/Principal%E2%80%93agent_problem">Principle-Agent problem&lt;/a> which states that an agent with authority to act on a specific goal for a principle may not always have the same motivations and incentives to achieve that goal. When it comes to your health you will always have more incentive and desire to make yourself healthy than a doctor ever will and so taking your health into your own hands is always necessary, even if you consult with doctors. The most cynical interpretation of this dynamic is that doctors might even be incentivized to &lt;em>not&lt;/em> make you fully healthy because they get paid the more they see you but I think this view is generally overblown (although it is &lt;em>very&lt;/em> present in the American system). Regardless from that point on, my health became my own priority #1.&lt;/p>
&lt;p>When I heard that the doctors were out of ideas to diagnose and help me it felt like permission to take control of the problem myself. I felt the feeling of agency I had forgotten. I realized I didn&amp;rsquo;t care if I had to leave my job or sacrifice on any number of other things in life I was going to make my health my number one priority and I was going to spend all my time and energy on fixing whatever the fuck was going wrong with my body. And so I set to work.&lt;/p>
&lt;p>I could complete most of my work for Microsoft with just a couple hours of work a day and instead of going above and beyond like I had been I simply dedicated the rest of that time to fixing my health. I made it a full-time job. The first thing I learned is that my experience is not uncommon: stomach problems are on the rise in the US and its a phenomenon GI&amp;rsquo;s are aware of and actively trying to figure out. There are national conferences where every year more and more doctors are talking to each other with stories of patients experiencing symptoms just like mine with inconclusive causes. These issues seem to specifically be tied to increased allergies, with gluten being a primary culprit even in the absence of Celiac&amp;rsquo;s. It’s not clear why it&amp;rsquo;s happening but leading theories suggest high FODMAP diets leading to partial digestion of food, malabsorption of nutrients, breakdown of the gut lining, and certain food particles crossing the stomach-blood barrier and triggering an immune response.&lt;/p>
&lt;p>Two separate doctors had told me confidently that gluten and other foods were not the problem and I had believed them. A colonoscopy, endoscopy, and multiple blood tests ruled out gluten as a source of my problem but at this point I was ready to try anything so I cut out &lt;em>all&lt;/em> FODMAPs. Growing up with a family that cooks and having already been cooking most of my meals at that point it was easy for me to experiment with my diet like that.&lt;/p>
&lt;p>I immediately noticed the difference. The first day without FODMAPs I had the best sleep I had in two years and by the second day the burning sensation had been reduced by 20%. It&amp;rsquo;s hard to explain the emotions I felt as a result of all of that. Shock, hope, dismay, and excitement filled my entire soul that week. I couldn&amp;rsquo;t believe that after suffering for so long I may have found a solution and that my problems may be near their end. I was afraid to believe but I also wanted to accelerate the process. Every day I ate this restricted diet I gradually got better: my pain began to recede, my bloating decreased, and I could feel my energy returning. With each day my stomach burned a little less and it felt as though a weight crushing me from all sides was being released. Finally I could see a light at the end of the dark tunnel. And yet there I was thirty pounds lighter than I used to be, skinny, weak, and a shell of my former self. So I set about recovering the rest of my body.&lt;/p>
&lt;p>I started off with pushups in my living room and then I went for short jogs in the park a few blocks from my house. I would stop by the pull-up bars in the park and simply try as many as I could. I could barely do three. With my pushups I could barely do 10. It was scary to see my body in such a weak state although unsurprising considering the weight I&amp;rsquo;d lost and the inactivity I&amp;rsquo;d experienced over the past two years. It certainly wasn&amp;rsquo;t the first time I&amp;rsquo;d had to grow strong in the gym so I was used to this sort of progression and I invited the opportunity to overcome an obstacle that I could exercise my agency over. Each day I was able to do another pushup and another pull-up and run a little further. Each day gave me a little more motivation to keep pushing and keep fighting. I was thanking God every day for the chance to overcome the challenge of physical workouts instead of the challenges I&amp;rsquo;d been overcoming the past two years. Unfortunately I quickly ran into the limitations of my new diet: I wasn&amp;rsquo;t getting enough calories. Funny thing about cutting out many foods is that you end up with not a lot of things to eat. And I was not eating enough.&lt;/p>
&lt;p>Now that I had a better idea of what to eat I needed to figure out how to eat that in sufficient quantities. My progress and improvement seemed to plateau as I struggled to get enough calories day to day. The psychological strain on me at that time during that plateau was unbearable. What if I slipped back into the pain I had just endured for two years? What if this was just a temporary respite? Maybe my diet wasn&amp;rsquo;t the issue? Was this recovery just a random coincidence with my diet change? My pain was at around 50% it&amp;rsquo;s original intensity at that point and the thought of slipping back kept me up at night.&lt;/p>
&lt;p>I didn&amp;rsquo;t end up slipping back into pain and I continued to improve but the pain lingered for longer and my improvement slowed after that first month. Even today I am only about 60-70% of where I once was and I still sometimes experience occasional burning in my stomach.&lt;/p>
&lt;h2 id="burning-out-and-working-with-pain">Burning Out and Working With Pain &lt;a class="anchor" href="#burning-out-and-working-with-pain">
#
&lt;/a>&lt;/h2>&lt;p>When I graduated in the middle of COVID I pushed my start date up and immediately began working at Microsoft. I couldn&amp;rsquo;t travel like I had originally planned and I was too weak and sick to do anything materially enjoyable at home so I figured I might as well start earning money. That ended up being a poor decision in retrospect.&lt;/p>
&lt;p>In another attempt to escape my new reality I threw myself into work with no break after school. I plunged headfirst into the job and did everything I could to learn and grow. I taught myself as many new skills as I could around infrastructure, DevOps, feature development, and anything else that was thrown my way &amp;mdash; and a lot was thrown my way. I worked long hours and I &lt;em>did&lt;/em> learn a lot and grow as an engineer but it was all just a distraction from the daily pain I was experiencing. Eventually it wasn’t even a good escape.&lt;/p>
&lt;p>It was an incredibly dysfunctional job with too much red tape and no reward for individual achievement and after 12 months of grinding without any healthy outlets like exercise or friendships I burnt myself out. My struggles over the previous two years and the bleakness of my future caught up to me. I was beaten down and exhausted. I trundled along for another 6 months before quitting and getting another job at Census.&lt;/p>
&lt;p>This time I took a month off before starting my new role and traveled to Israel to relax and decompress. It was a great reset and when I got back I made it an explicit point to start a lot slower at Census. I was already improving quite well when I joined and I made sure to take advantage of my newfound health to live a more rounded life. At 5pm my laptop was closed and I focused on my wellbeing: cooking, going to the gym, going on runs or long walks, meeting friends, etc. This enforcement of boundaries between work and the rest of my life actually let me relax and improve much more efficiently and happily during the time I was working and it’s part of the reason my skills grew so rapidly early on at Census.&lt;/p>
&lt;p>As my responsibilities grew at Census, however, I became more invested and my tasks became less clearly defined. I relished at the chance to take on bigger problems but working at the higher levels of abstraction also meant it was much harder for me to gauge how long a given task would take and suddenly I found myself working longer and longer. I would think to myself &lt;em>just one more hour and I&amp;rsquo;ll have this working&lt;/em> but three hours later I would be down an even deeper rabbit hole. When I would finally close the computer it was already late in the evening and I hadn&amp;rsquo;t eaten dinner or worked out. I wasn&amp;rsquo;t taking care of my base needs and that led to losing weight and stress and early signs of burnout.&lt;/p>
&lt;p>I&amp;rsquo;ve since tried to pare down how much time I&amp;rsquo;m spending in front of the screen but that hasn&amp;rsquo;t really worked. Anyone who&amp;rsquo;s experienced burnout knows that just reducing load doesn&amp;rsquo;t always fix the problem once your mind is conditioned to feel stress and frustration on your daily tasks. It feels like all the accumulated burnout from COVID, school, and Microsoft are returning and I&amp;rsquo;m constantly trying my best to keep it at bay but even taking time off doesn&amp;rsquo;t work. It&amp;rsquo;s extremely frustrating because to be successful like I want to be sometimes you &lt;em>have&lt;/em> to grind, especially when you&amp;rsquo;re young and learning. I am not a perfectly efficient engineer and the only way to learn the things I need to learn is to grind but I cannot grind because if I neglect my base needs even for a day or two then I lose energy, I get brain fog, my sleep suffers, and I burnout. This is my constant struggle.&lt;/p>
&lt;h2 id="moving-forward">Moving Forward &lt;a class="anchor" href="#moving-forward">
#
&lt;/a>&lt;/h2>&lt;p>If we fast forward to today &amp;mdash; around a year and a half after my recovery began &amp;mdash; I&amp;rsquo;ve been able to reintroduce most foods except gluten and I&amp;rsquo;ve regained 15 pounds of my old muscle. I&amp;rsquo;m feeling much better and I couldn&amp;rsquo;t be more grateful and happy for my second lease on life and everything I&amp;rsquo;ve learned from the experience around nutrition and health but I&amp;rsquo;d be lying if I said things were perfect. I&amp;rsquo;m still underweight &amp;mdash; ideally I&amp;rsquo;d be at 155lbs instead of the 143lbs I&amp;rsquo;m at now &amp;mdash; and I still suffer from anxiety and stress around the whole incident. I still don&amp;rsquo;t know what actually caused this problem and it&amp;rsquo;s hard to shake the feeling that at any day I can wake up and lose the ability to eat a whole new food group and I&amp;rsquo;m already down dairy and gluten. My pickings are becoming increasingly slim and the consequences on my life are not trivial. Eating out is a constant problem and I never cease to feel like a burden to friends when picking restaurants. The corollary is I need to cook most of my meals which means a large majority of my free time is spent cooking food, cleaning dishes, cooking more, cleaning more, cooking more, cleaning more. Over and over and over and over. Meal prep and a dishwasher has made that part of my life more bearable but it&amp;rsquo;s a literal constant drag on productivity.&lt;/p>
&lt;p>Activities that used to be fun escapes like going for a day trip to the beach or a two day hike now inspire anxiety around getting enough calories. The odds I&amp;rsquo;ll find enough food to sustain me for such trips is low which means either I eat something I am allergic to and suffer for it or I get hungry in the afternoon and become a cranky person that is not fun to be around. I&amp;rsquo;m constantly trying to bring meal prepped food but even that&amp;rsquo;s not easy because I can&amp;rsquo;t just whip up a quick high-calorie sandwich or something equally portable because I cannot eat bread.&lt;/p>
&lt;p>I&amp;rsquo;ve learned how to expand my diet within the constraints I have but I &lt;em>still&lt;/em> do not consistently get enough calories. I am almost always running at a near caloric deficit and that can be tiring in ways that are hard to describe. It&amp;rsquo;s common for me to lose up to 5 pounds when traveling or on vacation for a week because I simply do not have my kitchen and groceries to implement my normal system of food. It still feels like I&amp;rsquo;m constantly playing catch-up and I have very little margin to let loose and live my life like I&amp;rsquo;d want to. I spend not just too much time but also cognitive energy making sure my body gets the fuel it needs to survive. Just to avoid the hell I experienced two years ago.&lt;/p>
&lt;p>The psychological scars of the experience are still very fresh in my mind and I think that&amp;rsquo;s going to be the last part of this whole ordeal that stays with me. I used to have an &lt;a href="https://olivergilan.com/blog/believing-is-the-difference/">undying confidence&lt;/a> in myself and a self esteem that let me attack the challenges of life but that&amp;rsquo;s mostly gone now. I have anxiety and bouts of fear and self-doubt frequently. My body sometimes looks alien to me and I find it much harder to take pride in myself and how I look. I don&amp;rsquo;t trust my body to not fall apart on me when I need it most which makes me less willing to take risks or seize opportunities. Maybe this is just a signature of growing older but I no longer trust nature to spare me and I feel that I can die at any moment. I feel fragile in so many ways whereas in the past I always prided myself in being more resilient than my environment ever demanded. Now I am constantly facing feelings of inadequacy in the face of life&amp;rsquo;s challenges but even worse, life&amp;rsquo;s opportunities.&lt;/p>
&lt;p>In October I will be moving away from my home in the northeast to go live and work in San Francisco. It has been a dream of mine to move west to Silicon Valley since I was young but now all I can think about is how I can build a routine to get the groceries I need and the tools to cook them and the time to make it all happen consistently. Even getting to this point where I feel I have the ability to move across the country to a new environment without falling apart is a huge step for me psychologically. I feel ashamed to tell people it&amp;rsquo;s taken me so long to move because I&amp;rsquo;m worried about getting enough food. The blank stares on their faces always scream: &lt;em>this is America isn&amp;rsquo;t it? We have food here too.&lt;/em> But it&amp;rsquo;s never so simple. I will have to build a whole new routine around getting high quality groceries and becoming acquainted with a kitchen and rhythm of daily life to make the food I need to eat consistently. Even a single day with less calories than I&amp;rsquo;m used to can mean dropping weight and feeling fatigued the next day.&lt;/p>
&lt;p>There&amp;rsquo;s not much of a moral to this whole story it&amp;rsquo;s simply time I wrote it all down and there&amp;rsquo;s still so much I left out. I have discovered so much about nutrition and my body. I have become increasingly prone to burnout and frustration. I have become disillusioned with the American medical system. I have spent two years staring into the abyss and I do not know how to capture all that in writing just yet. I have dreams of building my own company and achieving great things but now all those dreams come with this challenge attached. I still think it&amp;rsquo;s possible to achieve what I want and I still stubbornly believe it&amp;rsquo;s possible to regain all my former strength and resilience. Perhaps I will write another post more focused on the technicals of what I&amp;rsquo;ve discovered around nutrition but the high level of it all is this seems to be an autoimmune problem. If there&amp;rsquo;s any part of the body that resembles software and is programmable it&amp;rsquo;s probably the immune system and so I have hope. If my immune system can flip a switch and become allergic to these food groups out of nowhere then surely I can find a way to flip that switch back off and that is something I will do even if it takes me years.&lt;/p>
&lt;p>Hell, maybe I&amp;rsquo;ll even make this mission a business. It would certainly be nice to work on this full-time and I increasingly speak to people who are suffering from similar issues and would love a solution. I was blessed to be raised by parents who cooked almost every night and understand the value of good healthy food so when the time came I 1) made the connection between my problems and my diet and 2) had the tools to cook for myself to solve my problems. I&amp;rsquo;m constantly amazed by how many people suffer from so many issues and never realize that if they stopped stuffing their face with every variety of garbage many of their symptoms would be alleviated. Otherwise intelligent people continually fail to see the connection between what they put in their bodies and how they feel both physically and mentally. In America there seems to be a prevailing view that our minds are abstract separate entities when in reality our minds are the results of physical cells just like every other part of our body. We talk about the mind versus the body but these are systems that are intertwined and what you eat can most certainly affect how you think. Of course, my knowledge is admittedly far from complete in this domain and without any formal credentials I do not know how I would build a sustainable business for this just yet or what that business model would even look like. The hardest challenge for these things is most people simply aren&amp;rsquo;t willing to help themselves. Anything short of a pill that can be prescribed is most likely doomed to fail due to lack of adherence. Most people aren’t willing to sacrifice half of what I have had to sacrifice just to recover to this point and I will need to sacrifice even more if I want to get to where I want to be.&lt;/p>
&lt;p>So for now I will focus on myself. With the food I can eat I will regain my weight and strength. This time in addition to just strength I will focus on mobility and balance as well. I will focus on rebuilding my gut and reprogramming my immune system and flipping whatever switches need to be flipped to make my body behave normally again. As I prepare to move to a whole new environment with new challenges and opportunities I am excited for what is to come. I will build an iron body with more strength and resilience than I’ve ever had and with that body I will seize the opportunities life throws my way.&lt;/p></description></item><item><title>6 Questions</title><link>https://olivergilan.com/blog/6-questions/</link><pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/6-questions/</guid><enclosure url="https://olivergilan.com/images/fenyman.png" type="image/jpeg"/><description>&lt;p>Feynman had this concept of 12 important questions and every new idea or thought he came across throughout his life he&amp;rsquo;d try to contextualize within one of those questions. The idea is to build this ongoing thread of new insights for each question and continue to pull each thread over long time periods until revelations would emerge. I do not have 12 questions but I do have 6 that I find interesting and hope we as a civilization answer in my lifetime.&lt;/p>
&lt;h3 id="1-education-at-scale">1. Education at Scale &lt;a class="anchor" href="#1-education-at-scale">
#
&lt;/a>&lt;/h3>&lt;p>So many problems in the world can be boiled down to issues around education. Our solution as a society seems to be the establishment of state-run (and privately run) schools that all look and act uniformly in their approach to solving this problem. Their yearly schedules are similar, kids are grouped by age, the subjects are pretty much the same, the extracurriculars are similar, the daily class breakdowns follow similar patterns, the yearly progression is similar, and the end goal is the same: college. In America the school system happens primarily at the local level with influence from the states and the federal government so it&amp;rsquo;s common to see variation in syllabi, resources, wealth, etc. across different schools but the directional approach to the overall problem of educating the people remains the same. Even privately-run schools look almost identical to public schools in all but their prestige and wealth.&lt;/p>
&lt;p>It can be difficult to measure the efficacy of different school reforms but we know that what we have right now is not working. The average US adult reads at a 7th grade level and American students routinely score worse than international counterparts on standardized tests. Our educational elite seem committed to the idea that the problem is funding and more schooling = more education but we routinely see this is &lt;a href="https://ny.chalkbeat.org/2022/8/26/23319844/new-york-school-spending-test-scores-disconnect">not the case.&lt;/a> Most education policy makers view education as a function of locking students in a room for 8 hours a day and fiddling with the right knobs to make them come out the other side smarter but this is not how learning works. You can force a child to sit in a chair and you can even force them to read a book, reciting the words out loud to be absolutely certain, but that simply does not mean they are learning the lesson we want future citizens to be learning.&lt;/p>
&lt;p>Our kids are isolated from the world from ages 6 to 18 every weekday for 10 months out of the year, forced to sit in sterile environments, often learning the same subject &amp;mdash; like a foreign language &amp;mdash; for years and still graduate with no proficiency in it. Worse yet the basics of reading and writing have proficiency rates that are abysmally low and after 12 years of schooling the average American is unqualified for the work force, has very little formal reasoning and logic skills, and has not interacted with the world in a meaningful manner at all. Any school reform that shows a sign of promise quickly sees their benefits disappear when rolled out at scale (I cannot find a source for this now but this is famously a phenomenon that the Gates Foundation has struggled to overcome). Why is that?&lt;/p>
&lt;p>So much can be written about the education problem and potential fixes but I&amp;rsquo;ll leave it here for now. Education is still plagued by &lt;a href="https://web.mit.edu/5.95/readings/bloom-two-sigma.pdf">Bloom&amp;rsquo;s 2-sigma problem&lt;/a>, our schooling institutions seem to be sliding in the &lt;a href="https://www.sfchronicle.com/sf/article/S-F-school-district-pledges-to-have-academic-17312844.php#:~:text=Recent%20results%20reveal%20that%2058,of%20Latino%20students%20are%20proficient.">wrong direction&lt;/a> even in our richest cities, and worst of all despite all our resources and advancements in technology we have not seen a boom in educational outcomes. Why aren&amp;rsquo;t we &lt;a href="https://erikhoel.substack.com/p/why-we-stopped-making-einsteins">producing more world-changing geniuses&lt;/a> than ever before? What does it take to solve the education problem for a society at our scale? If we are to solve our society&amp;rsquo;s challenges in the next century we better figure this one out.&lt;/p>
&lt;h3 id="2-software-at-scale">2. Software at Scale &lt;a class="anchor" href="#2-software-at-scale">
#
&lt;/a>&lt;/h3>&lt;p>We have an ongoing &lt;a href="https://olivergilan.com/blog/software-crisis/">software crisis&lt;/a>. The short of it is most software projects fail. And as a project increases in size and importance the odds of it failing goes up. The &lt;a href="https://www.standishgroup.com/sample_research_files/CHAOSReport2015-Final.pdf">CHAOS reports&lt;/a> published by the Standish Group paint a bleak picture with software project success rates past and present. Despite methodologies like Agile and all the developer tooling and product management knowledge that&amp;rsquo;s been accumulated since the &amp;rsquo;60s we&amp;rsquo;ve seen only marginal progress in consistently building software successfully. The important thing to note here is that we can build software at scale in the sense that we have the compute and knowledge to build large systems but we cannot build software at scale in the sense that many organizations can competently build software.&lt;/p>
&lt;p>This is an increasingly important problem and has been since it was identified in the NATO Software Engineering Conference in 1968. Software is eating the world and it&amp;rsquo;s playing an increasingly important role in our lives. It&amp;rsquo;s critical for our banking, transportation, national security, healthcare, etc. We need to figure out how to competently build software for all aspects of our lives even when it&amp;rsquo;s being built by semi-competent organizations in the government. This is the problem I am most focused on right now given my career and understanding of the domain so if I can solve one of the big issues on this list it&amp;rsquo;s most likely to be this one. I do think there are promising solutions here and I think a lot of them exist already they just haven&amp;rsquo;t been synthesized into a single philosophy and framework for software development so that the average developer and product team can just follow some simple guidelines and arrive at good software. I am confident this can be solved in my lifetime.&lt;/p>
&lt;h3 id="3-the-immune-system">3. The Immune System &lt;a class="anchor" href="#3-the-immune-system">
#
&lt;/a>&lt;/h3>&lt;p>Autoimmune disorders are &lt;a href="https://www.autoimmuneinstitute.org/articles/about-autoimmune/autoimmunity-on-the-rise/#:~:text=The%20best%20guess%20that%20current,2%2C3%2C4%5D.">on the rise&lt;/a> and it feels like every day I&amp;rsquo;m talking to someone with new allergies they didn&amp;rsquo;t have growing up. The immune system is so crucial to understanding and controlling human health and our medical system simply does not understand it nearly well enough. Most autoimmune disorders are misdiagnosed and most do not have great treatment options. We need a Manhattan Project for mapping out, understanding, and controlling the immune system. From what we know it seems to be somewhat programmable. Could we ever arrive at an understanding well enough that allows us to quite literally program/debug our personal immune systems like we do with code? This could be the biggest seismic shift in human health after sanitary water and antibiotics.&lt;/p>
&lt;p>How does the immune system relate to other systems in our body like our gut biome and our skin? How does it relate to mental health and the brain? How does food, exercise, and sunlight affect it? Can it be harnessed to fight cancers, Alzheimer&amp;rsquo;s, and other classes of illnesses? Our immune system is dynamic and vital to understanding our health and wellbeing.&lt;/p>
&lt;h3 id="4-community">4. Community &lt;a class="anchor" href="#4-community">
#
&lt;/a>&lt;/h3>&lt;p>It feels like community is deteriorating across America. Kids spend less time playing with friends, adults spend less time with friends and family, and rates of depression &amp;amp; suicide are increasing. In our cities and towns people know their neighbors less and less and we are becoming more insular, spending &lt;a href="https://www.visualcapitalist.com/who-americans-spend-their-time-with/">more time alone as we age&lt;/a>.&lt;/p>
&lt;p>On top of that we are seeing weird trends around gender and vitality. Fertility rates are plummeting leaving us with aging populations and a dearth of young kids to inject life and hope into our communities. We are also seeing growing divides between the genders and there seems to be a massive disconnect between expectation and reality in dating for both the men and women I speak to in my life. At least in the coastal liberal cities it seems that taking an adversarial approach to dating is the predominant strategy and it doesn&amp;rsquo;t seem to be working well for us as a society.&lt;/p>
&lt;p>All the technology in the world won&amp;rsquo;t save us if we hate each other because of our politics, gender, or lifestyle. We need to figure out how to bring back a sense of community to our country as we grow while protecting the liberties of individuals and the diversity of lifestyles that a free nation should expect. This is not a problem that digital technology can solve. It will require social technology and smart leaders.&lt;/p>
&lt;h3 id="5-food-at-scale">5. Food at Scale &lt;a class="anchor" href="#5-food-at-scale">
#
&lt;/a>&lt;/h3>&lt;p>Heart disease is the &lt;a href="https://www.cdc.gov/heartdisease/facts.htm#:~:text=Heart%20disease%20is%20the%20leading,groups%20in%20the%20United%20States.&amp;amp;text=One%20person%20dies%20every%2033,United%20States%20from%20cardiovascular%20disease.">leading cause of death&lt;/a> in the US. Obesity rates and the amount we spend on healthcare are skyrocketing and it&amp;rsquo;s undeniably related to the food we eat. This even relates to so many of the autoimmune problems and the rise of allergies we are seeing. It sure &lt;em>seems&lt;/em> like our food is poisoning us but the extent is unclear. The interesting thing to me is what incentives are leading us down this path. Is it just as simple as garbage food tasting good and hijacking our brain&amp;rsquo;s reward mechanisms to become addicting? Is this demand-induced? Why is it with all our wealth and all our fertile farmland we cannot seem to grow really healthy food at scale for cheap?&lt;/p>
&lt;p>This problem can be broken down into a couple categories but the two big ones are: what even &lt;em>is&lt;/em> a healthy diet and what would it take to feed the entire nation such a diet? How could we build farms that can grow the right food in the necessary quantities for cheap while being environmentally sustainable? Avoiding soil erosion, excess fertilizers, animal cruelty, resource consumption, and all the other problems our farming industry is currently plagued with is important on its own but to do that &lt;em>and&lt;/em> to feed everyone the right food for cheap seems incredibly important. It can be tempting to view this purely as an engineering problem but it&amp;rsquo;s far more than that. Understanding what a healthy diet looks like for different groups of people with different ancestry and diet restrictions is an unsettled science. On top of that even arriving at an answer does not take into account the immense political and economic efforts that would be involved to reform our farming industry to grow the foods it actually should. The very health and vitality of our nation could rest on figuring this out.&lt;/p>
&lt;h3 id="6-the-nature-of-consciousness">6. The Nature of Consciousness &lt;a class="anchor" href="#6-the-nature-of-consciousness">
#
&lt;/a>&lt;/h3>&lt;p>What is consciousness? Why does it seem like some matter has this property while other forms of matter do not? Where does it come from? Does it rely on organic matter or can silicon be conscious? This is a fascinating question that gets to the heart of what it means to be human and it could become increasingly important as AI becomes more and more powerful. It may seem academic &amp;mdash; and it&amp;rsquo;s certainly easy to smoke a joint and sit in an armchair talking about the nature of consciousness mannnnnn &amp;mdash; but in reality understanding human consciousness could unlock an understanding of the universe, human behavior, psychology, and mental health. The nature of consciousness (along with the origin of life) are the two big unsettled questions in biological science in my opinion.&lt;/p>
&lt;hr>
&lt;p>These are just some of the questions I find interesting but I&amp;rsquo;m also young and I expect I&amp;rsquo;ll find quite a few more as my life goes on. Some of these are big and I have no expectation of finding an answer to them myself although I do hope we figure them out as a civilization within my lifetime.&lt;/p></description></item><item><title>Thinking Short and Long</title><link>https://olivergilan.com/blog/thinking-short-and-long/</link><pubDate>Sat, 06 May 2023 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/thinking-short-and-long/</guid><enclosure url="https://olivergilan.com/images/telescope_eye.png" type="image/jpeg"/><description>&lt;p>I often hear founders and investors talking about the need to think short and long&amp;mdash;to zoom in on the daily details and to zoom out on the big picture strategy&amp;mdash;as key skills for a founder. I think it&amp;rsquo;s great advice if not a little obvious but the way these skills come into play changes over the lifetime of a company in a way I didn&amp;rsquo;t fully appreciate before.&lt;/p>
&lt;p>In the beginning of a new company you will have a guiding vision but by far the most amount of your time will be spent laying the bricks of your foundation every single day. It may seem on the outside that you are immersed in the big picture vision because that is what you will discuss whenever you talk to investors, customers, or family but the majority of your time will be focused on the daily grind. At such an early stage there is little need to zoom out and analyze the big picture compared to how often you need to be zoomed in and executing relentlessly. Navigating a ship doesn&amp;rsquo;t matter much if you don&amp;rsquo;t have a ship!&lt;/p>
&lt;p>On the other side as you are approaching an exit it becomes far more important to spend time zoomed out, analyzing the bigger picture, and strategizing effectively. Solving day-to-day problems will be less of your concern and you will need to be capable of seeing the bigger dangers and opportunities. Hedging risks against economic black swan events, capitalizing on new opportunities, and managing the growth of your business all require a clear vision of the future beyond the daily work that needs to be done. You will need to think long to navigate your ship through uncharted waters.&lt;/p>
&lt;p>These skillsets and their value seemed obvious to me for the longest time but recently I&amp;rsquo;ve come to realize there is a third distinct skill that you don&amp;rsquo;t get for free just by being good at the other two. That is not just thinking short and thinking long but to do &lt;em>both at the same time&lt;/em>. This is so difficult that it separates itself as a skillset from the other two individually and is one of the defining hardships in the &lt;a href="https://andrewchen.com/after-the-techcrunch-bump-life-in-the-trough-of-sorrow/">Trough of Sorrow&lt;/a>.&lt;/p>
&lt;p>After you&amp;rsquo;ve attained product-market-fit but before you are on the path to an exit you will spend the majority of your startup&amp;rsquo;s lifetime in the trough of sorrow facing a seemingly endless road of hardships and struggles. As you scale the tricks and shortcuts that got you here&amp;mdash;and you &lt;em>will&lt;/em> have tricks and shortcuts otherwise you wouldn&amp;rsquo;t be here&amp;mdash;will begin to slow you down. Your abstractions and data models will show their limitations, your bugs and ops load will increase, your morale will decrease, and your velocity will slow. Your ship will begin to spring leaks. You will have to dedicate a significant amount of your focus day-to-day fixing those leaks while at the same time the challenges of scale will require more deliberate long-term thinking.&lt;/p>
&lt;p>On paper the margin for error may be bigger than in the past but the opportunity cost of a wrong move will be higher than ever before. Incumbents will begin to treat you as a real threat and deploy resources&amp;mdash;sometimes more than you have&amp;mdash;to destroying you while new competitors that are still young and agile will pop up around you. Big ships turn slowly and in such an environment you are only afforded so many wrong turns before you&amp;rsquo;re left in the dust. A month or two pursuing the wrong approach early on may not be a problem because you can pivot in a day but that agility will rapidly disappear as you scale. A random walk approach to solving your problems will not be a sufficient strategy for this phase because your growth turns your local maximas into tech debt, your tech debt amplifies the leakiness of your foundational model, and the weaker the foundational model the slower you become, the more firefighting needs to be done, and the worse your position becomes relative to competitors.&lt;/p>
&lt;p>This is the time to escape your local maximas. Plans will need to be made on the scale of months but executed on the scale of days. The nature of escaping local maximas means your plans might not show meaningful returns on investment for longer than ever before making it hard to guage the effectiveness of new strategies. You will need confidence to stick to new initiatives for long enough while also having the humility to understand that any given course of action could be wrong. Full rewrites of your codebase will become attractive options just to get back to the feeling of high velocity but this is a trap in all but a few instances.&lt;/p>
&lt;p>The hardest part about engineering isn&amp;rsquo;t building the initial system it&amp;rsquo;s changing it in motion. Part of thinking short and long is recognizing what you have here and now and where you need to be long term and then executing on a plan to reduce the delta. This is difficult in a way that academic program design and brute-force programming usually fails to capture. Refactoring often leads to bugs and you&amp;rsquo;ll be suffering with enough of those. Sometimes it&amp;rsquo;s not clear that refactoring in a specific way will help and sometimes it feels &lt;em>very&lt;/em> clear but there aren&amp;rsquo;t definable metrics. It&amp;rsquo;s very tough to convince people that things should be done a different way if you cannot point to immediate quantifiable ROI on the work required to change the system. If you&amp;rsquo;re the founder or in a position of leadership you may think that you don&amp;rsquo;t have to convince anyone but there&amp;rsquo;s always stakeholders beyond yourself and at this stage of your company&amp;rsquo;s life you may find yourself with more stakeholders than you realize.&lt;/p>
&lt;p>Working at a company during this period can be brutal for non-founders as well. Foundational employees are likely to leave at this stage and take with them critical institutional knowledge while increased ops loads and longer timelines for progress will lead to burnout amongst the employees that remain. You are most likely to burn out at this stage too. The headcount of the company will grow and change leading to internal politics that need to be managed for the first time in the company&amp;rsquo;s history. Lines of ownership will be drawn, formal processes will be implemented, and accountability will be quantified. In many ways the fun part of an early startup will rapidly vanish but the abundance of a large established corporation will not exist yet leading to the combination of boring cog-in-the-machine work environment without the margin of safety to go along with it.&lt;/p>
&lt;p>You may become increasingly frustrated with your own ability to get things done. Your time context switching between daily tasks and big picture planning will prevent you from doing either one as well as you&amp;rsquo;d like. To properly strategize long term you need uninterrupted time to understand and map out the landscape ahead. To properly move the needle on high impact daily tasks you need uninterrupted moments of flow. But your time will be interrupted. Your calendar will fill up and your responsibilities will multiply and you will find yourself without the time to work on the high impact daily work you&amp;rsquo;re used to doing and you will be frustrated at your own lack of focus at seeing the bigger picture. This feeling of deteriorating excellence due to having one foot in both worlds will seemingly come at a time when the issues your product and company face become more apparent than ever and the solutions needed more obvious. This decreased effectiveness combined with a growing list of problems leads to the sensation of slog and it will stretch out before you like a road that disappears across the horizon.&lt;/p>
&lt;p>The worst part about this stage is you might do everything right and still lose but that&amp;rsquo;s just the nature of things. There&amp;rsquo;s no way to know until you try. If you&amp;rsquo;re an employee at a company in this stage more will be asked of you than perhaps you signed up for but there will also be incredible room to grow. Simply showing up every day and executing relentlessly can be the difference between success and failure. If people feel they can rely on you to do what you say you will do that eases the load off everyone that you work with. Dependency means&lt;/p>
&lt;p>I have no advice to give about how to get through this period of time not because I don&amp;rsquo;t have ideas on what would help but because I don&amp;rsquo;t have the experience to know if they&amp;rsquo;re right. It would be disengenuous. All I can do at this point in my career is observe and learn and hopefully in 10 years I can definitively write about the strategies that make this period of a company&amp;rsquo;s life easier to get through. What I do know is that the skillset required to get through this period is distinctly different than what is required before and after it. You will need to think short and you will need to think long and you will need to do both every day all the time. I do know a good team that you trust is critical&amp;mdash;I don&amp;rsquo;t see how you can possibly survive without that&amp;mdash;and you will need to pace yourself. Now more than ever the game becomes a marathon not a sprint. The only way out is through.&lt;/p></description></item><item><title>Believing is the Difference</title><link>https://olivergilan.com/blog/believing-is-the-difference/</link><pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/believing-is-the-difference/</guid><enclosure url="https://olivergilan.com/images/hand_holding_apple.png" type="image/jpeg"/><description>&lt;p>I have a joke that goes something along the lines of &amp;ldquo;my character flaw is genuinely believing I could do [insert highly improbable feat]&amp;rdquo;. For example I truly believe that should the need arise I could land a commercial 747 airline with no training. Except the joke isn&amp;rsquo;t that I think I can land a giant commercial aircraft with no training or expertise it&amp;rsquo;s that I am pointing out the belief as a flaw when in reality it has probably been among my greatest strengths historically. The act of believing in your ability to do something increases the odds of your success in doing said thing. I don&amp;rsquo;t quite know why that is the case but I&amp;rsquo;d like to share a few moments in my own life that highlight this phenomenon and provide some clues as to why believing can be the difference between succeeding and failing.&lt;/p>
&lt;p>Early into my high school days I became fascinated with programming. I had been playing around with the basics of html and css at that point but I wanted to build bigger and better things than static sites. I started by learning Java but even before I got to anything interesting I needed to learn how to think like a programmer and that proved far more difficult than I anticipated. The simplest problems on &lt;a href="https://projecteuler.net/about">Project Euler&lt;/a> were too difficult for me and I couldn&amp;rsquo;t wrap my head around solutions that were completely obvious because I couldn&amp;rsquo;t logically figure out how to apply loops and conditionals in the correct manner for the given problem.&lt;/p>
&lt;p>For 3 months every day after school I&amp;rsquo;d go home, open up one of these basic problems and then try to solve it for 30 minutes before giving up and studying the solution to try and reverse engineer the correct thought processes required. Then one day, sitting in math class absent-mindedly thinking about one of these problems, it clicked. I quite literally felt the neurons in my brain firing in a whole new pattern and programming has felt like a native ability ever since.&lt;/p>
&lt;p>Looking back on it, a more sane individual would have stopped trying in the face of seemingly zero progress far earlier than I did. Three months of banging your head against a wall at the &lt;em>very beginning&lt;/em> of a new skill is not a recipe for a new career path but I kept going only because I knew my older brother was already studying CS in college and if he could figure it out then so could I. The reason I&amp;rsquo;m a programmer today is because I believed (quite stubbornly) that I could be even in the face of overwhelming evidence to the contrary. That seemingly irrational belief became my reality.&lt;/p>
&lt;p>Another profound instance happened in my second semester of college while studying Calculus II. I had taken a bit of calculus my senior year of high school but it mostly encompassed Calculus I and the little Calculus II we did cover I found incomprehensible. Meanwhile at Rutgers University our Calculus II course is notoriously difficult with a high failure rate and it was common practice for students to take it over the summer at an easier community college then transfer the credits just to avoid taking it at Rutgers.&lt;/p>
&lt;p>So there I am, having heard all the rumors, breezing through the course along with a growing apprehension waiting for the other shoe to drop when we start the chapter on Sequences &amp;amp; Series. For the first time that semester I cannot make heads or tails of the material and all the fears and apprehensions crash down in what I thought was the dreaded fate of all Calculus II students. For 2 days I frantically try to see the patterns&amp;mdash;to understand the problems and their solutions&amp;mdash;in my weekly assignments. Then on a Thursday night at 11pm with one hour before my weekly assignment deadline and on the verge of a breakdown it all changed when I asked myself a question: what if I was really good at this? What if Sequences &amp;amp; Series were actually really easy to understand? What would such a world look like and how would the me in that world solve these problems? When I looked back at my paper I was staring at a different language&amp;mdash;one I could comprehend and understand with ease. The patterns composed easily before me and I began to look at Sequences &amp;amp; Series&amp;mdash;and later all of Calculus II&amp;mdash;from a different perspective.&lt;/p>
&lt;p>It feels cliché to write these words. These are the type of corny feel-good dramatizations about confidence and the power of belief usually intended for a target audience of 10 and under but I&amp;rsquo;ve truly experienced these moments and they weren&amp;rsquo;t the only time. Sitting in my dorm and grasping Sequences just minutes after not understanding any of it was the most extreme manifestation of this phenomenon I&amp;rsquo;ve ever experienced but it&amp;rsquo;s happened so many times to varying degrees that I cannot discount its existence. Over short time periods like this one and longer ones over months and years, in academic subjects and athletic endeavors, in side projects and personal goals, this phenomenon of belief altering my performance continues to come up.&lt;/p>
&lt;p>Throughout my life I would claim my defining differentiator from my peers is my ability to learn new things rapidly and with ease and I believe my confidence in my ability to do so plays a large role in that. The more confident you are the less stressed you will be and the less stress you experience the more elastic your brain will be and the more elastic your brain is the faster you will learn. Whether or not that is the actual mechanism at work is irrelevant to me, however. I&amp;rsquo;ve never doubted my ability to learn something and then found it easy but every time I internalize a confidence in myself for a coming task I accomplish it with a high probability of ease and these experiences over time has cemented this as fact to me. Whether I&amp;rsquo;m under pressure (trying to land a 747 with no experience), in a totally new domain, trying to achieve something ambitious, or all of the above quickly acquiring and learning new skills is essential and believing in your ability to do that accelerates the process.&lt;/p>
&lt;p>There&amp;rsquo;s an unfortunate caveat I&amp;rsquo;ve learned which is that this doesn&amp;rsquo;t work without internalized belief. There are times when I consciously tell myself something but I do not believe it in my gut; I do not believe it &lt;em>unconsiously.&lt;/em> In those cases conscious reinforcement hasn&amp;rsquo;t been enough. This means it can be hard to put into practice the process of belief and benefit from the subsequent boost in performance which can be needed the most when you&amp;rsquo;re at your lowest. When you are beaten down and worn out&amp;mdash;when it feels like the world is against you and the walls of depression are closing in&amp;mdash;you can find yourself without the conscious power to override the defeat within your own soul. I have yet to find a reliable and deterministic method for turning conscious belief into internalized belief but I&amp;rsquo;ve compiled two broad heuristics that can be useful.&lt;/p>
&lt;p>The first is to start with a question. When your gut says &amp;ldquo;I can&amp;rsquo;t do this&amp;rdquo; no amount of gaslighting by your prefrontal cortex will convince it. If you instead pose simple questions you have a chance: &amp;ldquo;what if I &lt;em>could&lt;/em> do this? What would a world where I can do this look like?&amp;rdquo;&lt;/p>
&lt;p>We become the stories we tell ourselves about ourselves and by asking questions you give permission to the deepest parts of your soul to acknowledge its current beliefs yet also to imagine alternate narratives about itself. These narratives over time can become desires and then beliefs and then realities. When I was at my lowest point as a teenager and debating whether I should even continue the dance of life the turnaround all started with a question. By giving myself permission to imagine a better future even if that felt impossible in the moment I was able to craft a new roadmap for myself and change my reality. This does not happen always but it happens enough to make this a usable strategy. Start with a hypothetical and see where it takes you.&lt;/p>
&lt;p>The second strategy is to start with small wins. Jordan Peterson has a now famous recommendation to start the long journey of self improvement by cleaning your room. It&amp;rsquo;s great advice. Your brain is a prediction machine and it learns via reinforcement over millions of unconscious and conscious predictions about the future and then subsequent interactions with reality. When you start with a small win it subtly strengthens the connections in your brain that say &lt;em>I can do this&lt;/em> and in time it can give you the conditioning required to believe in yourself even when tackling far greater tasks than you can imagine. I have such a strong confidence in my own ability to learn new things not because I wake up and tell myself every morning that I can do it but because my brain has hundreds of thousands of experiences to draw upon where I was able to learn something new stretching all the way back to when I first learned something as basic as talking. The &lt;a href="https://en.wikipedia.org/wiki/Winner_and_loser_effects#:~:text=Testosterone%20is%20another%20compound%20whose,losing%20team's%20testosterone%20goes%20down.">winner effect&lt;/a> is real and it&amp;rsquo;s because the body operates on these subconscious internalizations more than we realize so small wins become big wins and similarly small wins become new beliefs and those beliefs lead to better performance.&lt;/p>
&lt;p>I find myself in an increasingly rationalist world that attempts to quantify everything. At a societal level this obviously has advantages but I find myself increasingly trying to surround myself with individuals that go beyond rationalism. I want to be friends with, work with, and invest in individuals who say &lt;em>I know the odds but I will win anyway&lt;/em> because I think those people are more compelling &lt;em>and&lt;/em> more likely to win. To put it simply: when two individuals with equal ability compete head-to-head the one who believes in themself will have an advantage over the one who doesn&amp;rsquo;t. If you want to achieve great things, be a great partner, a great competitor, a great founder, etc. you need some level of delusion. You need some level of blind faith in your ability to achieve what you desire because it is this blind faith that will keep you going longer than the rational individual in the face of seemingly insurmountable odds. It is this blind faith that will keep you relaxed and adaptable in the presence of pressure. It is this blind faith that will be the difference between success and everything else.&lt;/p></description></item><item><title>Just Start</title><link>https://olivergilan.com/blog/just-start/</link><pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/just-start/</guid><description>&lt;p>It&amp;rsquo;s not hard to be better than average at just about anything. You just have to show up and try. It may seem trivial or tautolically true but starting is the most reliable way to achieve whatever you want and just by doing so you separate yourself from the average person. If you have a goal then planning matters but it matters less than momentum because a rock solid plan with no momentum leaves you in the same place but action and adjustment will move you closer to where you want to go even if your plan is incomplete. In fact, the odds of you succeeding double or triple the moment you start doing something regardless of a plan because momentum compounds. &lt;a href="https://en.wikipedia.org/wiki/Winner_and_loser_effects">Past wins lead to future wins&lt;/a> so small wins become big wins and taking that first step can lead to outcomes wilder than you ever imagined. I&amp;rsquo;ve made the mistake of not starting soon enough more times than I can count in my life&amp;ndash; and I see people around me make it all the time&amp;ndash; so this seemingly obvious truth is not well internalized even by me.&lt;/p>
&lt;p>Failure to start stems from two broad patterns I&amp;rsquo;ve observed. The first is paralysis in the face of conflicting advice which happens all the time in just about every industry or field. Take an individual who is trying to lose weight and now think about all the conflicting studies, scientists, fitness experts, and influencers who have strong opinions on the best way to achieve this goal. The internet has democratized access to experts and valuable information more than ever before but in the situations where you need to be an expert to discern which expert is correct you are not far off from being completely uninformed. When this happens it&amp;rsquo;s common for to get in the mindset that you just one more opinion, to read one more study and then it&amp;rsquo;ll all be clear when the opposite is true. When faced with conflicting theories the best method is to start falsifying and gathering feedback through action. There are endless proposed methods online for sustainably losing weight but none of them involve sitting around looking at more proposed methods. Act. This happens with everything whether it&amp;rsquo;s business, excercise, cooking, music, language, etc. The act of doing will expose truths and inaccuracies about the field itself and paths to mastery will become apparent that were impossible to see before starting.&lt;/p>
&lt;p>The second and more pernicious pattern is overestimating the complexity needed to get started. Take the same individual trying to lose weight. Over months they listen to podcasts with doctors explaining how to optimize fat loss and maximize muscle growth; they watch fitness influencers for how to best execute lifts in the gym to hit different muscle groups; they create elaborate meal plans with defined macros and targets. Meanwhile they could have started by just cutting out all junk food and doing a light workout every day and it would get them 80% of the way to where they want to go. Experts are so often working at the edge of knowledge for a given field trying to find gains and novel results where no one has before meanwhile a beginner in any endeavor would see results from simpler actions. When a professional athlete talks about optimizing their workout or a musician talks about the humidity of the air or a chef talks about the techniques to perfect a delicate sauce they are actually talking about the last .1% of performance possible. If you are at the beginning of your journey you almost never need to worry about those optimizations and you will never reach the point where those optimizations matter so quickly that you do not have time to see it coming and adjust. In other words, the &lt;a href="https://en.wikipedia.org/wiki/Pareto_principle">80/20 rule&lt;/a> applies to just about anything in life and when you are starting out you get to benefit from the low-hanging actions that get you 80% of the way. This, too, feels like an effect of the internet: we have such access to masters in their field that we often forget we don&amp;rsquo;t need to be as skilled as Gordon Ramsey too cook a healthy and tasty meal or as athletic as Lebron James to be in shape. We just need to start.&lt;/p>
&lt;p>In a sense this is a rephrasing of the common startup adage &amp;ldquo;just ship.&amp;rdquo; With startups the importance of shipping is obvious and accepted yet I&amp;rsquo;ve met so many first time founders making the mistake of not shipping. It almost always comes with a lofty goal to reshape society or disrupt an industry with massive incumbents and leads to weeks writing business plans, refining pitch decks, creating wireframes and mockups, and endless theorycrafting about the idea. The goal is to launch with a product superior to the incumbents in every way; to come out the gate with such an obviously better product that society and the world has no choice but to reorganize itself around it. This startup loses every time to the one without a 50-page business plan, without a refined pitch deck, without wireframes, but with a founder that identified the one differentiator to build a simple vertical slice on and got some customers onboarded.&lt;/p>
&lt;p>In life, as in startups, the person who starts despite imperfection and iterates will always outperform the one who plans meticulously but never puts their plans into motion. The founder in motion will get customers and feedback early allowing them to provide value they didn&amp;rsquo;t even think about beforehand while the founder that only plans will never learn about the untapped opportunities provided by a customer&amp;rsquo;s needs. The individual in motion will learn what works and what doesn&amp;rsquo;t and adjust their tactics as they go while the individual that only plans will miss obvious pitfalls because the problem space for just about anything is so vast you cannot account for everything. The founder in motion will find others who want to join their mission as employees and investors while the founder that only plans will find people who only want to talk and theorycraft. The individual in motion will find communities and mentors that will help them along their journey while the individual that just plans will often plan alone. The founder and individual in motion will experience the effects of compounding results while the ones who just plan will delay the power of compounding longer and longer. The ones in motion will reach their goals while the ones who plan will constantly find new edge cases and new reasons to delay starting.&lt;/p>
&lt;p>Planning has a place and a strategist will outmaneuver and outperform brute force but plans only matter when put in motion. So whenever you&amp;rsquo;re beginning something new focus on the motion first. Focus on the basics. Take the first step. Build the momentum. Then plan once you are on your way.&lt;/p>
&lt;p>Just start.&lt;/p></description></item><item><title>Software Crisis</title><link>https://olivergilan.com/blog/software-crisis/</link><pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/software-crisis/</guid><description>&lt;p>A couple weeks ago every &lt;a href="https://fortune.com/2023/01/13/faa-computer-failure-grounded-thousands-flights-caused-2-contractors-introduced-data-errors-notam-system/">flight in the US was grounded&lt;/a> due to the meltdown of the FAA&amp;rsquo;s NOTAM system in the latest large-scale example of the &lt;em>software crisis.&lt;/em> The term was coined in 1968 to describe the rapidly expanding pace of power and use-cases for computers and the inability of the industry to keep up with the appropriate quality of software. Computers became exponentially cheaper and more powerful and thus the role of software grew but the majority of the software created at the time shared characteristics that defined the crisis:&lt;/p>
&lt;ul>
&lt;li>Over budget, behind schedule&lt;/li>
&lt;li>Frequently never completed&lt;/li>
&lt;li>Poor performance&lt;/li>
&lt;li>Difficult to maintain&lt;/li>
&lt;li>Did not meet the requirements of the end-user&lt;/li>
&lt;/ul>
&lt;p>Over the next decades some of the brightest minds in the field set to providing solutions for the crisis and out of those efforts we got a number of new languages, programming paradigms, philosophies, and methodologies. Procedural programming and C brought a paradigm shift in the way programmers reason about and build software. Later Object-Oriented Programming and languages such as Java did the same. Methodologies like waterfall, spiral, rapid, incremental, continuous integration, etc. started popping up all with the aim of taming the complexity and solving the crisis&amp;ndash; or at least a part of it. Then in February 2001 the Agile Manifesto was released and took the industry by storm. Today every software team from the smallest startups to the largest enterprises proudly wave the flag of the Agile development process.&lt;/p>
&lt;p>And today, 2 decades after the birth of Agile and with further developments such as BDD, TDD, DDD, and every other acronym you can think of, the characteristics of software that marked the crisis are as prevalent as ever. NOTAM melted down because a contractor introduced incorrect data; because the system &lt;em>let&lt;/em> him introduce that data. Over a million organizations use Microsoft Teams, a basic chat app that constantly crashes, consumes memory, and straight up fails to work on many machines. Twitch, a streaming platform with 31 million users, takes upwards of 10 seconds to render on my 6 year old MacBook. Companies (and the &lt;a href="https://techbeacon.com/security/nsaarmys-inscom-leaks-top-secrets-aws-bucket-look-ma-no-password">NSA&lt;/a>) routinely &lt;a href="https://www.securityweek.com/aws-s3-buckets-exposed-millions-facebook-records#:~:text=The%20company's%20researchers%20identified%20an,%2C%20likes%2C%20and%20Facebook%20IDs.">expose customer data&lt;/a> by forgetting to add authentication to their public AWS S3 buckets. Outdated software keeps people in &lt;a href="https://kjzz.org/content/1660988/whistleblowers-software-bug-keeping-hundreds-inmates-arizona-prisons-beyond-release">prison&lt;/a> when legally they should be free. Browsers have a never-ending appetite for RAM and now desktop apps built on those browser engines have adopted a similar palate. New front-end projects using the most popular frameworks are saddled with dependencies for dependencies for dependencies each one increasing the &lt;a href="https://www.bleepingcomputer.com/news/security/dev-corrupts-npm-libs-colors-and-faker-breaking-thousands-of-apps/">surface area&lt;/a> for attack. Peek into the average enterprise codebase and you&amp;rsquo;ll find hundreds of lines of boilerplate code, unnecessary abstractions&amp;ndash; factories and providers and complex inheritance schemes&amp;ndash; along with dependency injection and a variety of other patterns complicating code so that a useless unit test becomes a little more sane to write. Kubernetes and microservices designed to decouple independent pieces of software now add latency, orchestration complexity, and interface coupling across multiple runtimes and software teams. Large-scale government software systems routinely experience &lt;a href="https://news.ycombinator.com/item?id=34440228">outages&lt;/a>, &lt;a href="https://krebsonsecurity.com/2022/02/report-missouri-governors-office-responsible-for-teacher-data-leak/">data leakage&lt;/a>, and &lt;a href="https://www.cnn.com/2022/05/18/politics/software-bug-warning-vmware/index.html">exploitation&lt;/a> and the default state for new government software projects is &lt;a href="https://www.standishgroup.com/sample_research_files/Haze4.pdf">failure&lt;/a>. The crisis is ongoing.&lt;/p>
&lt;p>The Standish Group conducts a study every year on the state of software development in the industry and publishes a &lt;a href="https://www.standishgroup.com/sample_research_files/CHAOSReport2015-Final.pdf">Chaos Report&lt;/a> with its findings going back to 1994. Agile dominates the industry as the primary methodology employed in most software projects yet the success rates are still dismally low.&lt;/p>
&lt;figure>&lt;img src="../images/software_project_success_table.png"
alt="Software Project Outcomes Table"/>&lt;figcaption>
&lt;p>Software project outcomes by project size&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;!-- ![Software Project Success Table](/images/software_project_success_table.png) -->
&lt;p>Read the &lt;a href="https://www.standishgroup.com/sample_research_files/CHAOSReport2015-Final.pdf">full 2015 report&lt;/a> for definitions on project size and resolution status. When the project size is small success rates are high and only a few projects fail. As projects increase in size the success rates drop with a 41% drop just from a small to a moderately sized project. We built solutions to the problems software development faced in the 1900s but those solutions were outpaced by the requirements of software as it ate the world. The outcomes in the Chaos Report read like an O(n&lt;sup>2&lt;/sup>) algorithm and our efforts to solve the crisis are being dwarfed by the exponential growth in importance and scale of software.&lt;/p>
&lt;p>In retrospect OOP is mostly a bad idea for software at scale (that&amp;rsquo;s for another time) and it&amp;rsquo;s unsurprising that Agile didn&amp;rsquo;t overcome that to solve the crisis. The &lt;a href="https://agilemanifesto.org/">original manifesto&lt;/a> is only 12 principles and 68 words. There&amp;rsquo;s too much room for interpretation and not enough specifics on how it should be applied and used in various software development scenarios. In a sense dedicating effort to solving the crisis mirrors the problem most teams face with tech debt: you don&amp;rsquo;t need perfect software to be successful. You can build the most technically sound application but it won&amp;rsquo;t generate any revenue if it doesn&amp;rsquo;t actually solve a problem and add value to customers. Inversely you can build wildly successful products with horrific code because the bar is so low and people will use something imperfect if it solves their problem over something perfect that doesn&amp;rsquo;t. The startup graveyard is littered with technically sound products that lost because the technically unsound products actually shipped.&lt;/p>
&lt;p>The problem is made worse by the concentration of software engineering talent. As software eats the world its importance in every industry from agriculture to manufacturing to defense to logistics to government elections and beyond is growing but the most talented software engineers are found in the companies focusing exclusively in the world of bits and predominantly in the big tech companies. It makes sense for engineers to aim for those companies: regardless of the pay, lifestyle, and status, (all of which are significant by the way) those big companies were once small companies pushing the boundaries of technology and revolutionizing the world with new search engines, operating systems, social graphs, etc. Now a top engineer going to work for Google will utilize their talents far less than if they modernized the software used in global shipping instead. Startups push the needle on this problem of talent concentration but they do little to address the hundreds of legacy companies and industries that affect our everyday lives and need software talent. There may not even &lt;em>be&lt;/em> enough software talent to address the needs of all those companies and any solution to the software crisis will have to address that.&lt;/p>
&lt;p>Progress is being made. Firebase, Supabase, and Pocketbase bring backends and databases to the world of front-end devs and full-stack frameworks like NextJS, SvelteKit, Remix, etc make it easy to build and manage an application of decent scale with just a couple engineers. User-friendly cloud platforms like Heroku, Digital Ocean, Render, Fly.io, and others have removed the deployment complexities of small projects so teams can focus more on the product and less on the infrastructure. The tools to build software at a small scale are better than ever catalyzing an explosion in the number of individuals and small teams building profitable products. These improvements, however, are confined to building small-scale, highly focused, software-only products focused on solving specific tasks and have not affected the outcomes of software at scale. The scale and requirements of the software needed in enterprise and nation-scale systems is a whole different beast and gains in small-scale software development haven&amp;rsquo;t translated over.&lt;/p>
&lt;p>If 90% of bridges built collapsed before they were finished the world would look very different than it does today yet 91% of medium sized software projects fail and our industry treats this as normal. Just as competent engineering teams should dedicate time to address technical debt so too should our industry re-acknowledge the ongoing crisis and dedicate efforts to solving it. We need solutions that allow for consistent success in developing good software at scale in our most important industries. That might start by creating an industry-wide definition for what &lt;em>good&lt;/em> software even means. I have no big answers but I have conviction that this problem of software development can be solved. There won&amp;rsquo;t be a silver bullet that can address software creation in every scenario but the majority of software systems can surely be classified into a handful of categories with best practices and methodologies for each. Likely those methodologies that work best for each scenario already exist and what&amp;rsquo;s required is the synthesis of these ideas into frameworks for management, engineering, and design along with the subsequent education and adoption by the industry at large.&lt;/p></description></item><item><title>Where No-Code Fails</title><link>https://olivergilan.com/blog/where-no-code-fails/</link><pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/where-no-code-fails/</guid><enclosure url="https://olivergilan.com/images/nocode.jpg" type="image/jpeg"/><description>&lt;p>I read &lt;a href="https://github.com/getlago/lago/wiki/Post-mortem-of-our-1st-YC-startup:-a-Reverse-ETL">this&lt;/a> postmortem today from a YC company that pivoted from their first idea as a no-code reverse-ETL tool. The post was interesting to me for a couple of reasons:&lt;/p>
&lt;ol>
&lt;li>My current company &lt;a href="https://getcensus.com">Census&lt;/a> is in the same space trying to solve the same problem they pivoted away from&lt;/li>
&lt;li>The problem they ran into that ultimately led to their pivot is a problem I believe exists more generally for a number of companies specifically in the no-code space.&lt;/li>
&lt;/ol>
&lt;p>Regarding (1) Census actually ran into the same wall they hit but we have a very exciting solution that we are actively shipping and we&amp;rsquo;re confident this will turn into one of our greatest strength as a product. I&amp;rsquo;d like to write a post about that but for now I want to focus on (2) and it&amp;rsquo;s how I see this problem affecting no-code tools that exist today. The problem is this: no-code tools are sufficiently complex that non-engineers are unwilling or incapable of effectively using them while engineers are unwilling to use them because they don&amp;rsquo;t actually make our lives significantly easier where it matters.&lt;/p>
&lt;p>No-code isn&amp;rsquo;t a new concept with products like Wordpress, Squarespace, Wix, Shopify, etc. pioneering the space in different ways. Historically, though, these tools focused on static sites or domain specific problems such as e-commerce. Recently there&amp;rsquo;s been a crop of new VC-funded tools like &lt;a href="https://webflow.com/">Webflow&lt;/a>, &lt;a href="https://bubble.io/">Bubble&lt;/a>, &lt;a href="https://thunkable.com/">Thunkable&lt;/a>, &lt;a href="https://www.adalo.com/">Adalo&lt;/a>, and many more that aim to allow for the creation of general web and mobile apps with much more complex lifecycles and abilities. They&amp;rsquo;re interesting and they show promise but I believe they operate in an uncanny valley-esque situation where they don&amp;rsquo;t actually solve the hard part about building apps making them too difficult for most non-engineers and not useful for existing engineers leading to their TAM being quite small.&lt;/p>
&lt;p>I first noticed this problem with tools designed to simplify the building of tech in high school. Both of my parents own small businesses and I have watched them on more than one occasion struggle to build websites through Squarespace and Wix. It didn&amp;rsquo;t matter that those tools were barely more than templates with customizable sections&amp;ndash; not even flexible enough to be called drag-and-drop&amp;ndash; it was still a challenge for them. After spending hours on a site they&amp;rsquo;d end up with dark font on dark backgrounds, overflowing paragraphs and images, misaligned buttons, etc. I consider both my parents to be smarter than average yet they are certainly not technical and those no-code tools to build simple static pages were still not easy enough. I&amp;rsquo;m not sure either of them would stand a chance with Bubble or Webflow which indicates to me that neither would at least half the population. Beyond just writing the code there are patterns and concepts around building a functional site that they didn&amp;rsquo;t understand at the time which meant their ability to use these no-code tools effectively was limited. In the end they both had someone else build the sites for them.&lt;/p>
&lt;p>Since then both my parents have become more tech-literate and they&amp;rsquo;ve actually become quite capable at times especially when using things like Canva and Wix so I do not think these tools were failures&amp;ndash; their success financially is well established&amp;ndash; it&amp;rsquo;s just that at the end of the day they are used to build simple products. Creating an average web app with the features and capabilities expected by users today is an order of magnitude more complex than creating a static site with Wix. It may be that in time individuals like my parents will learn the concepts around building web apps and be able to use a no-code tool like Bubble effectively but I&amp;rsquo;m not convinced if for no other reason than because most people have no idea how to model data.&lt;/p>
&lt;p>Fundamentally when you take away all the implementation details my job as a software engineer is to design a system to solve a specific problem under certain constraints. This amounts pretty much entirely to:&lt;/p>
&lt;ol>
&lt;li>Defining the shape and transformations of the data model
&lt;ul>
&lt;li>What data is required versus optional?&lt;/li>
&lt;li>What do inputs and outputs look like?&lt;/li>
&lt;li>How does the data transform throughout its lifecycle?&lt;/li>
&lt;li>What relationships exist within the data model?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Defining the characteristics of the system to allow for the necessary data model within our constraints
&lt;ul>
&lt;li>What security is necessary?&lt;/li>
&lt;li>What availability and uptime is required?&lt;/li>
&lt;li>What performance is expected?&lt;/li>
&lt;li>What failure modes are acceptable?&lt;/li>
&lt;li>What should costs be?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>The de-facto way to do the above tasks today is to write code, usually lots of it, which is complex and error-prone and yet it&amp;rsquo;s flexible and expressive and has had decades of smart people creating new languages and libraries and tools to help perform those tasks as easily as possible. I haven&amp;rsquo;t used a no-code tool that measurably improved my ability to perform any of the above tasks and they often make it harder. Often there&amp;rsquo;s no clear data modeling part of the tool at all; if there is then you&amp;rsquo;re probably limited on what types you can use or define. How the data is transformed and manipulated is not easily defined. Properties of the end-system like security and performance and errors are almost always non-existent. Performance and availability are usually just straight up functions of cost for what plan you&amp;rsquo;re using on a given tool and lack granularity.&lt;/p>
&lt;p>The end result is that the difficult part about building full-fledged applications&amp;ndash; the reasons why software engineers get paid so much&amp;ndash; isn&amp;rsquo;t any easier which means it&amp;rsquo;s still a massive barrier to entry for someone who isn&amp;rsquo;t used to doing that sort of engineering. And for someone who is used to doing that sort of engineering it&amp;rsquo;s not a great value prop because that person probably already knows how to code and doesn&amp;rsquo;t find that to be their primary roadblock. To them the no-code tool becomes just another framework or language they need to learn to implement the system they&amp;rsquo;re envisioning and it&amp;rsquo;s less expressive and more proprietary with less skill-transfer than what they&amp;rsquo;re used to.&lt;/p>
&lt;p>No-code isn&amp;rsquo;t destined to fail forever, though. There is certainly a type of person who is smart enough to model these systems and yet doesn&amp;rsquo;t know how to code or who does know how to code but doesn&amp;rsquo;t like to/isn&amp;rsquo;t very good who will find great value in these tools. I just think that&amp;rsquo;s probably a smaller market than most people realize and the success of these tools hinges upon expanding that slice of people. They can do that by trying to attract more non-programmers and teaching them the requisite knowledge around building systems (hard!), or attracting existing engineers by making their tools powerful enough to model systems as robustly as regular code (also hard!). It&amp;rsquo;s this second possibility that excites me, though, especially with things like GPT. As mentioned, writing code is slow, error prone, complex, and hard to maintain. It&amp;rsquo;s a &lt;em>distraction.&lt;/em> I can envision a future where software engineering is quite literally just defining the properties of the system and a mix of AI and program synthesis does the work of actually implementing it. Lastly, I think for existing engineers no-code holds an interesting possibility in the front-end space. If I could design an entire front-end in a visual builder such as Figma but also have the tooling to seamlessly hook it up to my backend, manage state properly, handle data fetching, etc. then I think that has a chance to be wildly successful but nothing I&amp;rsquo;ve tried really nails this yet.&lt;/p>
&lt;p>No-code has a future but I do not think it looks like the current rendition of what we&amp;rsquo;re seeing. At a certain level writing actual code isn&amp;rsquo;t the hard part around building apps and these tools need to lean more into empowering engineers to model their systems effectively while being interoperable. In the end I suspect the winners of this space will be much more low-code than no-code.&lt;/p></description></item><item><title>Goals for 2023</title><link>https://olivergilan.com/blog/goals-for-2023/</link><pubDate>Sun, 11 Dec 2022 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/goals-for-2023/</guid><description>&lt;p>New Year&amp;rsquo;s resolutions are mostly corny and not a very good way to achieve the sorts of lifestyle changes that people hope to achieve with them but it is important to set goals and then take time to reflect on your progress towards said goals at a regular frequency. I like to think of my life in terms of chapters or &lt;a href="https://en.wikipedia.org/wiki/Story_arc">narrative arcs&lt;/a> that usually last multiple years and contain different experiences, lessons, and character developments. Thus my goals generally act more as themes for a given arc along with some specific quantifiable milestones that help me track my progress. Once a year is too infrequent to effectively reflect on my progress and update my milestones but the holidays and the turn of the year is nevertheless a good time to take stock of where I am and where I&amp;rsquo;m headed.&lt;/p>
&lt;p>Currently I&amp;rsquo;m focusing on the following broad areas of my life.&lt;/p>
&lt;ul>
&lt;li>Career&lt;/li>
&lt;li>Health&lt;/li>
&lt;li>Adventure&lt;/li>
&lt;li>Mind&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s start with my career. I work as an engineer at &lt;a href="https://www.getcensus.com/careers?utm_source=workwitholiver">Census&lt;/a> and I fucking love my job. For the first time since middle school I feel like I&amp;rsquo;m not only being challenged but the training wheels are off and I get to run full speed. It&amp;rsquo;s really the perfect situation for me. I spend the majority of my time writing new features, fixing and improving our systems, and learning from my founders and colleagues. Everyone I work with has an equally high IQ as well as EQ making it one of the most exciting groups I&amp;rsquo;ve ever been a part of and I trust our ability to achieve the mission. Success is not a given here and I wake up every day aware that my actions will have a direct effect on the outcome of the company, an experience that stands in stark contrast to my time at Microsoft. While here I&amp;rsquo;m meeting some awesome people that I hope to work with in the future even beyond Census and I am gaining the skills to become a far better engineer and founder. It feels like every week I learn something new that will help me down the road when it comes to starting my own company. So this year for my career I want to&lt;/p>
&lt;ul>
&lt;li>Get involved with interviewing and hiring&lt;/li>
&lt;li>Learn about LLMs and how they work because AI might change how my career looks completely&lt;/li>
&lt;li>The rest of the goals here are redacted ;)&lt;/li>
&lt;/ul>
&lt;p>When it comes to my health my goals follow from last year. I want to continue healing my gut and putting on the weight I lost during the two years of my illness in 2019-2021. I currently weigh about 145 lbs, up 10 lbs from a year ago, with a height of 5'10 and by next year I want to weigh at least 155 lbs putting me just shy of my 160 lbs body-weight pre-illness. In terms of general fitness I am pivoting from focusing primarily on strength training and instead I want to increase my endurance and stamina as well as my flexibility. Gut health, stamina, and flexibility will be the core foundations upon which I build an unbreakable body. So this year for health I want to&lt;/p>
&lt;ul>
&lt;li>Weigh 155 lbs by EOY&lt;/li>
&lt;li>Run 10 miles at a pace of 8 minutes a mile&lt;/li>
&lt;li>Be capable of performing a split&lt;/li>
&lt;li>Perform reps on the ab wheel from a standing position&lt;/li>
&lt;/ul>
&lt;p>When it comes to adventure I have definitely been disappointed the past few years. COVID robbed two key years of my life and I graduated college a semester early just to have Omicron bar me from traveling throughout Asia as planned. And then I ended up moving to NYC (which was a bit of an adventure) but I grew up around here my whole life. I need to get out of the tri-state area and go see new places, experience different cultures, and meet different people. With COVID gone and my health mostly back to normal I want to put more emphasis on doing fun shit and injecting some chaos into my life before I pick up too many obligations and settle down. My character arc demands it. Having said that my career right now is crucial. I simply cannot be backpacking across Europe or working remotely in Asia while I&amp;rsquo;m grinding and trying to build something successful at Census. There are other things I can do, though, like&lt;/p>
&lt;ul>
&lt;li>Live in San Francisco for a month and work out of Census HQ&lt;/li>
&lt;li>Travel alone to a country that speaks a foreign language&lt;/li>
&lt;li>2-day motorcycle trip across the Moroccan desert&lt;/li>
&lt;li>Wild card adventure&lt;/li>
&lt;/ul>
&lt;p>The last big area of focus I want to touch on is my mind and more specifically, my communication. This primarily encompasses my writing and this blog (but also on rebuilding the confidence I lost the past three years). I&amp;rsquo;m happy I started this blog last year and I want to start publishing more often and more consistently. Writing is one of the few things that I simply cannot do while multitasking so to write more consistently I&amp;rsquo;ll have to be more disciplined about dedicating time to step back from everything else that&amp;rsquo;s going on and focus just on writing. This is a net positive. I wish for this blog to be more than just a technical resume-esque website and instead I want it to better reflect my mind and ideas, even the non-technical ones. I want to write about my various interests and what I&amp;rsquo;ve learned. I want to worry less about only posting complete thoughts and focus more on just posting what I think is interesting. At the end of the day this blog serves as a public extension of my private journal and I want to increase the surface area of that which I show, NOT because I want to build an audience (this blog literally has zero analytics of any kind and I am not interested in being a &amp;ldquo;creator&amp;rdquo;) but because I think that&amp;rsquo;s what makes the internet interesting. To that end I want to&lt;/p>
&lt;ul>
&lt;li>Post at least once a month on this blog&lt;/li>
&lt;li>Share my writing more publicly&lt;/li>
&lt;li>Add a blogroll of other independent blogs I am inspired by&lt;/li>
&lt;li>Write some non-technical posts about topics such as education, my illness, etc.&lt;/li>
&lt;/ul></description></item><item><title>I Was Wrong</title><link>https://olivergilan.com/blog/i-was-wrong/</link><pubDate>Sun, 04 Dec 2022 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/i-was-wrong/</guid><enclosure url="https://olivergilan.com/images/d2_neural_net.png" type="image/jpeg"/><description>&lt;p>I&amp;rsquo;m pretty proud of the fact that last year around October I pulled out of my crypto positions and largely switched my stance regarding the technology. For months at every party and get-together with other tech folks I was the only one in the room voicing my skepticism about the industry. I have been vindicated for the time being but the victory is sour because as I was excitedly exploring crypto to its natural conclusion I was neglecting and horribly mistaken about an adjacent industry: AI. When AI started to build hype around 2012 with things like IBM&amp;rsquo;s Watson and then Google Deepmind it was very exciting. I did Google&amp;rsquo;s machine learning course and learned the concepts behind those networks but came away unimpressed. It felt like powerful curve fitting with some very narrow applications but it certainly wasn&amp;rsquo;t anywhere close to general intelligence. Nevertheless the hype grew and startup after startup popped up with &amp;ldquo;AI&amp;rdquo; in the name promising magical results. Most of these startups weren&amp;rsquo;t even attempting to use neural networks to solve their problems&amp;ndash; a fact that more than one founder has openly admitted to me&amp;ndash; and the hype didn&amp;rsquo;t seem to be leading anywhere.&lt;/p>
&lt;p>That doesn&amp;rsquo;t mean there weren&amp;rsquo;t cool results; there certainly were but they were mostly academic or they seemed to be indicative of Moore&amp;rsquo;s law and how far computing had come as opposed to some fundamentally new type of software. AI became a buzzword and anyone using it was either talking about social media recommendation engines, self driving, or straight up bullshitting. Sometimes all 3.&lt;/p>
&lt;p>So I lost interest. It seemed like unjustified hype and then it seemed to plateau for a number of years and every time someone brought up the idea of AI to me I dismissed it and its potential impact. Candidates like Andrew Yang ran on a platform of increasing automation and how AI would replace jobs and I simply didn&amp;rsquo;t buy it. I still don&amp;rsquo;t fully buy it, for what it&amp;rsquo;s worth, but I now see a viable path to mass automation (whether this is catastrophic for workers or instead creates more abundance than humanity has ever seen is yet to be seen). Whenever it was brought up it was in the context of AGI or solving self driving, two problems that weren&amp;rsquo;t even remotely close to being solved but in dismissing those usecases I completely missed the slow and steady progress taking place in the field. Then things began rapidly and consistently changing with the release of GPT-3.&lt;/p>
&lt;h3 id="gpt--the-rise-of-llms">GPT &amp;amp; The Rise of LLMs &lt;a class="anchor" href="#gpt--the-rise-of-llms">
#
&lt;/a>&lt;/h3>&lt;p>GPT-3 was released in June of 2020 and it was obviously different than any other &amp;ldquo;AI&amp;rdquo; I had seen. It&amp;rsquo;s capability to respond to a variety of prompts and the quality of the responses was clearly on a different level even though it was still limited. It did fail for certain topics and was happy to spout impressive-sounding babble that didn&amp;rsquo;t actually mean anything and any attempt to have an ongoing conversation would quickly break down. Still, it forced me to step back and ask: is this going to change the world? My response at the time was no because of GPT-3&amp;rsquo;s obvious limitations and my implicit assumption that we were in for another decade-long plateau in the power of these models.&lt;/p>
&lt;p>Then DALL·E was released at the start of 2021 and a year later DALL·E 2 and I was blown away by it&amp;rsquo;s ability to understand certain concepts and synthesize images based off that. It was the first time I began to wonder if maybe there was some fundamental understanding of concepts happening in these models. But I thought to myself: this is impressive but is it practical? How expensive is it to train such a model? How accessible is this tech really? But then Midjourney and Stable Diffusion followed quickly after which blew that notion away. Now ChatGPT&amp;ndash; which is basically just the GPT-3 model with some filters and context tracking&amp;ndash; has displayed a level of intelligence and understanding that I never thought I&amp;rsquo;d see from a machine in my lifetime. And to top it all off, GPT-4 is rumored to be almost ready and is expected to be as a big a leap from GPT-2 to GPT-3. It&amp;rsquo;s safe to say my implicit assumption of a plateau in AI tech was wrong and things seem to instead be speeding up.&lt;/p>
&lt;p>Admittedly at the time of writing I don&amp;rsquo;t actually know how these models work at all. Back in the machine learning craze about 8 years ago I did some Google machine learning courses and learned the concepts around those systems. From what I&amp;rsquo;ve heard basically everything from back then is outdated and these systems operate under completely different principles. It&amp;rsquo;s very possible we&amp;rsquo;re not even scratching the surface of what these new models are capable of and this may just be the beginning of exponential growth in capability for LLMs. Such a thought is truly frightening.&lt;/p>
&lt;p>It&amp;rsquo;s worth mentioning that I &lt;em>still&lt;/em> don&amp;rsquo;t believe these models are conscious, whatever consciousness even is, but this brings me to my second mistake. I didn&amp;rsquo;t believe we were headed to general intelligence in the sense that we could create a computer that thinks like a human but that&amp;rsquo;s sort of missing the forest for the trees. If GPT becomes 10x more powerful than it is today it doesn&amp;rsquo;t really matter if it&amp;rsquo;s &amp;ldquo;conscious&amp;rdquo; or not because it&amp;rsquo;ll still be capable enough to perform a bunch of human functions and significantly affect the structure of society as we know it. In fact the whole question of consciousness has started to feel ancillary and while I have my theories around where consciousness comes from and how it can possibly be created in a machine it all feels largely irrelevant right now. It seems to be the case that consciousness is not a prerequisite for intelligence and instead the opposite is probably true.&lt;/p>
&lt;h3 id="emergence-of-ai--crypto">Emergence of AI &amp;amp; Crypto &lt;a class="anchor" href="#emergence-of-ai--crypto">
#
&lt;/a>&lt;/h3>&lt;p>As an aside, I find it amusing that we are seeing this emergence of AI in parallel with the emergence of crypto. Both technologies started with niche groups of highly technical individuals building new technology to solve a problem. During the last crypto cycle, though, we saw it really grab hold with &amp;ldquo;finance bros&amp;rdquo; and entrepreneur types; the type of person who likes the bling and flashiness of a place like Miami and envisions a future where they are the founder of the next big consumer social startup. This isn&amp;rsquo;t a knock against anyone of such description but the result was that everyone I knew in crypto fell into two buckets: extracting as much wealth as possible through financial market mechanisms like arbitration (or outright scams if they werent technical) or they were desperately trying to build the big usecase for crypto. Social apps, gaming, emerging market loans, ads, etc. Especially near the end it felt like everyone had an idea on how to make crypto useful in the real world and everyone wanted to claim that throne.&lt;/p>
&lt;p>In contrast, the AI space still feels overwhelmingly technical. It&amp;rsquo;s as though the entrepreneur-lifestyle type of person who 6 years ago would have started a company with AI in the name just to attract investors has since pivoted to crypto and they haven&amp;rsquo;t yet pivoted back. Maybe they&amp;rsquo;re burnt out from going all in on an industry that doesn&amp;rsquo;t seem like it&amp;rsquo;ll pan out, maybe higher interest rates prevents this behavior, or maybe they just haven&amp;rsquo;t caught on yet to whats been happening with with these new models but everyone I know who&amp;rsquo;s interested in AI is interested in building the models themselves not in end-user applications. As a result I think there&amp;rsquo;s a lot of alpha to be had right now in building the actual customer-facing tools powered by the models instead. We will absolutely see a massive crop of AI startups in the immediate future but for now the low hanging fruit is all still there.&lt;/p>
&lt;h3 id="pitfalls-of-ai-startups">Pitfalls of AI Startups &lt;a class="anchor" href="#pitfalls-of-ai-startups">
#
&lt;/a>&lt;/h3>&lt;p>I do think there are some pitfalls to watch out for if you plan on creating a product built around AI. The first is with the models themselves. GPT is incredibly impressive yet obviously limited and prone to just making stuff up or spitting out senseless babble. It would be a challenge to trust its output with anything critical but also using an automated system to sanitize or correct the output is very difficult because it&amp;rsquo;s generally completely unstructured.&lt;/p>
&lt;p>Secondly, and the biggest risk in my opinion, is the platform risk of relying on a company like OpenAI. We just saw how a company as big as Facebook could be brought to its knees because of the decision by executives at Apple. Building on top of GPT would represent an even bigger platform risk than that and absolutely needs to factor in to any business decision and it&amp;rsquo;s something that should scare the shit out of any startups trying to use OpenAI&amp;rsquo;s tools. The way around this is to only use open source models like Stable Diffusion and Midjourney&amp;ndash; but there&amp;rsquo;s no guarantee there will be any comparable open source models for something like GPT-4 and later models&amp;ndash; or to just accept the risk and dedicate a significant amount of revenue and resources to building your own models right from the start. I&amp;rsquo;m willing to bet we&amp;rsquo;ll see a &lt;em>lot&lt;/em> of AI companies that end up being successful going that route. If you can start with GPT and build a valuable product and start generating revenue you can then use that revenue to build in-house models that let you deleverage the platform risk. That&amp;rsquo;s easier said than done, though. It remains to be seen how easy building such models will be. It&amp;rsquo;s possible that once it&amp;rsquo;s demonstrated that such a model can be built it then becomes easy to reproduce and that most of the cost is in the initial research and experimentation.&lt;/p>
&lt;p>There&amp;rsquo;s a third less obvious risk but it&amp;rsquo;s that the space might simply be moving too fast to reliably build a customer-facing product. Maybe GPT-4 comes out and you immediately start building a product powered by it. A year later you&amp;rsquo;ve shipped the first version and acquire some customers but then another year later GPT-5 comes out and completely commoditizes your abilities. Would you be able to simply upgrade models? Are they plug-and-play? It&amp;rsquo;s probably not so straightforward which means that building right now introduces a risk of becoming outdated very quickly. This is a pretty unique risk but one that should be considered.&lt;/p>
&lt;h3 id="evaluating-potential-ai-startups-ideas">Evaluating Potential AI Startups Ideas &lt;a class="anchor" href="#evaluating-potential-ai-startups-ideas">
#
&lt;/a>&lt;/h3>&lt;p>One of the interesting phenomenons I&amp;rsquo;ve noticed with GPT and other LLMs is they are extremely impressive and yet it is very difficult to envision just how these models can be or might be used. The obvious low hanging fruit is there: AI profile pictures and picture book illustrations with DALLE, musical lyrics, poetry, different flavors of chatbots with GPT, etc. Those are certainly valid usecases yet none of them are venture-scale and I&amp;rsquo;ve had trouble of thinking about what can be done that &lt;em>is&lt;/em> venture-scale. I&amp;rsquo;ve been using the following framework to evaluate what sort of products and businesses would work well with a GPT-like model:&lt;/p>
&lt;p>&lt;strong>Domain w/ Clear Boundaries&lt;/strong>
Avoid completely open ended domains like &amp;ldquo;browsing the internet.&amp;rdquo; This just feels like a problem space that is too vast to reliably and consistently engineer these models to handle properly. If you are going to build an AI product to browse the internet instead have it focus only on a select number of websites and with a set number of actions. A digital assistant could reliably navigate to Google Calendar and manage a schedule. Then again, if it&amp;rsquo;s too simple of a domain then you &lt;em>probably&lt;/em> don&amp;rsquo;t even need an LLM and would see better results with just plain ol' software. Going back to the previous example, once you&amp;rsquo;ve captured user intent it&amp;rsquo;s trivial to use Google Calendar&amp;rsquo;s API to just automate someone&amp;rsquo;s calendar without any AI involved.&lt;/p>
&lt;p>&lt;strong>Pick Your Edge Cases Wisely&lt;/strong>
Any domain that is simple enough to not have any edge cases might be too simple to justify using something like GPT. Therefore you probably want to pick a domain with some type of long tail of edge cases but you should evaluate these cases very carefully and pick the problems where the edge cases aren&amp;rsquo;t critical. This is why I don&amp;rsquo;t like self driving as a problem space. There&amp;rsquo;s a seemingly infinite number of edge cases and getting it wrong on any of them can lead to catastrophic outcomes. Similar with something like a therapy chatbot. You only need it to mess up once and it creates dramatic harm.&lt;/p>
&lt;p>&lt;strong>Reduce Scarcity&lt;/strong>
One funny observation about GPT, DALL-E, Stable Diffusion, etc. is that so far they&amp;rsquo;ve really only reduced the scarcity of things that are alread post-scarcity. Sure making digital art more accessible reduces its scarcity but it&amp;rsquo;s not like there was a drought of good artists. Similarly generating 1 paragraph blurbs isn&amp;rsquo;t exactly reducing the scarcity of anything. Even at its best generating song lyrics or poems etc. isn&amp;rsquo;t dramatically reducing the scarcity of whatever its generating. It&amp;rsquo;s not as though you can&amp;rsquo;t be successful making music using GPT and you can probably even make a GPT-based product designed to help musicians but it doesn&amp;rsquo;t feel like a very defensible position and it also won&amp;rsquo;t change the world. Of course, changing the world is overrated and not everything has to be venture-scale but for the sake of this excercise it&amp;rsquo;s worth keeping in mind.&lt;/p>
&lt;p>So the real question going forward is: can this product effectively reduce the scarcity of something with extreme value? And can it do that by effectively navigating a clearly defined domain consistently enough with much greater efficiency than human counterparts? And when it messes up are those mistakes easy to spot and correct preferrably in an automated fashion? It&amp;rsquo;s definitely difficult to think about problems that fit all those criteria but they exist simply because of P != NP. That is, we currently have tons of humans doing jobs that are really tedious and manual and very automatable with AI and otherwise. Actually doing the work takes NP time but checking that the solution for the work is correct can happen a lot faster. So even if your product requires human oversight it can still potentially provide massive efficiency gains. Hint: I think paralegals and investment banking analysts fit this criteria perfectly and you could probably create a GPT-based product to have one individual do the work of 20 in these fields.&lt;/p>
&lt;p>I will not personally be pursuing any ideas around GPT right now but one of my big goals this year is to better understand the tech behind these large language models. Currently my stance is that there&amp;rsquo;s probably a 30% chance that these models end up being a more impactful invention than the iPhone and the internet combined. There&amp;rsquo;s still a massive chance they turn out to be impressive and fun and even useful but not revolutionary and yet&amp;hellip; 30% is quite a big chance to upend the world.&lt;/p></description></item><item><title>My Brain is Single-Threaded</title><link>https://olivergilan.com/blog/single-threaded-brain/</link><pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/single-threaded-brain/</guid><enclosure url="https://olivergilan.com/images/Single_Road.jpg" type="image/jpeg"/><description>&lt;p>I used to multitask a lot. My girlfriend in college would enter my room and see me gaming on one monitor, watching NFL Redzone on another, and completing school assignments on my laptop. I&amp;rsquo;ve since consciously and aggressively reduced the number of tasks I work on at any given time, especially as those tasks require deeper and more intense focus. This change was a response to a gradual realization that my brain is &amp;ldquo;single-threaded&amp;rdquo; in nature and any meaningful work requires minimizing costly context switching.&lt;/p>
&lt;p>I began really noticing it Junior year of college once I got to higher level maths and programming courses. When completing assignments I often found myself turning off everything including any music playing and working in complete silence, sometimes even with my phone locked away in a drawer if necessary. I was being challenged in a way that required genuine focus without distraction. It&amp;rsquo;s not that I physically couldn&amp;rsquo;t have a football game on in the background it&amp;rsquo;s just if I did I wouldn&amp;rsquo;t have noticed a single thing happening in it and if I did then it meant I had lost my flow state.&lt;/p>
&lt;p>It still wasn&amp;rsquo;t very often when I had assignments that challenged me such as a that so I didn&amp;rsquo;t take much conscious action but then I graduated and joined Microsoft and now Census and it&amp;rsquo;s all different. The scale and complexity of the systems I am working on and the pace at which things change is incredibly rapid compared to school. I&amp;rsquo;m being pushed so much harder every day than I have the past decade and it&amp;rsquo;s a welcome change. Especially at Census the agency I&amp;rsquo;m granted and the impact I can have leaves me with a wide open field of extremely creative work and it can only really be done effectively when focusing.&lt;/p>
&lt;p>But what does it mean to be single-threaded? It means that at any given time the processor (your brain) can only make progress on one active task. To work on two tasks at once it needs to switch back and forth. Every time it switches the entire context of what task its working on needs to change. This doesn&amp;rsquo;t matter if the cost for switching contexts is low and for the past decade most of my &amp;ldquo;work&amp;rdquo; in school has had a low cost. When I would watch football, play games, and do schoolwork it wasn&amp;rsquo;t that I was actually doing all three at once it was simply that the cost of switching my attention rapidly from a game to a tv screen to a worksheet was negligible. In fact if you find that you can switch between activities rapidly without burden it might be a sign that those activities aren&amp;rsquo;t worth doing. Or at least they might not be very &lt;em>fulfilling.&lt;/em>&lt;/p>
&lt;p>I have tried coming up with a good heuristic for what makes a task costly to context switch in and out of but I have been unsuccessful. My best approximation is that the cost to switch contexts increases as the complexity and novelty of the task increases. It has to be sufficiently complex because if it wasn&amp;rsquo;t you wouldn&amp;rsquo;t need to devote your full attention to it but it also needs to be novel. Programming can be extremely complex but because I&amp;rsquo;m very familiar with it&amp;ndash; it&amp;rsquo;s less novel&amp;ndash; it&amp;rsquo;s easier for me to switch into a programming context. My brain is familiar with the state of mind required for programming so it&amp;rsquo;s easier to switch from a natural resting state into it. In fact because I program so much the natural resting state of my mind has gotten a lot closer to that of when I&amp;rsquo;m programming. The times when programming has a high cost to context switch is when I&amp;rsquo;m analyzing a new system or a new part of the codebase or debugging something and I need to understand all the interactions happening. In other words, when I&amp;rsquo;m doing something novel. Similarly when writing blog posts such as these it&amp;rsquo;s far more unfamiliar and therefore far more costly for me to switch contexts. It can take hours for me to switch into the right mindset for writing&amp;ndash; it quite literally feels like my neurons are firing in a different direction&amp;ndash; so when I finally get into that flow state if I lose it I&amp;rsquo;m back to square one. That&amp;rsquo;s a massive cost and it&amp;rsquo;s entirely because writing is unexpectedly complex and it&amp;rsquo;s also not something I do very often.&lt;/p>
&lt;p>There&amp;rsquo;s no real takeaway here, just a development in how I approach work. The more important a task is the more I try to focus only on it. &lt;a href="https://www.bennadel.com/blog/4352-only-solve-one-new-problem-at-a-time.htm">Solve one problem at a time&lt;/a>. Get comfortable not jumping around to different tasks even when you hit a dopamine plateau. Get comfortable not looking at your phone in lulls. Learn how to not even think about whether you should look at your phone (that&amp;rsquo;s the hard part). As I&amp;rsquo;ve grown more conscious of the single threaded nature of my brain I&amp;rsquo;ve realized the need to curate what tasks are running on it more carefully because it&amp;rsquo;s the only way to achieve meaningful deep work that I find fulfilling.&lt;/p></description></item><item><title>Internal Knowledge Systems</title><link>https://olivergilan.com/blog/internal-knowledge-systems/</link><pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/internal-knowledge-systems/</guid><enclosure url="https://olivergilan.com/images/Mountain_of_Knowledge.jpg" type="image/jpeg"/><description>&lt;p>Whenever a group of people work together there exists between them a flow of information which can ultimately determine how successful that group is at accomplishing a specific mission. Many dysfunctional organizations have broken or inadequate flows of information at their core and make poor decisions because of it. For an organization to succeed at scale it needs to effectively transmit information in multiple dimensions: from its leadership to the individuals at the edges of the organization, from the edges of the org to its leadership, between teams working in tandem, between teams working orthogonally, etc. You can think of an organization of individuals in much the same way as that of a living organism with millions of cells all receiving various signals and pieces of information informing them to act in a certain manner. The organisms that are successful are the ones that get the right signals to specific cells so that they perform the right actions at any given time to benefit that organism. All sorts of information needs to get to the right place at the right time with sufficient accuracy to allow every individual in the organization to make the right decisions at any given point in time.&lt;/p>
&lt;p>The flow of information manifests itself in various ways with the default being tribal knowledge held by individuals. This informal repository of personal knowledge is augmented by internal message boards, company memos, documentation, notes, etc. The vast majority of organizations pay no mind to this dynamic and as a result most information in any given institution is what Samo Burja calls &lt;a href="https://samoburja.com/intellectual-dark-matter/">Intellectual Dark Matter&lt;/a>. Successful organizations and functional institutions are aware of their flow of information and take conscious steps to engineer it in a variety of ways. When it comes to startups and tech teams having an explicit formalized internal knowledge system that reduces IDM is crucial for maintaining efficiency and productivity at scale. I am interested in exploring what the ideal system looks like for tech teams in particular and the following is my working theory on what such a system looks like.&lt;/p>
&lt;h2 id="goals">Goals &lt;a class="anchor" href="#goals">
#
&lt;/a>&lt;/h2>&lt;p>The first step to building an effective internal knowledge system is understanding what the goals are. For different institutions this could mean different things but for my team at Census the goals of creating this system are as follows:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Increase Velocity&lt;/strong>&lt;br>
It&amp;rsquo;s almost a cliché at this point but startups want to move fast. As we scale and add new engineers we want to maintain our productivity and continue to ship high quality code frequently. The faster new members to the team can get set up, grok the codebase, and start contributing the better. Likewise, the faster a team member can look at a new part of the codebase or grasp a new assignment and ship code the more value will be created.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Increase Quality&lt;/strong>&lt;br>
Oftentimes the tradeoff for speed is quality. As we grow we want Census to become &lt;em>more&lt;/em> stable and &lt;em>more&lt;/em> reliable and &lt;em>more&lt;/em> performant all while we add new engineers to the team, create new features, and onboard new customers. To do this while maintaining velocity we need as many engineers as possible to have the relevant information at their fingertips to make informed decisions autonomously.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Reduce Fragility&lt;/strong>&lt;br>
As systems and projects become more complex they tend to become more brittle. This is often due to more critical knowledge being known only by a select few individuals who have been there since the beginning and are then relied on when issues arise or changes need to be made. This is an instance of intellectual dark matter and can threaten the long term viability of a project. The sooner this knowledge is formalized and distributed the more pain we can avoid down the line as we scale.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Reduce Mistakes &amp;amp; Errors&lt;/strong>&lt;br>
As we scale the goal is to have our usage increase an order of magnitude more than our errors. If you 10x your customer count but only 2x your incidents then your codebase is actually becoming more stable despite an increase in absolute error count. When the project is accurately documented it is easier to spot missing or innacurate details and fix them.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Increase Autonomy&lt;/strong>&lt;br>
As more engineers on the team learn and think about the overall state and goals of the project the more they will be empowered to make small but important decisions correctly on their own. This increases the autonomy of the average engineer which increases productivity, increases quality, and creates a more enjoyable developer experience.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="the-effective-internal-knowledge-system">The Effective Internal Knowledge System &lt;a class="anchor" href="#the-effective-internal-knowledge-system">
#
&lt;/a>&lt;/h2>&lt;p>The term &lt;em>internal knowledge system&lt;/em> is fancy and useful when discussing this theoretically but in practicality this is pretty much just a system of documentation. Before I go into how we plan to solve this problem at Census allow me to throw another list at you. When thinking about this problem I&amp;rsquo;ve read about and observed many different internal documentation systems and I&amp;rsquo;ve seen the problems multiple teams face with them. Below is what I believe to be some key characteristics of an effective system for tech teams.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Declarative&lt;/strong>&lt;br>
The documentation should accurately describe the present state and goals of the system it is documenting. The past states of the system should be observable through a versioning mechanism. And above all it should clearly state what the overall goals for the system are so that members of the team are oriented around what changes need to be made to bring the system from its current state to its desired state.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Structured&lt;/strong>&lt;br>
I used to think it was enough for engineers to just put an effort into writing docs. I now know this to not be sufficient. Documentation needs to be structured in such a way that information has a logical place to live so that other members of the team immediately know where to look to find a given piece of knowledge.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Searchable&lt;/strong>&lt;br>
Documentation should be easily searchable. This means that documentation mediums like video or audio tend to do a poor job because it is hard to organize and skim a video for relevant information. You can &lt;code>ctrl+f&lt;/code> a 10,000 line written document (or 100 10,000 line documents) faster than you can skim a 5 minute video.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Relevant &amp;amp; Versioned&lt;/strong>&lt;br>
Avoid including everything. The core documentation system should do its best to not drown the signal in endless noise. Ideally when it comes to low level implementation details the code should be self documenting and then just focus on higher level details and the few low level details that really matter. I used to think just documenting everything is the way to go and it might be better to have too many docs than too little but I&amp;rsquo;ve come to appreciate knowing when to &lt;em>not&lt;/em> include something. At the very least there should be a mechanism to easily ignore the cruft and see only the core that matters.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Permissioned&lt;/strong>&lt;br>
Not everyone should or needs to have access to all the information. This is less relevant at startups but as a company scales the need to partition and segment information becomes crucial. A proper internal knowledge system should make it easy to ensure that only those with proper access can view any given piece of information.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="implementation">Implementation &lt;a class="anchor" href="#implementation">
#
&lt;/a>&lt;/h2>&lt;p>Okay so how do you actually build an effective internal knowledge system? Well I&amp;rsquo;m not quite sure but I plan on doing this for Census in the coming months so I&amp;rsquo;ll make sure to write another post explaining how that goes. My working theory so far is as follows: we already have a bunch of documentation but it&amp;rsquo;s scattered and unstructured. Most of it is in Notion but without any organization so the plan is to start there.&lt;/p>
&lt;p>I&amp;rsquo;ll begin with an overall directory structure as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-markdown" data-lang="markdown">.
|- Getting Started/
|- Architecture/
|--- Infra/
|--- Module 1/
|--- ...
|- Team 1/
|--- Style Guide
|--- ...
|- Team 2/
|- Team 3/
|- Ops/
|--- Planning/
|----- RFC/
|----- ...
|--- Deployments
|--- Git &lt;span style="color:#a61717;background-color:#e3d2d2">&amp;amp;&lt;/span> Github Workflow
|--- Logs &lt;span style="color:#a61717;background-color:#e3d2d2">&amp;amp;&lt;/span> Debugging
|- OnCall/
|--- Runbook/
|- Uncategorized/
&lt;/code>&lt;/pre>&lt;/div>&lt;br/>
&lt;p>I&amp;rsquo;ve intentionally kept out a lot of the subsections for each directory but each top-level directory should have an internal structure as well. You can think of this top level structure as a top-down approach but another approach is to take all your existing documents and group them together as leaf nodes creating gradually bigger groups from the bottom up. I think the latter approach is ultimately the best way to create a good system that fits your specific knowledge but the above structure is a solid generic starting point for most small engineering teams.&lt;/p>
&lt;p>Most of it is self-explanatory but to quickly go over it, the &lt;code>Getting Started&lt;/code> directory should hold all the info for a new member to the team to onboard including things like local environment setup, high level concepts, important tools, git flows, etc. &lt;code>Architecture&lt;/code> contains information regarding the infrastructure like cloud resources, service diagrams, etc. as well as sections for logical code modules that clearly explain how different parts of the codebase work. Then each team gets its own directory where they can outline team specific style guides, planning sections, common patterns, etc. This works because Census only has 3 engineering teams right now and they all share one repository but these might be unnecessary for your situation. &lt;code>Ops&lt;/code> holds all the information around&amp;hellip; you guessed it, ops! Things like deploying, planning, etc. &lt;code>OnCall&lt;/code> should have all the information needed for an engineer to successfully manage a week on call. Finally &lt;code>Uncategorized&lt;/code> is for any docs or info that doesn&amp;rsquo;t immediately fit into one of the existing buckets. This will happen and that&amp;rsquo;s fine; building this system is an iterative process. As the uncategorized information grows we&amp;rsquo;ll create new sections, shift old sections around, and try to reduce the uncategorized queue.&lt;/p>
&lt;p>Ideally we&amp;rsquo;ll get to a point where every section and piece of info has a unique number associated with it, different sections have different structured formats to make it easy to write new documents, every piece of information has a specific place to live, and finding any needed piece of information is effortless.&lt;/p>
&lt;p>Keep in mind that this won&amp;rsquo;t all happen overnight and these sections will grow and change. Initially it can even be painful to organize the docs because the existing information can feel overwhelming and older members on the team might have muscle memory for where certain information lives even if there&amp;rsquo;s no intuitive reason for it to live there. That muscle memory will be broken and new habits will need to be formed. In the long run it should make life easier though and I&amp;rsquo;ll write a follow-up to examine how this worked for us at Census.&lt;/p></description></item><item><title>Prioritizing Efforts</title><link>https://olivergilan.com/blog/prioritizing-efforts/</link><pubDate>Fri, 26 Aug 2022 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/prioritizing-efforts/</guid><enclosure url="https://olivergilan.com/images/Strategy.jpg" type="image/jpeg"/><description>&lt;p>Fast, a one-click checkout payments startup was founded in March 2019. In November of that year they raised a $2.5M seed round and then 5 months later they raised a $20M Series A led by Stripe. Their headcount grew rapidly and less than a year after raising their A they raised a monster $102M Series B round. Everything was trending in the right direction and in Februrary 2022 they announced they were looking to double their headcount by the end of the year. 2 Months later the company went bankrupt and shut down. There are many reasons why Fast imploded in such a spectacular fashion and without knowing all the information the best I can do is speculate but I believe their problems stemmed from poor prioritization.&lt;/p>
&lt;p>The most important task for the leadership team of any startup is to effectively prioritize work. Moving fast and being productive isn&amp;rsquo;t enough if it&amp;rsquo;s not going towards solving the right problems and focusing on the wrong problem once or twice could be enough to kill a young company. During the past few years where money was cheap and plentiful there was more room to experiment, pivot, and make mistakes with prioritization but that luxury is over for the foreseeable future. As the funding markets tighten and runways shorten I predict the companies that more effectively prioritize their efforts will win out.
On the surface this seems obviously true but in the day-to-day of a startup grind it can be deceptively difficult to know what work is the most important, especially as the company grows and the number of stakeholders&amp;ndash; all with issues most important to &lt;em>them&lt;/em>&amp;ndash; vie for attention. My CEO at Census gave me the framework for how he deals with the problem of prioritization: &lt;strong>focus on the work that most effectively derisks the grand vision.&lt;/strong>&lt;/p>
&lt;p>Think of it this way: when starting a company there is inevitably a grand vision for what you want it to become. This vision is what you want the company to look like in 10 years when it&amp;rsquo;s mature and has all the bells and whistles, integrations, market dominance, culture, etc. To get from nothing to that grand vision requires a lot of time and effort and throughout that journey there will be a number of risks that could prevent the vision from ever becoming a reality. Your job as a leader is to discern which risks are greatest at any point in time and focus the efforts of the business on overcoming those risks. As your company grows the amount of risks will generally increase but the severity of any given risk most likely decreases.&lt;/p>
&lt;p>For example, in the beginning when all you have is an idea the biggest risk is that it&amp;rsquo;s just a bad idea. If your idea isn&amp;rsquo;t valuable then it doesn&amp;rsquo;t matter if you do everything else right you will be unsuccessful which is why investors will always ask what sort of market validation you have done. By speaking to potential customers and experts in the field you can overcome this risk by getting an understanding of the market and its needs. But once you overcome that initial risk and you determine there&amp;rsquo;s a need for whatever you want to build then you have another risk: are people willing to pay you for your solution and how much? This is similar to the first step but subtly different in the fact that a lot of people will happily say they need a solution to a given problem and they might even say they&amp;rsquo;re willing to pay for it but when it comes time to fork over money it&amp;rsquo;s a whole different story. Customers happily willing to pay for a product or service is the so-called &lt;em>Product Market Fit&lt;/em> that every startup wants to achieve and it&amp;rsquo;s the most important risk any new company must overcome initially.&lt;/p>
&lt;p>Every company is different but most startups share some big risks that are worth thinking about:&lt;/p>
&lt;ul>
&lt;li>Do people want your product?&lt;/li>
&lt;li>Will people pay for your product?&lt;/li>
&lt;li>Can you build the product?&lt;/li>
&lt;li>Can you manage a growing team?&lt;/li>
&lt;li>Can you sell to customers?&lt;/li>
&lt;li>Will you run out of capital?&lt;/li>
&lt;li>Can you expand the market?&lt;/li>
&lt;li>Can you capture the market?&lt;/li>
&lt;li>Can you scale?&lt;/li>
&lt;li>Can you be profitable?&lt;/li>
&lt;/ul>
&lt;p>As you grow the risks will change and multiply but be less severe individually. Whereas not having PMF can singlehandedly destroy a company later risks such as regulatory risks, culture changes while scaling, technical debt, unit economics, distribution, competitors, etc. are less likely to be the sole downfall of a company. An important distinction is that the &lt;em>risk&lt;/em> in question is not necessarily about overall risk to individuals in the company but more about the vision itself. If you&amp;rsquo;re a young but growing company and you get a buyout offer technically the risk to you as an individual would basically be brought to near zero because an exit event like a buyout could result in becoming financially independent and therefore losing personal risk. Being acquired by the wrong company, however, could mean the original mission is now less likely than ever to materialize. This isn&amp;rsquo;t necessarily a bad thing and the vision for a company can certainly change over time but it&amp;rsquo;s worth keeping in mind when assessing what that real goal is and what efforts should be focused on to best get you there.&lt;/p>
&lt;p>So where do I see people make mistakes with this? I speak to a bunch of young founders and entrepreneurs and quite often they seem to be following a template for building a company: they have an idea, pitch it to investors, give away about 20% of their company to raise an initial seed round, immediately hire a team of engineers and a designer, and then start building. That &lt;em>might&lt;/em> be the right set of moves to make for your given situation but often times it&amp;rsquo;s really not necessary to do all that. Fundraising is an opportunity to overcome the risk of running out of capital but if you can validate a market, build an MVP, and start generating revenue with little capital then there&amp;rsquo;s not much need to raise money as you&amp;rsquo;re just giving away more equity than necessary. But maybe you don&amp;rsquo;t want to risk your own money when you can risk investor&amp;rsquo;s money and maybe you can&amp;rsquo;t build the MVP on the side while working a full time job so you need some money to pay yourself while you work on a prototype. In that case raise money and eliminate that risk but then there&amp;rsquo;s no need to suddenly hire a whole team. Adding more cooks to the kitchen does &lt;em>not&lt;/em> make it easier or faster to build a product in the early stages so you should ask yourself: &lt;em>why am I hiring this person? Is it because I just raised money and feel like this is the &amp;ldquo;next step&amp;rdquo; or does hiring someone with this skillset genuinely make the odds of success higher than doing something else?&lt;/em> This applies to any area of a business, not just hiring, and it&amp;rsquo;s common to fall into the trap of doing what feels easy. If you&amp;rsquo;re a good at engineering you might think your startup&amp;rsquo;s problems will be solved with cleaner code; if your background is in product management you might think just adding more features or conducting just one more customer interview is always the best path forward; if your background is in operations you might think introducing new processes or increasing headcount is always the best path forward. At any given point in the life of a company one of those strategies might be the optimal one but that analysis should be made irregardless of how comfortable you are in doing that sort of work and focus instead on how much that work will derisk the company.&lt;/p>
&lt;p>When using this framework a lot of the classic startup advice around moving fast, validating a market, finding PMF, scaling, etc. makes more sense. It also helps to explain, in part, why some companies fail. When Fast announced they were shutting down operations just a little over a year after raising $100M it became clear that leadership had not been appropriately derisking the company. According to &lt;a href="https://www.theinformation.com/articles/why-stripes-fast-horse-is-losing-the-one-click-checkout-race">The Information&lt;/a>, Fast&amp;rsquo;s revenue in 2021 was just $600,000 while its burn was $10 million per month! With this context it becomes even more shocking that Fast&amp;rsquo;s CEO and CTO gave an &lt;a href="https://www.businessinsider.com/fast-recruiting-tech-hiring-vicky-xiong-engineering-fintech-payments-2022-2">interview&lt;/a> to Business Insider in February 2022&amp;ndash; just two months before shutting down&amp;ndash; announcing their intention to &lt;em>double&lt;/em> their headcount by the end of 2022. This was after already doubling their headcount the previous year. I don&amp;rsquo;t have all the information they had so I do not want to judge too harshly from the comfort of my armchair but from where I&amp;rsquo;m sitting I can&amp;rsquo;t imagine that not having enough engineers was even close to the biggest risk the company faced at that time. In fact the opposite was true: 60% of Fast&amp;rsquo;s operating budget went to payroll making their employees one of their biggest risks instead of the biggest reductions in risk.&lt;/p>
&lt;p>And then you add-on the expensive corporate retreats, paying The Chainsmokers &lt;a href="https://www.npr.org/2022/04/05/1091077398/checkout-startup-fast-is-shutting-down-after-burning-through-investors-money">$1 million dollars&lt;/a> to perform at a conference, hiring a videographer to follow the CEO around the world to film him skiing, scuba diving, and perform other stunts, all while the engineering team was given a broad array of conflicting tasks &lt;a href="https://www.businessinsider.com/fast-startup-employees-domm-holland-overspending-overhiring-chaotic-2022-4">not related to the core mission&lt;/a>. Throwing a sick concert or making the CEO a celebrity influencer did nothing to derisk the mission of Fast and it&amp;rsquo;s telling that so much time and money was put into those efforts instead of things that would have been more effective.&lt;/p>
&lt;div class="quote-block">
&lt;div class="quote-block-inner">
&lt;blockquote>
&lt;p>One of the few warning signs engineers noticed is how Fast spent far more on infrastructure than the scale of the operation would have called for. Engineers sometimes brought up suggestions to scale infra down, and save costs - given there was not much revenue generated.&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;div class="quote-block-attribution">
&lt;p class="quote-author">
Pragmatic Engineer
&lt;/p>
&lt;a href="https://newsletter.pragmaticengineer.com/p/the-scoop-fast" class="quote-link">
Link
&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>I could harp on what I think Fast did wrong (chief among them was their propensity to &lt;a href="https://newsletter.pragmaticengineer.com/i/51799618/warning-signs-within-the-company">overengineer solutions&lt;/a>) but the actual lesson isn&amp;rsquo;t about the specifics of their actions and instead is focused on the fact that their actions did not do much to increase the odds of success. If Fast was a consumer social app then it may have made sense to make the CEO a celebrity or to throw fancy parties to build a brand. Fast wasn&amp;rsquo;t a consumer social app though and their focus on efforts completely unrelated to the performance, user experience, and developer experience led to the shutting down of a company a year after raising $100M.&lt;/p>
&lt;p>So if you&amp;rsquo;re in leadership position of a growing company (at an early stage company &lt;em>everyone&lt;/em> is in a leadership position) to best increase the odds of success I recommend identifying the biggest points of risk that threaten the long term vision and then prioritizing your efforts on those areas.&lt;/p></description></item><item><title>Is Work-Life Balance Worth It?</title><link>https://olivergilan.com/blog/work-life-balance/</link><pubDate>Wed, 27 Jul 2022 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/work-life-balance/</guid><enclosure url="https://olivergilan.com/images/The_Blacksmith.jpg" type="image/jpeg"/><description>&lt;p>I recently read a &lt;a href="https://twitter.com/shelbyn_23/status/1549944330646949890?s=20&amp;amp;t=a8NQKrJuA61IW0TGunCV0A">tweet&lt;/a> expressing exasperation with the standard 8-9 hour workday and how little time it leaves for life outside of work. Coincidentally the same day I came across this &lt;a href="https://every.to/p/what-i-miss-about-working-at-stripe">beautiful essay&lt;/a> by Brie Wolfson about her nostalgia for her time working at Stripe. What Brie misses most was the long workdays, the stress, the cameraderie, and being part of a group of people giving their all towards achieving a shared mission. These two distinct viewpoints reflect a difference in attitude toward work-life balance that I&amp;rsquo;ve seen take shape in &amp;ldquo;the discourse&amp;rdquo; online and even among friends &amp;amp; family. The former viewpoint believes that work is simply a means to an end for money, purely transactional, and that &amp;ldquo;life&amp;rdquo; is supposed to be lived outside of work. The latter viewpoint views work as an integral part of one&amp;rsquo;s life and that attemping to bisect the two is not a recipe for a happy life.&lt;/p>
&lt;p>It often feels as though my generation predominantly agrees with the former view of work-life balance while I personally believe that to live a fulfilled life one must seek work-life &lt;em>integration&lt;/em>. When I see tweets like the one above it makes me wonder if my belief is correct and if it is then why do so many people feel the opposite? Why do so many view work as some punishment or inconvenience that must be endured so that they can live their &amp;ldquo;real&amp;rdquo; lives after? The mindest of work-life integration can be an ideal that&amp;rsquo;s not available to everyone but most of the individuals in my social circle that try to separate work and life are in white collar jobs with more leverage as employees than most people. It&amp;rsquo;s easy to say people are just more lazy in this day and age but that seems like a cop-out to me and the more I think about this issue the more I feel that &lt;em>the work-life balance attitude is the natural result of various environmental incentives.&lt;/em>&lt;/p>
&lt;h2 id="caring-doesnt-pay">Caring Doesn&amp;rsquo;t Pay &lt;a class="anchor" href="#caring-doesnt-pay">
#
&lt;/a>&lt;/h2>&lt;p>My first instinct regarding this issue is too many people in my generation have seen others get burned (or they themselves got burned) by caring about work too much. Brie talks about late nights full of tears, stress, and joy. She mentions cancelling a vacation after her manager asked because her colleagues were working 15 hour days and she didn&amp;rsquo;t want to abandon them. The opportunity to work with a team of people you highly respect and throwing your all into a shared mission with them as Brie describes is a prospect I&amp;rsquo;m very drawn to and I firmly believe everyone should experience that at some point in their life. And yet it&amp;rsquo;s probably more common than not that after dedicating your blood, sweat, and tears to a company you still get fucked over. Maybe there&amp;rsquo;s a market downturn and you get laid off because of poor decisions by leadership; maybe the startup simply fails; or maybe it succeeds/ gets acquired and liquidation preferences leave you with little to no reward for your equity. The vast majority of statups are not financially rewarding for anyone other than the founding team so purely from a financial standpoint it can be irrational to dedicate your life to one.&lt;/p>
&lt;p>But startups are unusual in their own right! Even if they aren&amp;rsquo;t completely financially rational there&amp;rsquo;s a ton to be gained through connections, reputation, and skills that you can pick up by dedicating yourself at the right startup. Most people that emphasize work-life balance aren&amp;rsquo;t in that situation and probably work at an enterprise where many of those upsides are less prevalent and there is even less incentive to care about the work. During my time at Microsoft I could have been the most productive engineer in the world and the bottom line for Microsoft wouldn&amp;rsquo;t have changed. Or I could have died and the bottom line for Microsoft wouldn&amp;rsquo;t have changed. When you are so far removed from the result of your labor and the outcomes are so detached from the personal inputs there&amp;rsquo;s very little incentive to find meaning in the work. Marx called this phenomenon alienation, and while a revolution by the working class is probably not an appropriate nor effective solution, it&amp;rsquo;s still a very real result of working for many of these massive corporations. Enterprises also fail to create environments of agency in most cases. Orders come down from &amp;ldquo;the top&amp;rdquo; with little input from ICs and more often than not opportunities to take &amp;ldquo;ownership&amp;rdquo; are really just an excuse by a manager to shift more responsibilities downwards without doing the same for the associated upside and rewards.&lt;/p>
&lt;p>The result is that a vast swath of workers view passion for their job as irrational and even dowrnright risky. As it is now even if you work yourself to the bone and deliver real value to a business there&amp;rsquo;s a good chance you&amp;rsquo;ll be passed over for a promotion due to political reasons or the company will prioritize bringing someone external to fill a role above you instead of hiring internally. It&amp;rsquo;s hard to speak on behalf of other industries on this specific topic but at least in tech it can be far more rational to jump jobs every &lt;a href="https://developerpitstop.com/how-long-do-software-engineers-stay-at-a-job/#:~:text=Around%2050%25%20of%20software%20engineers,developer%20stays%20in%20one%20role.">2-3 years&lt;/a> than it is to stay at one company for an extended period of time. How is someone supposed to foster a deep understanding and affinity for their work if they are incentivized to leave every couple years? How are they supposed to be passionate about a mission if they&amp;rsquo;re treated as expendable?&lt;/p>
&lt;h2 id="work-has-changed-work-hasnt-changed">Work Has Changed, Work Hasn&amp;rsquo;t Changed &lt;a class="anchor" href="#work-has-changed-work-hasnt-changed">
#
&lt;/a>&lt;/h2>&lt;p>Beyond poor work environments and bad leadership there&amp;rsquo;s also the fundamental problem that most work is just &lt;a href="https://en.wikipedia.org/wiki/Bullshit_Jobs">bullshit&lt;/a>. The world is full of interesting problems and disciplines to master and I&amp;rsquo;m lucky that I get to work on my craft of software engineering every day. Meanwhile when talking to friends the majority of their day-to-day responsibilities include things like copying rows from an email to an Excel document, shifting images on a PowerPoint slide to be &lt;em>just&lt;/em> right, or compiling reports with little creative contribution. There&amp;rsquo;s two things that strike me about their descriptions of work:&lt;/p>
&lt;ol>
&lt;li>Most of this work could be automated or at least dramatically minimized&lt;/li>
&lt;li>It accomplishes very little of value&lt;/li>
&lt;/ol>
&lt;p>Work will feel dull when the nature of the work is dull. This is obvious and yet I&amp;rsquo;m constantly shocked by how many companies will go through great pain to hire the &amp;ldquo;best and brightest&amp;rdquo; from the most prestigious universities only to then have them spend their days copying rows from emails into Excel documents. There is an abundance of low hanging fruit for many businesses to reduce toil and unlock the creative productivity of their employees which would make many of these jobs more fulfilling and exciting, not to mention more valuable. If you work as an &amp;ldquo;analyst&amp;rdquo; in investment banking and your 15 hour days consist of putting meetings on the calendar for your boss you&amp;rsquo;re a lot more likely to feel disdain for your job than if you&amp;rsquo;re given tasks that involve actual analysis, creativity, and even risk-taking. In many ways this is a direct result of poor leadership that doesn&amp;rsquo;t understand how to value the skills of their employees nor how to build systems at scale for reducing toil.&lt;br>
Secondly, many of these bullshit jobs do not accomplish much of value which is often the real killer of morale. Many barista jobs can be automated too but they often get to see the direct result of their work by making drinks, becoming familiar with regulars, and directly providing a service many people find valuable. It doesn&amp;rsquo;t surprise me that I more often meet a barista who enjoys their work than I do a junior investment banker. Most white collar jobs have not adapted to the age of information and unlocked the creative productivity most of their employees have ot offer.&lt;/p>
&lt;p>There&amp;rsquo;s also the issue of the workday itself. When productivity was a direct result of time spent on the assembly line a 9-5 workday made sense but when work requires creative or analytical time spent at a desk only marginally results in higher output. There&amp;rsquo;s simply no reason for many white collar information jobs to require employees to sit at a desk for 8 hours a day and yet a shockingly small amount of companies even try to experiment with different working schedules that may better fit their employees' lives. I do think this argument is sometimes taken too far with people claiming that any more than 3 hours a day of creative work is a waste which misses the point that most people&amp;ndash; especially those early in their career&amp;ndash; cannot do 3 hours of productive work without a lot of &amp;ldquo;wasted&amp;rdquo; time inbetween. There&amp;rsquo;s also the fact that not all work work done in a creative job is creative. As a programmer no matter how productive I can be writing code or debugging a problem there&amp;rsquo;s still a lot of work to be done around planning, coordination, and team building. Brie talks about working 15 hour days which is fine and well when you are at an early stage startup trying to solve an ambitious problem and the mountains to climb seem never-ending. But most companies are not in that situation and making employees commute an hour each way in traffic to sit at a desk for 8 hours to only do 2 hours of productive creative work is not a good strategy to make people passionate about their jobs.&lt;/p>
&lt;h2 id="the-burdens-of-adulthood">The Burdens of Adulthood &lt;a class="anchor" href="#the-burdens-of-adulthood">
#
&lt;/a>&lt;/h2>&lt;p>Bad work environments and boring jobs aren&amp;rsquo;t where the problems end either. It also feels as though we have less time today than we had in the past. I am extremely fortunate to work as a software engineer in tech where employees have more leverage than normal. I can work from home and set my hours in a way most people can&amp;rsquo;t and yet even I often feel overwhelmed keeping up with the responsibilities outside of work e.g. cleaning my apartment regularly, doing my laundry, excercising, buying groceries and cooking for myself, cleaning dishes, etc. Just taking care of the bare necessities often takes up most of my time outside of work and that&amp;rsquo;s not even taking into account time spent with friends, leisure, hobbies, etc. Modern life is so full of &lt;a href="https://www.theatlantic.com/politics/archive/2021/07/how-government-learned-waste-your-time-tax/619568/">time taxes&lt;/a> just for daily survival that sometimes it feels like too much for one person to handle&amp;hellip; and it might be.&lt;/p>
&lt;p>In 1960 women were predominantly getting married &lt;a href="https://www.bgsu.edu/ncfmr/resources/data/family-profiles/hemez-distribution-age-first-marriage-fp-20-09.html#:~:text=In%201960%2C%20men's%20median%20age,FP%2D19%2D06">around the age of 20&lt;/a> and men around 22. Today those averages are at &lt;a href="https://www.prb.org/usdata/indicator/marriage-age-women/snapshot/#:~:text=The%20median%20age%20at%20first,across%20states%20and%20local%20areas">28 and 29&lt;/a> years old respectively. It&amp;rsquo;s not an exaggeration to say that people today shoulder the burden of adulthood alone for far longer than they have in the past. Similarly in 1960 &lt;a href="https://www.pewresearch.org/fact-tank/2015/12/30/its-no-longer-a-leave-it-to-beaver-world-for-american-families-but-it-wasnt-back-then-either/#:~:text=As%20more%20mothers%20enter%20the,%2Dat%2Dhome%20dads">about half&lt;/a> of mothers were stay-at-home mom&amp;rsquo;s whereas today that number has dropped below 30%. The cumulative effect is that historically an individual could work 8-9 hours a day but many of the responsibilities of adulthood outside of work were lessened by the contribution of a spouse while today even with a spouse there&amp;rsquo;s a good chance no one is staying home with the time to handle non-work responsibilities.&lt;/p>
&lt;p>What becomes evidently clear is that when women won their battles for equality and entered the workforce en masse they weren&amp;rsquo;t &lt;em>getting&lt;/em> jobs they were &lt;em>switching&lt;/em> jobs. Even just in 2019 if American women were paid minimum wage for the time they put into housework they would have earned &lt;a href="https://www.nytimes.com/interactive/2020/03/04/opinion/women-unpaid-labor.html">$1.5 trilltion&lt;/a>, a staggering amount. This is in modern times when the housework performed by women is a fraction of what it used to be. It&amp;rsquo;s not unreasonable to posit that because we did not value the labor of women monetarily and did not count it towards any of the metrics we use to judge the health of the economy we completely missed the fact that there was this massive amount of necessary labor being performed to support fulfilling lives. Of course the answer is not to make women return to these jobs&amp;ndash; the gender of the person performing the housework is irrelevant&amp;ndash; but this work still needs to be done and now more people are shouldering that burden alone for longer.&lt;/p>
&lt;h2 id="what-can-be-done">What Can Be Done &lt;a class="anchor" href="#what-can-be-done">
#
&lt;/a>&lt;/h2>&lt;p>So what can be done? I still believe the opportunity to enjoy one&amp;rsquo;s work and to find meaning in it is critical for a fulfilling life and we should do everything we can to change the incentives. Whether it&amp;rsquo;s on an individual level, company level, industry level, or even government level there&amp;rsquo;s plenty of things we can do to shift the cost-benefit of most of these jobs in a way that makes them more fulfilling and motivating. Not only would that make our society happier on average (which we desperately need) I suspect it would lead to greater productivity gains for the economy as a whole.&lt;/p>
&lt;h4 id="__change-the-costs-of-showing-up__">&lt;strong>Change the costs of showing up&lt;/strong>&lt;/h4>&lt;ul>
&lt;li>4 day work weeks, 10-3, variable work hours, etc. There&amp;rsquo;s plenty of room to experiment with different work schedules that better fit people&amp;rsquo;s lives and do not sacrifice on creative/analytical output&lt;/li>
&lt;li>Build better public transportation and denser cities to make it faster and easier to work in person. Pretty much every city in America besides New York requires a car to live and work but sitting in traffic and commuting for hours automatically makes the cost of showing up for work higher. Remote work has helped in this regard but ultimately young people who are passionate about their jobs will want to work in person even for a couple days a week and to be frank the logistics around working in person are terrible for most of America.&lt;/li>
&lt;/ul>
&lt;h4 id="__create-a-culture-of-loyalty-and-respect__">&lt;strong>Create a culture of loyalty and respect&lt;/strong>&lt;/h4>&lt;ul>
&lt;li>Prefer internal promotions over external hires&lt;/li>
&lt;li>Invest in employee development. If an employee leaves your company at the same level they joined that should be viewed as a failure in most instances. This means real investment in training and education beyond just online seminars or a Pluralsight subscription.&lt;/li>
&lt;li>Pay more, give better benefits. Pay is a sign of respect and should accurately reflect how valuable an employee is to an organization without that employee needing to employ Machiavellan negotiation tactics&lt;/li>
&lt;/ul>
&lt;h4 id="__improve-the-quality-of-work-itself__">&lt;strong>Improve the quality of work itself&lt;/strong>&lt;/h4>&lt;ul>
&lt;li>Reduce toil with tech automation and give the existing workforce more creative/analytical responsibilities&lt;/li>
&lt;li>Promote agency with flatter org structures and more ownership. Create opportunities for employees to take risks and benefit more from the wins&lt;/li>
&lt;/ul>
&lt;h4 id="__reduce-peoples-overall-economic-risk__">&lt;strong>Reduce people&amp;rsquo;s overall economic risk&lt;/strong>&lt;/h4>&lt;ul>
&lt;li>Start offering internships for high school students and invest in on-the-job education. Instead of people entering the workforce at 22 years old with thousands of dollars of debt we should consider the benefits of them joining the workforce out of high school, debt free, especially when most of the skills will be learned on the job regardless of whether they have a degree or not. This needs to be driven by the businesses and there&amp;rsquo;s a whole bunch of caveats to making a dynamic like this work but it&amp;rsquo;s possible. This is a whole other post I will write about in the future but there&amp;rsquo;s a &lt;em>lot&lt;/em> of room to change peoples economic outlook by changing the structure of the education-to-work pipeline.&lt;/li>
&lt;li>Make healthcare cheaper and separate from employment. Healthcare is one of the biggest spending categories for people in America. By making it cheaper you automatically make most people richer by some degree and by detaching from employment status you empower employees to more readily bad jobs and either take risks making their own companies or joining companies that they are passionate about.&lt;/li>
&lt;li>Make housing cheaper. By making housing cheaper across the board you enable people to more readily move and organize themselves physically in localities where they can meet people with interests such as theirs. If we want people to dedicate themselves to shared missions it&amp;rsquo;s important that they can work and live near others with a similar mindset. Just between cheaper housing and healthcare you will give employees a ton of leverage to leave bad jobs and find other people working on missions they find meaningful.&lt;/li>
&lt;li>Provide better paid parental leave and childcare. Right now the cost of raising a family and doing much of the important housework is simply too high. We need find a way to reward the massive amount of unpaid labor being performed at home.&lt;/li>
&lt;/ul>
&lt;p>For each of these changes there will be caveats and unintended consequences but what we do know is that whatever we&amp;rsquo;re doing right now isn&amp;rsquo;t working. People find meaning in life when they can dedicate themselves to a mission whether that&amp;rsquo;s raising children, becoming a champion of a sport, writing a novel, mastering a craft, etc. While not necessary, most missions people dedicate themselves to are directly economically productive and thus become jobs and that&amp;rsquo;s a good thing because when groups of people work together they can often accomplish far more than what an individual ever could. I view the trend to try and separate work from life as a failure on the part of our society and we should work on all levels to fix the incentives. Empowering people to live a life of meaning means more than just making them happy in a corporate job but there&amp;rsquo;s also little reason why more corporate jobs can&amp;rsquo;t be more &lt;a href="https://theoatmeal.com/comics/unhappy">compelling&lt;/a>.&lt;/p></description></item><item><title>How to Create a Blog from Scratch with Hugo</title><link>https://olivergilan.com/blog/how-to-create-a-blog-in-hugo/</link><pubDate>Thu, 03 Mar 2022 10:04:15 -0500</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/how-to-create-a-blog-in-hugo/</guid><enclosure url="https://olivergilan.com/images/Hugo_SSG.png" type="image/jpeg"/><description>&lt;p>In this post I&amp;rsquo;ll walk you through creating the personal blog you&amp;rsquo;re currently reading using Hugo. When choosing my stack for this blog I had a few requirements in mind: low maintenance, high performance/low bundle sizes, simple clean interface with reusable components, and markdown support. Hugo meets all these requirements with blazing fast compile times as well as no reliance on JavaScript or other libraries that could lead to bloated bundles. It supports a ton of different themes but also has the ability to create very simple themes from scratch with reusable components. And it supports markdown which is my preffered method for writing blog posts. So all I need to do is write a new post in markdown, add it to a specific directory, and push to GitHub and Hugo will generate the necessary html to be served.&lt;/p>
&lt;p>For the purposes of this blog I&amp;rsquo;ll use GitHub actions to generate the site and host it on GitHub pages.&lt;/p>
&lt;div id="tocContainer">
&lt;p id="contents">Contents&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#getting-started">Getting Started&lt;/a>&lt;/li>
&lt;li>&lt;a href="#hugo-core-concepts">Hugo Core Concepts&lt;/a>&lt;/li>
&lt;li>&lt;a href="#building-the-template">Building the Template&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#working-with-menus">Working with Menus&lt;/a>&lt;/li>
&lt;li>&lt;a href="#target-blank">Target Blank&lt;/a>&lt;/li>
&lt;li>&lt;a href="#post-page">Post Page&lt;/a>&lt;/li>
&lt;li>&lt;a href="#shortcodes">Shortcodes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#footer">Footer&lt;/a>&lt;/li>
&lt;li>&lt;a href="#header-anchors">Header Anchors&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#rss">RSS&lt;/a>&lt;/li>
&lt;li>&lt;a href="#compiling-and-hosting">Compiling and Hosting&lt;/a>&lt;/li>
&lt;li>&lt;a href="#conclusion">Conclusion&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;h2 id="getting-started">Getting Started &lt;a class="anchor" href="#getting-started">
#
&lt;/a>&lt;/h2>&lt;p>To get started &lt;a href="https://gohugo.io/getting-started/installing">install Hugo&lt;/a>. I&amp;rsquo;m on Mac so I used Homebrew:
&lt;div class="code-block">
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Shell" data-lang="Shell">brew install hugo
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>Once it&amp;rsquo;s installed use the hugo cli to scaffold a new site for you.&lt;/p>
&lt;div class="code-block">
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">hugo new site blogname
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>You now have the scaffolding for a new site! You can run the site locally using &lt;code>hugo server&lt;/code> but you won&amp;rsquo;t see anything just yet! Let&amp;rsquo;s create our site!&lt;/p>
&lt;p>At this point you can add an existing theme to your site but I will create me own. Keep in mind, I didn&amp;rsquo;t use a theme because I wanted to create something ultra simple and creating it from scratch helps me understand how Hugo works in greater detail. If you want to create a more complex site or you just want to create something fast I recommend starting with a theme and you can always modify it later but at least you have a base to start from. You can view a list of themes &lt;a href="https://themes.gohugo.io/">here&lt;/a> and choose one you like. Download the theme&amp;rsquo;s source code and add it the &lt;code>themes&lt;/code> directory of your site. Then initialize git.&lt;/p>
&lt;div class="code-block">
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#0086b3">cd&lt;/span> blogname
git init
git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>And set the theme in the config.toml file.&lt;/p>
&lt;div class="code-block">
&lt;p class="filepath">
config.toml
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">theme = &lt;span style="color:#d14">&amp;#34;ananke&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Like I said, I didn&amp;rsquo;t use a theme so I will leave my themes directory empty and create a site from scratch.&lt;/p>
&lt;p>Now let&amp;rsquo;s set some of the key settings in our configuration file. Open the &lt;code>config.toml&lt;/code> file and set your baseUrl, language, and title. For me, the title of my blog is simply my name.
&lt;div class="code-block">
&lt;p class="filepath">
config.toml
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">baseURL = &lt;span style="color:#d14">&amp;#39;https://olivergilan.com/&amp;#39;&lt;/span>
languageCode = &lt;span style="color:#d14">&amp;#39;en-us&amp;#39;&lt;/span>
title = &lt;span style="color:#d14">&amp;#39;Oliver Gilan&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;h2 id="hugo-core-concepts">Hugo Core Concepts &lt;a class="anchor" href="#hugo-core-concepts">
#
&lt;/a>&lt;/h2>&lt;p>It&amp;rsquo;s important to understand the directory structure of Hugo. The scaffolding generator for Hugo created a few important directories to understand. The themes directory as previously mentioned handles all the code.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>content/&lt;/code> handles all the content of your site. This is where I&amp;rsquo;ll be putting my markdown files for my blog.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>layouts/&lt;/code> will hold your html files that are used to render the content for any given page. This is where we will create the templates for our site.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>static/&lt;/code> holds your static files like custom css files or javascript files we might want to reference from our layouts.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>How you structure your content within these directories will determine how Hugo generates your site. For example, for my blog I only want a couple pages: I want&lt;/p>
&lt;ol>
&lt;li>A homepage which will act as my &amp;ldquo;About&amp;rdquo; page&lt;/li>
&lt;li>A blog page that lists all my posts in chronological order&lt;/li>
&lt;li>A page for each blog post&lt;/li>
&lt;/ol>
&lt;p>So in my content directory I create a &lt;code>blog/&lt;/code> directory and an &lt;code>_index.md&lt;/code> file. Within the blog directory I will put each post as a markdown file. This very post that you&amp;rsquo;re reading now is located at &lt;code>content/blog/CreateABlogWithHugo.md&lt;/code>.&lt;/p>
&lt;p>If you want more pages, create more directories. For example if you want your &amp;ldquo;About&amp;rdquo; to be separate from your homepage create an &lt;code>about/&lt;/code> directory next to &lt;code>blog/&lt;/code>. If you want a contact page create a &lt;code>contact/&lt;/code> directory. Each directory under &lt;code>content/&lt;/code> tells Hugo to generate a page of some sort to render that content.&lt;/p>
&lt;div class="aside">
&lt;div class="aside-text">
&lt;strong>FYI:&lt;/strong> To create a new markdown file in content, use the CLI command &lt;code>hugo new [path]&lt;/code>
for example: &lt;code>hugo new blog/firstpost.md&lt;/code>
This generates the markdown file preloaded with front matter fields that you can fill in.
This generator uses the file in &lt;code>archetypes/default.md&lt;/code> as a template. You can add more fields in that template file to suit your needs. I left it as is for now.
&lt;/div>
&lt;/div>
&lt;p>Because my site is simple I decided to keep all my css in one file but you can of course split it up. Add any CSS or JS files you want to the &lt;code>static/&lt;/code> directory. I added mine to &lt;code>static/css/style.css&lt;/code> as well as the fonts my site will use to &lt;code>static/fonts/&lt;/code>. You can of course load your fonts from an external service like Google fonts but I choose to serve them with my site.&lt;/p>
&lt;p>So now you have some content in your content directory and you have your css, javascript, or any other static files in your static directory. Now let&amp;rsquo;s actually build the template files that tell Hugo how to render your content!&lt;/p>
&lt;h2 id="building-the-template">Building the Template &lt;a class="anchor" href="#building-the-template">
#
&lt;/a>&lt;/h2>&lt;p>The first part of the template I want to build is the navigation bar. This will be present on all of the pages in my site and won&amp;rsquo;t change. To get started create the following files within the layouts directory:&lt;/p>
&lt;p>&lt;code>layout/_default/baseof.html&lt;/code> &lt;br>
&lt;code>layout/partials/header.html&lt;/code>&lt;/p>
&lt;p>&lt;code>baseof.html&lt;/code> will be the base template that holds the other templates. You can think of this as the root component in a framework like React. All that I&amp;rsquo;ll put in that file is the following:&lt;/p>
&lt;div class="code-block">
&lt;p class="filepath">
layouts/defaults/baseof.html
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#999;font-weight:bold;font-style:italic">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#000080">html&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">meta&lt;/span> &lt;span style="color:#008080">charset&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;utf-8&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#000080">link&lt;/span> &lt;span style="color:#008080">rel&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;/css/style.css&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#000080">title&lt;/span>&amp;gt;{{ block &amp;#34;title&amp;#34; . }} {{ .Site.Title }} {{ end }}&amp;lt;/&lt;span style="color:#000080">title&lt;/span>&amp;gt;
{{ block &amp;#34;head&amp;#34; . }} {{ end }}
&amp;lt;/&lt;span style="color:#000080">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">body&lt;/span>&amp;gt;
&lt;span style="color:#998;font-style:italic">&amp;lt;!-- Code that all your templates share, like a header --&amp;gt;&lt;/span>
{{ block &amp;#34;main&amp;#34; . }}
&lt;span style="color:#998;font-style:italic">&amp;lt;!-- The part of the page that begins to differ between templates --&amp;gt;&lt;/span>
{{ end }} {{ block &amp;#34;footer&amp;#34; . }}
&lt;span style="color:#998;font-style:italic">&amp;lt;!-- More shared code, perhaps a footer but that can be overridden if need be in --&amp;gt;&lt;/span>
{{ end }}
&amp;lt;/&lt;span style="color:#000080">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>You can see I link to the stylesheet here so that every other page has access to the css. The parts that say &lt;code>{{ block [name] }}&lt;/code> tell Hugo to render another layout in that location. If Hugo cannot find an appropriate layout to render in place of a block statement it will fallback to the default which you can set by adding any content you want between the beginning of the block and the &lt;code>{{ end }}&lt;/code> statement. Notice how in the &lt;code>&amp;lt;title&amp;gt;&lt;/code> tag I tell Hugo to render the site&amp;rsquo;s title as the default. &lt;code>.Site.Title&lt;/code> will evaluate to whatever you set as the title in the config file.&lt;/p>
&lt;p>Now let&amp;rsquo;s implement the header component. Notice that it&amp;rsquo;s located in a directory called &amp;ldquo;partials.&amp;rdquo; In Hugo a partial is a reusable component that can be plugged into any layout in a similar way to a React component.
In &lt;code>header.html&lt;/code> add the following code:
&lt;div class="code-block">
&lt;p class="filepath">
layouts/partials/header.html
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#000080">header&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">nav&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">a&lt;/span> &lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;{{.Site.BaseURL}}&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">h1&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;site-title&amp;#34;&lt;/span>&amp;gt;{{ .Site.Title }}&amp;lt;/&lt;span style="color:#000080">h1&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">a&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">ul&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;section-list&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#000080">ul&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">nav&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">header&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;h3 id="working-with-menus">Working with Menus &lt;a class="anchor" href="#working-with-menus">
#
&lt;/a>&lt;/h3>&lt;p>Notice how in the above header partial I don&amp;rsquo;t actually have the unordered list implemented. I could of course manually create each &lt;code>&amp;lt;li&amp;gt;&lt;/code> element and point it to the designated page but I&amp;rsquo;d rather have Hugo dynamically render that menu for me. This makes it easier to update in the future.&lt;/p>
&lt;p>We can do this with some updates to the config of the site. Add the following:
&lt;div class="code-block">
&lt;p class="filepath">
config.toml
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">sectionPagesMenu = &lt;span style="color:#d14">&amp;#34;main&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>This tells Hugo to take every section page of the site and create menu called &lt;code>main&lt;/code> . The only section page I have right now is for my &lt;code>content/blog/&lt;/code> directory so right now Hugo has one menu &lt;code>main&lt;/code> with an element for that blog page. We can make the partial use that dynamic menu with the following code:&lt;/p>
&lt;div class="code-block">
&lt;p class="filepath">
layouts/partials/header.html
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#000080">header&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">nav&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">a&lt;/span> &lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;{{.Site.BaseURL}}&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">h1&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;site-title&amp;#34;&lt;/span>&amp;gt;{{ .Site.Title }}&amp;lt;/&lt;span style="color:#000080">h1&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">a&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">ul&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;section-list&amp;#34;&lt;/span>&amp;gt;
{{ range .Site.Menus.main }}
&amp;lt;&lt;span style="color:#000080">li&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;section-item horizontal-list&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">a&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;section-link small-thick&amp;#34;&lt;/span> &lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;{{.URL}}&amp;#34;&lt;/span>
&amp;gt;{{.Title}}&amp;lt;/&lt;span style="color:#000080">a&lt;/span>
&amp;gt;
&amp;lt;/&lt;span style="color:#000080">li&lt;/span>&amp;gt;
{{ end }}
&amp;lt;/&lt;span style="color:#000080">ul&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">nav&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">header&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>This takes the &lt;code>main&lt;/code> menu and for each item in it renders a &lt;code>&amp;lt;li&amp;gt;&lt;/code> tag with a link to that page&amp;rsquo;s URL and it&amp;rsquo;s title.&lt;/p>
&lt;p>By default Hugo pluralizes the titles which I do not want because I want the menu to say &lt;code>Blog&lt;/code> not &lt;code>Blogs&lt;/code>. To disable the pluralization add the following to your config file:
&lt;div class="code-block">
&lt;p class="filepath">
config.toml
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">pluralizelisttitles = &lt;span style="color:#000;font-weight:bold">false&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>I also want to add more links to external sites such as my GitHub. Hugo can&amp;rsquo;t automatically add that to the menu because I don&amp;rsquo;t have a page for it but I can manually add it through the config with the following:&lt;/p>
&lt;div class="code-block">
&lt;p class="filepath">
config.toml
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">[menu]
[[menu.main]]
identifier = &lt;span style="color:#d14">&amp;#34;github&amp;#34;&lt;/span>
name = &lt;span style="color:#d14">&amp;#34;GitHub&amp;#34;&lt;/span>
title = &lt;span style="color:#d14">&amp;#34;GitHub&amp;#34;&lt;/span>
url = &lt;span style="color:#d14">&amp;#34;https://github.com/olivergilan&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>This manually adds another element to the main menu so that it gets rendered using the given title and url fields. Now if I ever want to add, remove, or update an element on my navigation bar I can just quickly edit my config file without modifying the html code.&lt;/p>
&lt;h3 id="target-blank">Target Blank &lt;a class="anchor" href="#target-blank">
#
&lt;/a>&lt;/h3>&lt;p>One last feature I want to add is to open certain links in a new tab. If a user clicks a link to my blog page or any other page within my site it should navigate within the same tab but if a user clicks my GitHub link I want it to open in a new tab so they can easily switch back to my site if they want to. This can be achieved by adding the following code:&lt;/p>
&lt;div class="code-block">
&lt;p class="filepath">
config.toml
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">[menu]
[[menu.main]]
identifier = &lt;span style="color:#d14">&amp;#34;github&amp;#34;&lt;/span>
name = &lt;span style="color:#d14">&amp;#34;GitHub&amp;#34;&lt;/span>
title = &lt;span style="color:#d14">&amp;#34;GitHub&amp;#34;&lt;/span>
url = &lt;span style="color:#d14">&amp;#34;https://github.com/olivergilan&amp;#34;&lt;/span>
[menu.main.params]
targetBlank = &lt;span style="color:#000;font-weight:bold">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="code-block">
&lt;p class="filepath">
layouts/partials/header.html
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#000080">header&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">nav&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">a&lt;/span> &lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;{{.Site.BaseURL}}&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">h1&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;site-title&amp;#34;&lt;/span>&amp;gt;{{ .Site.Title }}&amp;lt;/&lt;span style="color:#000080">h1&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">a&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">ul&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;section-list&amp;#34;&lt;/span>&amp;gt;
{{ range .Site.Menus.main }}
&amp;lt;&lt;span style="color:#000080">li&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;section-item horizontal-list&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">a&lt;/span>
&lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;section-link small-thick&amp;#34;&lt;/span>
&lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;{{.URL}}&amp;#34;&lt;/span>
&lt;span style="color:#a61717;background-color:#e3d2d2">{{&lt;/span> &lt;span style="color:#008080">with&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">.&lt;/span>&lt;span style="color:#008080">Params&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">.&lt;/span>&lt;span style="color:#008080">targetBlank&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">}}&lt;/span>&lt;span style="color:#008080">target&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;_blank&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">{{&lt;/span> &lt;span style="color:#008080">end&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">}}&lt;/span>&amp;gt;
{{ .Title }}
&amp;lt;/&lt;span style="color:#000080">a&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">li&lt;/span>&amp;gt;
{{ end }}
&amp;lt;/&lt;span style="color:#000080">ul&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">nav&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">header&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>This adds a paramer to that specific menu item with name &lt;code>targetBlank&lt;/code> and value &lt;code>true&lt;/code>. Then within the partial for each menu item I check if it has that parameter and if it does I add the &lt;code>target=&amp;quot;_blank&amp;quot;&lt;/code> attribute to the href element. This will make the link open in a new tab! Now I have a working navbar/header! I can add it to my &lt;code>layouts/defaults/baseof.html&lt;/code> file so that it appears at the top of every page on my site and add some css to style it how I want.
&lt;div class="code-block">
&lt;p class="filepath">
layouts/defaults/baseof.html
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#999;font-weight:bold;font-style:italic">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#000080">html&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">meta&lt;/span> &lt;span style="color:#008080">charset&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;utf-8&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#000080">link&lt;/span> &lt;span style="color:#008080">rel&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;/css/style.css&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#000080">title&lt;/span>&amp;gt;{{ block &amp;#34;title&amp;#34; . }} {{ .Site.Title }} {{ end }}&amp;lt;/&lt;span style="color:#000080">title&lt;/span>&amp;gt;
{{ block &amp;#34;head&amp;#34; . }} {{ end }}
&amp;lt;/&lt;span style="color:#000080">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">body&lt;/span>&amp;gt;
{{ partial &amp;#34;header&amp;#34; . }}
&lt;span style="color:#998;font-style:italic">&amp;lt;!-- Code that all your templates share, like a header --&amp;gt;&lt;/span>
{{ block &amp;#34;main&amp;#34; . }}
&lt;span style="color:#998;font-style:italic">&amp;lt;!-- The part of the page that begins to differ between templates --&amp;gt;&lt;/span>
{{ end }} {{ block &amp;#34;footer&amp;#34; . }}
&lt;span style="color:#998;font-style:italic">&amp;lt;!-- More shared code, perhaps a footer but that can be overridden if need be in --&amp;gt;&lt;/span>
{{ end }}
&amp;lt;/&lt;span style="color:#000080">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>Using &lt;code>{{ partial &amp;quot;header&amp;quot; . }}&lt;/code> tells Hugo to look in the partials directory, find the file with that name and render it. Don&amp;rsquo;t forget the period after the partial name, that&amp;rsquo;s not a typo. That period passes in the current context so when the code within the partial uses &lt;code>.Site.Title&lt;/code> or &lt;code>.Site.Menus...&lt;/code> it&amp;rsquo;s doing so with that context being passed in. And now we have a working header with a navigation menu that can be reused on every page!&lt;/p>
&lt;h3 id="post-page">Post Page &lt;a class="anchor" href="#post-page">
#
&lt;/a>&lt;/h3>&lt;p>So now you&amp;rsquo;ve got the scaffolding of your site created and you have a navigation bar that will appear at the top of every page. Let&amp;rsquo;s spend some time creating the template for each blog post as this is where people will be spending the most time on your site.
Create a new file &lt;code>layouts/blog/single.html&lt;/code>. This will be used by Hugo to render individual pages in the blog section of the site.&lt;/p>
&lt;p>This is the code I have in my template:
&lt;div class="code-block">
&lt;p class="filepath">
layouts/blog/single.html
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">{{ define &amp;#34;head&amp;#34; }}
&amp;lt;&lt;span style="color:#000080">link&lt;/span> &lt;span style="color:#008080">rel&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;/css/post.css&amp;#34;&lt;/span> /&amp;gt;
{{ end }} {{ define &amp;#34;main&amp;#34; }}
&amp;lt;&lt;span style="color:#000080">section&lt;/span> &lt;span style="color:#008080">id&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;main&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">h1&lt;/span> &lt;span style="color:#008080">id&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;title&amp;#34;&lt;/span>&amp;gt;{{ .Title }}&amp;lt;/&lt;span style="color:#000080">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">section&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;post-metadata&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">h4&lt;/span> &lt;span style="color:#008080">id&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;date&amp;#34;&lt;/span>&amp;gt;{{ .Date.Format &amp;#34;Mon Jan 2, 2006&amp;#34; }}&amp;lt;/&lt;span style="color:#000080">h4&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">h5&lt;/span> &lt;span style="color:#008080">id&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;wordcount&amp;#34;&lt;/span>&amp;gt;{{ .WordCount }} Words&amp;lt;/&lt;span style="color:#000080">h5&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">section&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">article&lt;/span> &lt;span style="color:#008080">id&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;content&amp;#34;&lt;/span>&amp;gt;{{ .Content }}&amp;lt;/&lt;span style="color:#000080">article&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">section&lt;/span>&amp;gt;
{{ end }} {{ define &amp;#34;footer&amp;#34; }} {{ partial &amp;#34;footer&amp;#34; . }} {{ end }}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>Pretty straightforward but to quickly go over it. Each &amp;ldquo;define&amp;rdquo; block implements one of the &amp;ldquo;block&amp;rdquo; statements in the &lt;code>baseof.html&lt;/code> file we created earlier. The head block allows me to inject custom properties into the pages head tag. In this case I made a separate css file for css relating only to blog posts and I link that here. Then in the main block I create the post itself. Notice how I use varriables like .Title, .WordCount, .Content, and the .Date.Format function. These are all provided by Hugo automatically. For example the beginning of this blog post has the following Front Matter:&lt;/p>
&lt;div class="code-block">
&lt;p class="filepath">
content/blog/HowToCreateABlogWithHugo.md
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-markdown" data-lang="markdown">---
title: &amp;#34;How to Create a Blog from Scratch with Hugo&amp;#34;
date: 2022-02-05T10:04:15-05:00
draft: true
---
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>That &amp;ldquo;title&amp;rdquo; field is then used by Hugo for the .Title variable when rendering the page for that post. The Content parameter takes whatever I wrote in the Markdown file and generates the blog page&amp;rsquo;s content from it. Everything else here is pretty much standard. You can open dev tools in chrome and look at what sort of elements get rendered from your markdown and then just use css to style your blog posts however you&amp;rsquo;d like.&lt;/p>
&lt;p>Because this is a technical blog one of the important elements for posts will be the inclusion of code blocks. Adding code blocks can be achieved in Hugo using &lt;a href="https://gohugo.io/content-management/shortcodes/">Shortcodes&lt;/a>. Hugo has a built-in &lt;a href="https://gohugo.io/content-management/syntax-highlighting/#highlight-shortcode">Highlight&lt;/a> shortcode that can be used to add syntax highlighting to a block of code in your markdown file (can also be activated using code fences instead of the shortcode tag). In my opinion the highlight shortcode is a bit limited: it will highlight your code but that&amp;rsquo;s it. When I have a code block I want to optionally include the filepath for that code block and you might want to include other things like a &amp;ldquo;Copy to Clipboard&amp;rdquo; button. To do that we need to create our own shortcode!&lt;/p>
&lt;h3 id="shortcodes">Shortcodes &lt;a class="anchor" href="#shortcodes">
#
&lt;/a>&lt;/h3>&lt;p>A shortcode is a simple snippet inside a content file that Hugo will render using a predefined template. Within the layouts directory create shortcodes directory and add the following file:
&lt;div class="code-block">
&lt;p class="filepath">
layouts/shortcodes/code.html
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#000080">div&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;code-block&amp;#34;&lt;/span>&amp;gt;
{{ with .Get &amp;#34;file&amp;#34; }}
&amp;lt;&lt;span style="color:#000080">div&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;filepath&amp;#34;&lt;/span>&amp;gt;{{.}}&amp;lt;/&lt;span style="color:#000080">div&lt;/span>&amp;gt;
{{ end }}
&amp;lt;&lt;span style="color:#000080">div&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;code&amp;#34;&lt;/span>&amp;gt;{{ .Inner | markdownify }}&amp;lt;/&lt;span style="color:#000080">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>Now in my content markdown files if I want a code block I can use
&lt;div class="code-block">
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-markdown" data-lang="markdown">This is a normal paragraph...
{{&amp;lt; &lt;span style="color:#000080">code&lt;/span> &lt;span style="color:#008080">file&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;optional/file/path&amp;#34;&lt;/span> &amp;gt;}}
{{&amp;lt; &lt;span style="color:#000080">highlight&lt;/span> &lt;span style="color:#008080">markdown&lt;/span> &amp;gt;}}
// Code goes here
{{&amp;lt; /&lt;span style="color:#000080">highlight&lt;/span> &amp;gt;}}
{{&amp;lt; /&lt;span style="color:#000080">code&lt;/span> &amp;gt;}}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>I can pass in an optional &amp;ldquo;file&amp;rdquo; parameter and if it exists Hugo will render that div with class &amp;ldquo;filepath&amp;rdquo; that I can style how I want. The inner code within the shortcode gets processed through the markdown renderer using the &lt;code>markdownify&lt;/code> function. Because shortcodes can nest within each other, the .Inner content still gets the the built-in Highlight shortcode so my custom shortcode acts as a wrapper extending the native functionality.
Notice how my shortcode is literally called &amp;ldquo;code&amp;rdquo; and that&amp;rsquo;s because of how I named the shortcode html file. Name the file whatever you want that specific shortcode to be.&lt;/p>
&lt;p>Don&amp;rsquo;t forget to customize how Hugo styles the code syntax by updating your config file.
&lt;div class="code-block">
&lt;p class="filepath">
config.toml
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">[markup]
[markup.highlight]
anchorLineNos = &lt;span style="color:#000;font-weight:bold">false&lt;/span>
codeFences = &lt;span style="color:#000;font-weight:bold">true&lt;/span>
guessSyntax = &lt;span style="color:#000;font-weight:bold">false&lt;/span>
hl_Lines = &lt;span style="color:#d14">&amp;#39;&amp;#39;&lt;/span>
lineAnchors = &lt;span style="color:#d14">&amp;#39;&amp;#39;&lt;/span>
lineNoStart = &lt;span style="color:#099">1&lt;/span>
lineNos = &lt;span style="color:#000;font-weight:bold">false&lt;/span>
lineNumbersInTable = &lt;span style="color:#000;font-weight:bold">true&lt;/span>
noClasses = &lt;span style="color:#000;font-weight:bold">true&lt;/span>
style = &lt;span style="color:#d14">&amp;#39;dracula&amp;#39;&lt;/span>
tabWidth = &lt;span style="color:#099">4&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>And there you have it! A little bit of styling and you can have a custom code block or any other custom markdown element.&lt;/p>
&lt;h3 id="footer">Footer &lt;a class="anchor" href="#footer">
#
&lt;/a>&lt;/h3>&lt;p>For the footer I created another partial with a custom menu in the config for the different social elements.
&lt;div class="code-block">
&lt;p class="filepath">
layouts/partials/footer.html
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#000080">footer&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">div&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;socials&amp;#34;&lt;/span>&amp;gt;
{{ range .Site.Menus.socials }}
&amp;lt;&lt;span style="color:#000080">a&lt;/span>
&lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;section-link small-thick&amp;#34;&lt;/span>
&lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;{{.URL}}&amp;#34;&lt;/span>
&lt;span style="color:#a61717;background-color:#e3d2d2">{{&lt;/span>&lt;span style="color:#008080">with&lt;/span>
&lt;span style="color:#a61717;background-color:#e3d2d2">.&lt;/span>&lt;span style="color:#008080">Params&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">.&lt;/span>&lt;span style="color:#008080">targetBlank&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">}}&lt;/span>
&lt;span style="color:#008080">target&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;_blank&amp;#34;&lt;/span>
&lt;span style="color:#a61717;background-color:#e3d2d2">{{&lt;/span>&lt;span style="color:#008080">end&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">}}&lt;/span>
&amp;gt;
{{ with .Params.icon }}
&amp;lt;&lt;span style="color:#000080">img&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;social-icon&amp;#34;&lt;/span> &lt;span style="color:#008080">src&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;{{.}}&amp;#34;&lt;/span> /&amp;gt;
{{end}}
&amp;lt;/&lt;span style="color:#000080">a&lt;/span>&amp;gt;
{{ end }}
&amp;lt;/&lt;span style="color:#000080">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">p&lt;/span>&amp;gt;&lt;span style="color:#a61717;background-color:#e3d2d2">&amp;amp;&lt;/span>copy {{ dateFormat &amp;#34;2006&amp;#34; now }} {{ .Site.Title }}&amp;lt;/&lt;span style="color:#000080">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">footer&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;div class="code-block">
&lt;p class="filepath">
config.toml
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">[menu]
[[menu.socials]]
identifier = &lt;span style="color:#d14">&amp;#34;github&amp;#34;&lt;/span>
name = &lt;span style="color:#d14">&amp;#34;GitHub&amp;#34;&lt;/span>
title = &lt;span style="color:#d14">&amp;#34;GitHub&amp;#34;&lt;/span>
url = &lt;span style="color:#d14">&amp;#34;https://github.com/olivergilan&amp;#34;&lt;/span>
[menu.socials.params]
targetBlank = &lt;span style="color:#000;font-weight:bold">true&lt;/span>
icon = &lt;span style="color:#d14">&amp;#34;/icons/github.png&amp;#34;&lt;/span>
[[menu.socials]]
identifier = &lt;span style="color:#d14">&amp;#34;linkedin&amp;#34;&lt;/span>
name = &lt;span style="color:#d14">&amp;#34;LinkedIn&amp;#34;&lt;/span>
title = &lt;span style="color:#d14">&amp;#34;LinkedIn&amp;#34;&lt;/span>
url = &lt;span style="color:#d14">&amp;#34;https://linkedin.com/in/oliver-gilan/&amp;#34;&lt;/span>
[menu.socials.params]
targetBlank = &lt;span style="color:#000;font-weight:bold">true&lt;/span>
icon = &lt;span style="color:#d14">&amp;#34;/icons/linkedin.png&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>In the above &amp;ldquo;socials&amp;rdquo; menu, the items have a custom icon parameter that contains the path to the icon for that element within the &lt;code>static&lt;/code> directory.&lt;/p>
&lt;p>This time I don&amp;rsquo;t want the footer on every page, only on my blog post pages. So instead of adding this to the base template I add it to my single page template for the blog section. If you scroll up to the code block above you&amp;rsquo;ll see I define the &amp;ldquo;footer&amp;rdquo; block and declare the footer partial in that block. Now it&amp;rsquo;ll be added to every blog post.&lt;/p>
&lt;h3 id="header-anchors">Header Anchors &lt;a class="anchor" href="#header-anchors">
#
&lt;/a>&lt;/h3>&lt;p>One nice feature on a lot of blogs is having anchors for different sections of individual posts. If you look above this paragraph at this section&amp;rsquo;s heading you&amp;rsquo;ll see the &amp;ldquo;#&amp;rdquo; tag which is clickable and if you look at the URL you&amp;rsquo;ll notice it now contains that header in it. This allows you to link to a specific section of a webpage. Hugo has a feature called &lt;a href="https://gohugo.io/getting-started/configuration-markup/#markdown-render-hooks">Markdown Render Hooks&lt;/a> that makes adding these anchors easy. For a more in-depth explanation of how this works check out &lt;a href="https://pavelkorolev.xyz/blog/2020-10-31-hugo-header-anchors/">this post&lt;/a> by Pavel Korolev.&lt;/p>
&lt;div class="code-block">
&lt;p class="filepath">
layouts/_defaults/_markup/render-heading.html
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#000080">h&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">{{&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">.&lt;/span>&lt;span style="color:#008080">Level&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">}}&lt;/span> &lt;span style="color:#008080">id&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;{{ .Anchor | safeURL }}&amp;#34;&lt;/span>&amp;gt;{{ .Text | safeHTML }}
{{- if and (ge .Level 1) (le .Level 6) }}{{&amp;#34; &amp;#34; -}}
&amp;lt;&lt;span style="color:#000080">a&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;anchor&amp;#34;&lt;/span> &lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;#{{ .Anchor | safeURL }}&amp;#34;&lt;/span>&amp;gt;
#
&amp;lt;/&lt;span style="color:#000080">a&lt;/span>&amp;gt;
{{- end -}}
&lt;span style="color:#a61717;background-color:#e3d2d2">&amp;lt;&lt;/span>/h{{ .Level }}&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2 id="rss">RSS &lt;a class="anchor" href="#rss">
#
&lt;/a>&lt;/h2>&lt;p>Adding an RSS feed to the site is really quite simple with Hugo. Hugo has a default RSS template but it doesn&amp;rsquo;t quite fit my needs because I want to only have blog posts on the feed and nothing else. By default Hugo creates a feed for each section of your site but in my case I only want one feed for the root of my site and I only want it to contain pages from the blog section. To do this I followed this &lt;a href="https://benjamincongdon.me/blog/2020/01/14/Tips-for-Customizing-Hugo-RSS-Feeds/">awesome post&lt;/a> by Benjamin Congdon.&lt;/p>
&lt;h2 id="compiling-and-hosting">Compiling and Hosting &lt;a class="anchor" href="#compiling-and-hosting">
#
&lt;/a>&lt;/h2>&lt;p>When it comes to compiling and hosting I want it to be as simple as possible. I don&amp;rsquo;t want to spend time in the future messing around with all this infra or manually copying files to servers, etc. Because I&amp;rsquo;m hosting this whole repository in GitHub I just used &lt;a href="https://github.com/features/actions">GitHub Actions&lt;/a> to build my site. To do that just create the following file:&lt;/p>
&lt;div class="code-block">
&lt;p class="filepath">
.github/workflows/gh-pages.yml
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#000080">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>github pages&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#000080">on&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">push&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">branches&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- main&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#998;font-style:italic"># Set a branch to deploy&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">pull_request&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#000080">jobs&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">deploy&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">runs-on&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>ubuntu-20.04&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">steps&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000080">uses&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>actions/checkout@v2&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">with&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">submodules&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#998;font-style:italic"># Fetch Hugo themes (true OR recursive)&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">fetch-depth&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#099">0&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#998;font-style:italic"># Fetch all history for .GitInfo and .Lastmod&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000080">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Setup Hugo&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">uses&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>peaceiris/actions-hugo@v2&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">with&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">hugo-version&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#d14">&amp;#34;latest&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#998;font-style:italic"># extended: true&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000080">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Build&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">run&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>hugo --minify&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000080">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Deploy&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">uses&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>peaceiris/actions-gh-pages@v3&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">if&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>github.ref == &amp;#39;refs/heads/main&amp;#39;&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">with&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">github_token&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>${{ secrets.GITHUB_TOKEN }}&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">publish_dir&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>./public&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Once you add this file to your repo and push it to GitHub it automatically creates a workflow that executes the above job. The job runs every time there is a new change pushed to the master branch of the repo. The Job first checks out the latest commits of the master branch, installs Hugo, compiles the site, then pushes the compiled static files to the gh-pages branch of the repository.&lt;/p>
&lt;p>This is great because it means whenever I want to make a change to the site, whether that&amp;rsquo;s changing code or just adding a new blog post, I simply need to push the change to my master branch and it&amp;rsquo;ll automatically rebuild the site and push the new build to the gh-pages branch.&lt;/p>
&lt;p>For hosting I want to keep it simple as well so I&amp;rsquo;m just hosting my site on &lt;a href="https://pages.github.com/">GitHub Pages&lt;/a>. In the settings for my repository I set the gh-pages branch to be the source for the served pages and I add my custom domain so that people can access the site with my custom URL.&lt;/p>
&lt;h2 id="conclusion">Conclusion &lt;a class="anchor" href="#conclusion">
#
&lt;/a>&lt;/h2>&lt;p>And that&amp;rsquo;s it! Now I have a functioning blog that I can add new features to and expand whenever I want. It&amp;rsquo;s incredibly simple and minimal, no themes or bloated JavaScript frameworks (actually no JS at all as of right now), and it fits nicely into my existing workflows.&lt;/p></description></item></channel></rss>