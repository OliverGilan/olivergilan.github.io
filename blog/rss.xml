<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Oliver Gilan</title><link>https://olivergilan.com/blog/</link><description>Recent content in Blog on Oliver Gilan</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>blog@olivergilan.com (Oliver Gilan)</managingEditor><webMaster>blog@olivergilan.com (Oliver Gilan)</webMaster><copyright>2022 Oliver Gilan All rights reserved</copyright><lastBuildDate>Sun, 26 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://olivergilan.com/blog/rss.xml" rel="self" type="application/rss+xml"/><item><title>Believing is the Difference</title><link>https://olivergilan.com/blog/believing-is-the-difference/</link><pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/believing-is-the-difference/</guid><enclosure url="https://olivergilan.com/images/hand_holding_apple.png" type="image/jpeg"/><description>&lt;p>I have a joke that goes something along the lines of &amp;ldquo;my character flaw is genuinely believing I could do [insert highly improbable feat]&amp;rdquo;. For example I truly believe that should the need arise I could land a commercial 747 airline with no training. Except the joke isn&amp;rsquo;t that I think I can land a giant commercial aircraft with no training or expertise it&amp;rsquo;s that I am pointing out the belief as a flaw when in reality it has probably been among my greatest strengths historically. The act of believing in your ability to do something increases the odds of your success in doing said thing. I don&amp;rsquo;t quite know why that is the case but I&amp;rsquo;d like to share a few moments in my own life that highlight this phenomenon and provide some clues as to why believing can be the difference between succeeding and failing.&lt;/p>
&lt;p>Early into my high school days I became fascinated with programming. I had been playing around with the basics of html and css at that point but I wanted to build bigger and better things than static sites. I started by learning Java but even before I got to anything interesting I needed to learn how to think like a programmer and that proved far more difficult than I anticipated. The simplest problems on &lt;a href="https://projecteuler.net/about">Project Euler&lt;/a> were too difficult for me and I couldn&amp;rsquo;t wrap my head around solutions that were completely obvious because I couldn&amp;rsquo;t logically figure out how to apply loops and conditionals in the correct manner for the given problem.&lt;/p>
&lt;p>For 3 months every day after school I&amp;rsquo;d go home, open up one of these basic problems and then try to solve it for 30 minutes before giving up and studying the solution to try and reverse engineer the correct thought processes required. Then one day, sitting in math class absent-mindedly thinking about one of these problems, it clicked. I quite literally felt the neurons in my brain firing in a whole new pattern and programming has felt like a native ability ever since.&lt;/p>
&lt;p>Looking back on it, a more sane individual would have stopped trying in the face of seemingly zero progress far earlier than I did. Three months of banging your head against a wall at the &lt;em>very beginning&lt;/em> of a new skill is not a recipe for a new career path but I kept going only because I knew my older brother was already studying CS in college and if he could figure it out then so could I. The reason I&amp;rsquo;m a programmer today is because I believed (quite stubbornly) that I could be even in the face of overwhelming evidence to the contrary. That seemingly irrational belief became my reality.&lt;/p>
&lt;p>Another profound instance happened in my second semester of college while studying Calculus II. I had taken a bit of calculus my senior year of high school but it mostly encompassed Calculus I and the little Calculus II we did cover I found incomprehensible. Meanwhile at Rutgers University our Calculus II course is notoriously difficult with a high failure rate and it was common practice for students to take it over the summer at an easier community college then transfer the credits just to avoid taking it at Rutgers.&lt;/p>
&lt;p>So there I am, having heard all the rumors, breezing through the course along with a growing apprehension waiting for the other shoe to drop when we start the chapter on Sequences &amp;amp; Series. For the first time that semester I cannot make heads or tails of the material and all the fears and apprehensions crash down in what I thought was the dreaded fate of all Calculus II students. For 2 days I frantically try to see the patterns&amp;mdash;to understand the problems and their solutions&amp;mdash;in my weekly assignments. Then on a Thursday night at 11pm with one hour before my weekly assignment deadline and on the verge of a breakdown it all changed when I asked myself a question: what if I was really good at this? What if Sequences &amp;amp; Series were actually really easy to understand? What would such a world look like and how would the me in that world solve these problems? When I looked back at my paper I was staring at a different language&amp;mdash;one I could comprehend and understand with ease. The patterns composed easily before me and I began to look at Sequences &amp;amp; Series&amp;mdash;and later all of Calculus II&amp;mdash;from a different perspective.&lt;/p>
&lt;p>It feels clichÃ© to write these words. These are the type of corny feel-good dramatizations about confidence and the power of belief usually intended for a target audience of 10 and under but I&amp;rsquo;ve truly experienced these moments and they weren&amp;rsquo;t the only time. Sitting in my dorm and grasping Sequences just minutes after not understanding any of it was the most extreme manifestation of this phenomenon I&amp;rsquo;ve ever experienced but it&amp;rsquo;s happened so many times to varying degrees that I cannot discount its existence. Over short time periods like this one and longer ones over months and years, in academic subjects and athletic endeavors, in side projects and personal goals, this phenomenon of belief altering my performance continues to come up.&lt;/p>
&lt;p>Throughout my life I would claim my defining differentiator from my peers is my ability to learn new things rapidly and with ease and I believe my confidence in my ability to do so plays a large role in that. The more confident you are the less stressed you will be and the less stress you experience the more elastic your brain will be and the more elastic your brain is the faster you will learn. Whether or not that is the actual mechanism at work is irrelevant to me, however. I&amp;rsquo;ve never doubted my ability to learn something and then found it easy but every time I internalize a confidence in myself for a coming task I accomplish it with a high probability of ease and these experiences over time has cemented this as fact to me. Whether I&amp;rsquo;m under pressure (trying to land a 747 with no experience), in a totally new domain, trying to achieve something ambitious, or all of the above quickly acquiring and learning new skills is essential and believing in your ability to do that accelerates the process.&lt;/p>
&lt;p>There&amp;rsquo;s an unfortunate caveat I&amp;rsquo;ve learned which is that this doesn&amp;rsquo;t work without internalized belief. There are times when I consciously tell myself something but I do not believe it in my gut; I do not believe it &lt;em>unconsiously.&lt;/em> In those cases conscious reinforcement hasn&amp;rsquo;t been enough. This means it can be hard to put into practice the process of belief and benefit from the subsequent boost in performance which can be needed the most when you&amp;rsquo;re at your lowest. When you are beaten down and worn out&amp;mdash;when it feels like the world is against you and the walls of depression are closing in&amp;mdash;you can find yourself without the conscious power to override the defeat within your own soul. I have yet to find a reliable and deterministic method for turning conscious belief into internalized belief but I&amp;rsquo;ve compiled two broad heuristics that can be useful.&lt;/p>
&lt;p>The first is to start with a question. When your gut says &amp;ldquo;I can&amp;rsquo;t do this&amp;rdquo; no amount of gaslighting by your prefrontal cortex will convince it. If you instead pose simple questions you have a chance: &amp;ldquo;what if I &lt;em>could&lt;/em> do this? What would a world where I can do this look like?&amp;rdquo;&lt;/p>
&lt;p>We become the stories we tell ourselves about ourselves and by asking questions you give permission to the deepest parts of your soul to acknowledge its current beliefs yet also to imagine alternate narratives about itself. These narratives over time can become desires and then beliefs and then realities. When I was at my lowest point as a teenager and debating whether I should even continue the dance of life the turnaround all started with a question. By giving myself permission to imagine a better future even if that felt impossible in the moment I was able to craft a new roadmap for myself and change my reality. This does not happen always but it happens enough to make this a usable strategy. Start with a hypothetical and see where it takes you.&lt;/p>
&lt;p>The second strategy is to start with small wins. Jordan Peterson has a now famous recommendation to start the long journey of self improvement by cleaning your room. It&amp;rsquo;s great advice. Your brain is a prediction machine and it learns via reinforcement over millions of unconscious and conscious predictions about the future and then subsequent interactions with reality. When you start with a small win it subtly strengthens the connections in your brain that say &lt;em>I can do this&lt;/em> and in time it can give you the conditioning required to believe in yourself even when tackling far greater tasks than you can imagine. I have such a strong confidence in my own ability to learn new things not because I wake up and tell myself every morning that I can do it but because my brain has hundreds of thousands of experiences to draw upon where I was able to learn something new stretching all the way back to when I first learned something as basic as talking. The &lt;a href="https://en.wikipedia.org/wiki/Winner_and_loser_effects#:~:text=Testosterone%20is%20another%20compound%20whose,losing%20team's%20testosterone%20goes%20down.">winner effect&lt;/a> is real and it&amp;rsquo;s because the body operates on these subconscious internalizations more than we realize so small wins become big wins and similarly small wins become new beliefs and those beliefs lead to better performance.&lt;/p>
&lt;p>I find myself in an increasingly rationalist world that attempts to quantify everything. At a societal level this obviously has advantages but I find myself increasingly trying to surround myself with individuals that go beyond rationalism. I want to be friends with, work with, and invest in individuals who say &lt;em>I know the odds but I will win anyway&lt;/em> because I think those people are more compelling &lt;em>and&lt;/em> more likely to win. To put it simply: when two individuals with equal ability compete head-to-head the one who believes in themself will have an advantage over the one who doesn&amp;rsquo;t. If you want to achieve great things, be a great partner, a great competitor, a great founder, etc. you need some level of delusion. You need some level of blind faith in your ability to achieve what you desire because it is this blind faith that will keep you going longer than the rational individual in the face of seemingly insurmountable odds. It is this blind faith that will keep you relaxed and adaptable in the presence of pressure. It is this blind faith that will be the difference between success and everything else.&lt;/p></description></item><item><title>Just Start</title><link>https://olivergilan.com/blog/just-start/</link><pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/just-start/</guid><description>&lt;p>It&amp;rsquo;s not hard to be better than average at just about anything. You just have to show up and try. It may seem trivial or tautolically true but starting is the most reliable way to achieve whatever you want and just by doing so you separate yourself from the average person. If you have a goal then planning matters but it matters less than momentum because a rock solid plan with no momentum leaves you in the same place but action and adjustment will move you closer to where you want to go even if your plan is incomplete. In fact, the odds of you succeeding double or triple the moment you start doing something regardless of a plan because momentum compounds. &lt;a href="https://en.wikipedia.org/wiki/Winner_and_loser_effects">Past wins lead to future wins&lt;/a> so small wins become big wins and taking that first step can lead to outcomes wilder than you ever imagined. I&amp;rsquo;ve made the mistake of not starting soon enough more times than I can count in my life&amp;ndash; and I see people around me make it all the time&amp;ndash; so this seemingly obvious truth is not well internalized even by me.&lt;/p>
&lt;p>Failure to start stems from two broad patterns I&amp;rsquo;ve observed. The first is paralysis in the face of conflicting advice which happens all the time in just about every industry or field. Take an individual who is trying to lose weight and now think about all the conflicting studies, scientists, fitness experts, and influencers who have strong opinions on the best way to achieve this goal. The internet has democratized access to experts and valuable information more than ever before but in the situations where you need to be an expert to discern which expert is correct you are not far off from being completely uninformed. When this happens it&amp;rsquo;s common for to get in the mindset that you just one more opinion, to read one more study and then it&amp;rsquo;ll all be clear when the opposite is true. When faced with conflicting theories the best method is to start falsifying and gathering feedback through action. There are endless proposed methods online for sustainably losing weight but none of them involve sitting around looking at more proposed methods. Act. This happens with everything whether it&amp;rsquo;s business, excercise, cooking, music, language, etc. The act of doing will expose truths and inaccuracies about the field itself and paths to mastery will become apparent that were impossible to see before starting.&lt;/p>
&lt;p>The second and more pernicious pattern is overestimating the complexity needed to get started. Take the same individual trying to lose weight. Over months they listen to podcasts with doctors explaining how to optimize fat loss and maximize muscle growth; they watch fitness influencers for how to best execute lifts in the gym to hit different muscle groups; they create elaborate meal plans with defined macros and targets. Meanwhile they could have started by just cutting out all junk food and doing a light workout every day and it would get them 80% of the way to where they want to go. Experts are so often working at the edge of knowledge for a given field trying to find gains and novel results where no one has before meanwhile a beginner in any endeavor would see results from simpler actions. When a professional athlete talks about optimizing their workout or a musician talks about the humidity of the air or a chef talks about the techniques to perfect a delicate sauce they are actually talking about the last .1% of performance possible. If you are at the beginning of your journey you almost never need to worry about those optimizations and you will never reach the point where those optimizations matter so quickly that you do not have time to see it coming and adjust. In other words, the &lt;a href="https://en.wikipedia.org/wiki/Pareto_principle">80/20 rule&lt;/a> applies to just about anything in life and when you are starting out you get to benefit from the low-hanging actions that get you 80% of the way. This, too, feels like an effect of the internet: we have such access to masters in their field that we often forget we don&amp;rsquo;t need to be as skilled as Gordon Ramsey too cook a healthy and tasty meal or as athletic as Lebron James to be in shape. We just need to start.&lt;/p>
&lt;p>In a sense this is a rephrasing of the common startup adage &amp;ldquo;just ship.&amp;rdquo; With startups the importance of shipping is obvious and accepted yet I&amp;rsquo;ve met so many first time founders making the mistake of not shipping. It almost always comes with a lofty goal to reshape society or disrupt an industry with massive incumbents and leads to weeks writing business plans, refining pitch decks, creating wireframes and mockups, and endless theorycrafting about the idea. The goal is to launch with a product superior to the incumbents in every way; to come out the gate with such an obviously better product that society and the world has no choice but to reorganize itself around it. This startup loses every time to the one without a 50-page business plan, without a refined pitch deck, without wireframes, but with a founder that identified the one differentiator to build a simple vertical slice on and got some customers onboarded.&lt;/p>
&lt;p>In life, as in startups, the person who starts despite imperfection and iterates will always outperform the one who plans meticulously but never puts their plans into motion. The founder in motion will get customers and feedback early allowing them to provide value they didn&amp;rsquo;t even think about beforehand while the founder that only plans will never learn about the untapped opportunities provided by a customer&amp;rsquo;s needs. The individual in motion will learn what works and what doesn&amp;rsquo;t and adjust their tactics as they go while the individual that only plans will miss obvious pitfalls because the problem space for just about anything is so vast you cannot account for everything. The founder in motion will find others who want to join their mission as employees and investors while the founder that only plans will find people who only want to talk and theorycraft. The individual in motion will find communities and mentors that will help them along their journey while the individual that just plans will often plan alone. The founder and individual in motion will experience the effects of compounding results while the ones who just plan will delay the power of compounding longer and longer. The ones in motion will reach their goals while the ones who plan will constantly find new edge cases and new reasons to delay starting.&lt;/p>
&lt;p>Planning has a place and a strategist will outmaneuver and outperform brute force but plans only matter when put in motion. So whenever you&amp;rsquo;re beginning something new focus on the motion first. Focus on the basics. Take the first step. Build the momentum. Then plan once you are on your way.&lt;/p>
&lt;p>Just start.&lt;/p></description></item><item><title>Software Crisis</title><link>https://olivergilan.com/blog/software-crisis/</link><pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/software-crisis/</guid><description>&lt;p>A couple weeks ago every &lt;a href="https://fortune.com/2023/01/13/faa-computer-failure-grounded-thousands-flights-caused-2-contractors-introduced-data-errors-notam-system/">flight in the US was grounded&lt;/a> due to the meltdown of the FAA&amp;rsquo;s NOTAM system in the latest large-scale example of the &lt;em>software crisis.&lt;/em> The term was coined in 1968 to describe the rapidly expanding pace of power and use-cases for computers and the inability of the industry to keep up with the appropriate quality of software. Computers became exponentially cheaper and more powerful and thus the role of software grew but the majority of the software created at the time shared characteristics that defined the crisis:&lt;/p>
&lt;ul>
&lt;li>Over budget, behind schedule&lt;/li>
&lt;li>Frequently never completed&lt;/li>
&lt;li>Poor performance&lt;/li>
&lt;li>Difficult to maintain&lt;/li>
&lt;li>Did not meet the requirements of the end-user&lt;/li>
&lt;/ul>
&lt;p>Over the next decades some of the brightest minds in the field set to providing solutions for the crisis and out of those efforts we got a number of new languages, programming paradigms, philosophies, and methodologies. Procedural programming and C brought a paradigm shift in the way programmers reason about and build software. Later Object-Oriented Programming and languages such as Java did the same. Methodologies like waterfall, spiral, rapid, incremental, continuous integration, etc. started popping up all with the aim of taming the complexity and solving the crisis&amp;ndash; or at least a part of it. Then in February 2001 the Agile Manifesto was released and took the industry by storm. Today every software team from the smallest startups to the largest enterprises proudly wave the flag of the Agile development process.&lt;/p>
&lt;p>And today, 2 decades after the birth of Agile and with further developments such as BDD, TDD, DDD, and every other acronym you can think of, the characteristics of software that marked the crisis are as prevalent as ever. NOTAM melted down because a contractor introduced incorrect data; because the system &lt;em>let&lt;/em> him introduce that data. Over a million organizations use Microsoft Teams, a basic chat app that constantly crashes, consumes memory, and straight up fails to work on many machines. Twitch, a streaming platform with 31 million users, takes upwards of 10 seconds to render on my 6 year old MacBook. Companies (and the &lt;a href="https://techbeacon.com/security/nsaarmys-inscom-leaks-top-secrets-aws-bucket-look-ma-no-password">NSA&lt;/a>) routinely &lt;a href="https://www.securityweek.com/aws-s3-buckets-exposed-millions-facebook-records#:~:text=The%20company's%20researchers%20identified%20an,%2C%20likes%2C%20and%20Facebook%20IDs.">expose customer data&lt;/a> by forgetting to add authentication to their public AWS S3 buckets. Outdated software keeps people in &lt;a href="https://kjzz.org/content/1660988/whistleblowers-software-bug-keeping-hundreds-inmates-arizona-prisons-beyond-release">prison&lt;/a> when legally they should be free. Browsers have a never-ending appetite for RAM and now desktop apps built on those browser engines have adopted a similar palate. New front-end projects using the most popular frameworks are saddled with dependencies for dependencies for dependencies each one increasing the &lt;a href="https://www.bleepingcomputer.com/news/security/dev-corrupts-npm-libs-colors-and-faker-breaking-thousands-of-apps/">surface area&lt;/a> for attack. Peek into the average enterprise codebase and you&amp;rsquo;ll find hundreds of lines of boilerplate code, unnecessary abstractions&amp;ndash; factories and providers and complex inheritance schemes&amp;ndash; along with dependency injection and a variety of other patterns complicating code so that a useless unit test becomes a little more sane to write. Kubernetes and microservices designed to decouple independent pieces of software now add latency, orchestration complexity, and interface coupling across multiple runtimes and software teams. Large-scale government software systems routinely experience &lt;a href="https://news.ycombinator.com/item?id=34440228">outages&lt;/a>, &lt;a href="https://krebsonsecurity.com/2022/02/report-missouri-governors-office-responsible-for-teacher-data-leak/">data leakage&lt;/a>, and &lt;a href="https://www.cnn.com/2022/05/18/politics/software-bug-warning-vmware/index.html">exploitation&lt;/a> and the default state for new government software projects is &lt;a href="https://www.standishgroup.com/sample_research_files/Haze4.pdf">failure&lt;/a>. The crisis is ongoing.&lt;/p>
&lt;p>The Standish Group conducts a study every year on the state of software development in the industry and publishes a &lt;a href="https://www.standishgroup.com/sample_research_files/CHAOSReport2015-Final.pdf">Chaos Report&lt;/a> with its findings going back to 1994. Agile dominates the industry as the primary methodology employed in most software projects yet the success rates are still dismally low.&lt;/p>
&lt;figure>&lt;img src="../images/software_project_success_table.png"
alt="Software Project Outcomes Table"/>&lt;figcaption>
&lt;p>Software project outcomes by project size&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;!-- ![Software Project Success Table](/images/software_project_success_table.png) -->
&lt;p>Read the &lt;a href="https://www.standishgroup.com/sample_research_files/CHAOSReport2015-Final.pdf">full 2015 report&lt;/a> for definitions on project size and resolution status. When the project size is small success rates are high and only a few projects fail. As projects increase in size the success rates drop with a 41% drop just from a small to a moderately sized project. We built solutions to the problems software development faced in the 1900s but those solutions were outpaced by the requirements of software as it ate the world. The outcomes in the Chaos Report read like an O(n&lt;sup>2&lt;/sup>) algorithm and our efforts to solve the crisis are being dwarfed by the exponential growth in importance and scale of software.&lt;/p>
&lt;p>In retrospect OOP is mostly a bad idea for software at scale (that&amp;rsquo;s for another time) and it&amp;rsquo;s unsurprising that Agile didn&amp;rsquo;t overcome that to solve the crisis. The &lt;a href="https://agilemanifesto.org/">original manifesto&lt;/a> is only 12 principles and 68 words. There&amp;rsquo;s too much room for interpretation and not enough specifics on how it should be applied and used in various software development scenarios. In a sense dedicating effort to solving the crisis mirrors the problem most teams face with tech debt: you don&amp;rsquo;t need perfect software to be successful. You can build the most technically sound application but it won&amp;rsquo;t generate any revenue if it doesn&amp;rsquo;t actually solve a problem and add value to customers. Inversely you can build wildly successful products with horrific code because the bar is so low and people will use something imperfect if it solves their problem over something perfect that doesn&amp;rsquo;t. The startup graveyard is littered with technically sound products that lost because the technically unsound products actually shipped.&lt;/p>
&lt;p>The problem is made worse by the concentration of software engineering talent. As software eats the world its importance in every industry from agriculture to manufacturing to defense to logistics to government elections and beyond is growing but the most talented software engineers are found in the companies focusing exclusively in the world of bits and predominantly in the big tech companies. It makes sense for engineers to aim for those companies: regardless of the pay, lifestyle, and status, (all of which are significant by the way) those big companies were once small companies pushing the boundaries of technology and revolutionizing the world with new search engines, operating systems, social graphs, etc. Now a top engineer going to work for Google will utilize their talents far less than if they modernized the software used in global shipping instead. Startups push the needle on this problem of talent concentration but they do little to address the hundreds of legacy companies and industries that affect our everyday lives and need software talent. There may not even &lt;em>be&lt;/em> enough software talent to address the needs of all those companies and any solution to the software crisis will have to address that.&lt;/p>
&lt;p>Progress is being made. Firebase, Supabase, and Pocketbase bring backends and databases to the world of front-end devs and full-stack frameworks like NextJS, SvelteKit, Remix, etc make it easy to build and manage an application of decent scale with just a couple engineers. User-friendly cloud platforms like Heroku, Digital Ocean, Render, Fly.io, and others have removed the deployment complexities of small projects so teams can focus more on the product and less on the infrastructure. The tools to build software at a small scale are better than ever catalyzing an explosion in the number of individuals and small teams building profitable products. These improvements, however, are confined to building small-scale, highly focused, software-only products focused on solving specific tasks and have not affected the outcomes of software at scale. The scale and requirements of the software needed in enterprise and nation-scale systems is a whole different beast and gains in small-scale software development haven&amp;rsquo;t translated over.&lt;/p>
&lt;p>If 90% of bridges built collapsed before they were finished the world would look very different than it does today yet 91% of medium sized software projects fail and our industry treats this as normal. Just as competent engineering teams should dedicate time to address technical debt so too should our industry re-acknowledge the ongoing crisis and dedicate efforts to solving it. We need solutions that allow for consistent success in developing good software at scale in our most important industries. That might start by creating an industry-wide definition for what &lt;em>good&lt;/em> software even means. I have no big answers but I have conviction that this problem of software development can be solved. There won&amp;rsquo;t be a silver bullet that can address software creation in every scenario but the majority of software systems can surely be classified into a handful of categories with best practices and methodologies for each. Likely those methodologies that work best for each scenario already exist and what&amp;rsquo;s required is the synthesis of these ideas into frameworks for management, engineering, and design along with the subsequent education and adoption by the industry at large.&lt;/p></description></item><item><title>Where No-Code Fails</title><link>https://olivergilan.com/blog/where-no-code-fails/</link><pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/where-no-code-fails/</guid><enclosure url="https://olivergilan.com/images/nocode.jpg" type="image/jpeg"/><description>&lt;p>I read &lt;a href="https://github.com/getlago/lago/wiki/Post-mortem-of-our-1st-YC-startup:-a-Reverse-ETL">this&lt;/a> postmortem today from a YC company that pivoted from their first idea as a no-code reverse-ETL tool. The post was interesting to me for a couple of reasons:&lt;/p>
&lt;ol>
&lt;li>My current company &lt;a href="https://getcensus.com">Census&lt;/a> is in the same space trying to solve the same problem they pivoted away from&lt;/li>
&lt;li>The problem they ran into that ultimately led to their pivot is a problem I believe exists more generally for a number of companies specifically in the no-code space.&lt;/li>
&lt;/ol>
&lt;p>Regarding (1) Census actually ran into the same wall they hit but we have a very exciting solution that we are actively shipping and we&amp;rsquo;re confident this will turn into one of our greatest strength as a product. I&amp;rsquo;d like to write a post about that but for now I want to focus on (2) and it&amp;rsquo;s how I see this problem affecting no-code tools that exist today. The problem is this: no-code tools are sufficiently complex that non-engineers are unwilling or incapable of effectively using them while engineers are unwilling to use them because they don&amp;rsquo;t actually make our lives significantly easier where it matters.&lt;/p>
&lt;p>No-code isn&amp;rsquo;t a new concept with products like Wordpress, Squarespace, Wix, Shopify, etc. pioneering the space in different ways. Historically, though, these tools focused on static sites or domain specific problems such as e-commerce. Recently there&amp;rsquo;s been a crop of new VC-funded tools like &lt;a href="https://webflow.com/">Webflow&lt;/a>, &lt;a href="https://bubble.io/">Bubble&lt;/a>, &lt;a href="https://thunkable.com/">Thunkable&lt;/a>, &lt;a href="https://www.adalo.com/">Adalo&lt;/a>, and many more that aim to allow for the creation of general web and mobile apps with much more complex lifecycles and abilities. They&amp;rsquo;re interesting and they show promise but I believe they operate in an uncanny valley-esque situation where they don&amp;rsquo;t actually solve the hard part about building apps making them too difficult for most non-engineers and not useful for existing engineers leading to their TAM being quite small.&lt;/p>
&lt;p>I first noticed this problem with tools designed to simplify the building of tech in high school. Both of my parents own small businesses and I have watched them on more than one occasion struggle to build websites through Squarespace and Wix. It didn&amp;rsquo;t matter that those tools were barely more than templates with customizable sections&amp;ndash; not even flexible enough to be called drag-and-drop&amp;ndash; it was still a challenge for them. After spending hours on a site they&amp;rsquo;d end up with dark font on dark backgrounds, overflowing paragraphs and images, misaligned buttons, etc. I consider both my parents to be smarter than average yet they are certainly not technical and those no-code tools to build simple static pages were still not easy enough. I&amp;rsquo;m not sure either of them would stand a chance with Bubble or Webflow which indicates to me that neither would at least half the population. Beyond just writing the code there are patterns and concepts around building a functional site that they didn&amp;rsquo;t understand at the time which meant their ability to use these no-code tools effectively was limited. In the end they both had someone else build the sites for them.&lt;/p>
&lt;p>Since then both my parents have become more tech-literate and they&amp;rsquo;ve actually become quite capable at times especially when using things like Canva and Wix so I do not think these tools were failures&amp;ndash; their success financially is well established&amp;ndash; it&amp;rsquo;s just that at the end of the day they are used to build simple products. Creating an average web app with the features and capabilities expected by users today is an order of magnitude more complex than creating a static site with Wix. It may be that in time individuals like my parents will learn the concepts around building web apps and be able to use a no-code tool like Bubble effectively but I&amp;rsquo;m not convinced if for no other reason than because most people have no idea how to model data.&lt;/p>
&lt;p>Fundamentally when you take away all the implementation details my job as a software engineer is to design a system to solve a specific problem under certain constraints. This amounts pretty much entirely to:&lt;/p>
&lt;ol>
&lt;li>Defining the shape and transformations of the data model
&lt;ul>
&lt;li>What data is required versus optional?&lt;/li>
&lt;li>What do inputs and outputs look like?&lt;/li>
&lt;li>How does the data transform throughout its lifecycle?&lt;/li>
&lt;li>What relationships exist within the data model?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Defining the characteristics of the system to allow for the necessary data model within our constraints
&lt;ul>
&lt;li>What security is necessary?&lt;/li>
&lt;li>What availability and uptime is required?&lt;/li>
&lt;li>What performance is expected?&lt;/li>
&lt;li>What failure modes are acceptable?&lt;/li>
&lt;li>What should costs be?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>The de-facto way to do the above tasks today is to write code, usually lots of it, which is complex and error-prone and yet it&amp;rsquo;s flexible and expressive and has had decades of smart people creating new languages and libraries and tools to help perform those tasks as easily as possible. I haven&amp;rsquo;t used a no-code tool that measurably improved my ability to perform any of the above tasks and they often make it harder. Often there&amp;rsquo;s no clear data modeling part of the tool at all; if there is then you&amp;rsquo;re probably limited on what types you can use or define. How the data is transformed and manipulated is not easily defined. Properties of the end-system like security and performance and errors are almost always non-existent. Performance and availability are usually just straight up functions of cost for what plan you&amp;rsquo;re using on a given tool and lack granularity.&lt;/p>
&lt;p>The end result is that the difficult part about building full-fledged applications&amp;ndash; the reasons why software engineers get paid so much&amp;ndash; isn&amp;rsquo;t any easier which means it&amp;rsquo;s still a massive barrier to entry for someone who isn&amp;rsquo;t used to doing that sort of engineering. And for someone who is used to doing that sort of engineering it&amp;rsquo;s not a great value prop because that person probably already knows how to code and doesn&amp;rsquo;t find that to be their primary roadblock. To them the no-code tool becomes just another framework or language they need to learn to implement the system they&amp;rsquo;re envisioning and it&amp;rsquo;s less expressive and more proprietary with less skill-transfer than what they&amp;rsquo;re used to.&lt;/p>
&lt;p>No-code isn&amp;rsquo;t destined to fail forever, though. There is certainly a type of person who is smart enough to model these systems and yet doesn&amp;rsquo;t know how to code or who does know how to code but doesn&amp;rsquo;t like to/isn&amp;rsquo;t very good who will find great value in these tools. I just think that&amp;rsquo;s probably a smaller market than most people realize and the success of these tools hinges upon expanding that slice of people. They can do that by trying to attract more non-programmers and teaching them the requisite knowledge around building systems (hard!), or attracting existing engineers by making their tools powerful enough to model systems as robustly as regular code (also hard!). It&amp;rsquo;s this second possibility that excites me, though, especially with things like GPT. As mentioned, writing code is slow, error prone, complex, and hard to maintain. It&amp;rsquo;s a &lt;em>distraction.&lt;/em> I can envision a future where software engineering is quite literally just defining the properties of the system and a mix of AI and program synthesis does the work of actually implementing it. Lastly, I think for existing engineers no-code holds an interesting possibility in the front-end space. If I could design an entire front-end in a visual builder such as Figma but also have the tooling to seamlessly hook it up to my backend, manage state properly, handle data fetching, etc. then I think that has a chance to be wildly successful but nothing I&amp;rsquo;ve tried really nails this yet.&lt;/p>
&lt;p>No-code has a future but I do not think it looks like the current rendition of what we&amp;rsquo;re seeing. At a certain level writing actual code isn&amp;rsquo;t the hard part around building apps and these tools need to lean more into empowering engineers to model their systems effectively while being interoperable. In the end I suspect the winners of this space will be much more low-code than no-code.&lt;/p></description></item><item><title>Goals for 2023</title><link>https://olivergilan.com/blog/goals-for-2023/</link><pubDate>Sun, 11 Dec 2022 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/goals-for-2023/</guid><description>&lt;p>New Year&amp;rsquo;s resolutions are mostly corny and not a very good way to achieve the sorts of lifestyle changes that people hope to achieve with them but it is important to set goals and then take time to reflect on your progress towards said goals at a regular frequency. I like to think of my life in terms of chapters or &lt;a href="https://en.wikipedia.org/wiki/Story_arc">narrative arcs&lt;/a> that usually last multiple years and contain different experiences, lessons, and character developments. Thus my goals generally act more as themes for a given arc along with some specific quantifiable milestones that help me track my progress. Once a year is too infrequent to effectively reflect on my progress and update my milestones but the holidays and the turn of the year is nevertheless a good time to take stock of where I am and where I&amp;rsquo;m headed.&lt;/p>
&lt;p>Currently I&amp;rsquo;m focusing on the following broad areas of my life.&lt;/p>
&lt;ul>
&lt;li>Career&lt;/li>
&lt;li>Health&lt;/li>
&lt;li>Adventure&lt;/li>
&lt;li>Mind&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s start with my career. I work as an engineer at &lt;a href="https://www.getcensus.com/careers?utm_source=workwitholiver">Census&lt;/a> and I fucking love my job. For the first time since middle school I feel like I&amp;rsquo;m not only being challenged but the training wheels are off and I get to run full speed. It&amp;rsquo;s really the perfect situation for me. I spend the majority of my time writing new features, fixing and improving our systems, and learning from my founders and colleagues. Everyone I work with has an equally high IQ as well as EQ making it one of the most exciting groups I&amp;rsquo;ve ever been a part of and I trust our ability to achieve the mission. Success is not a given here and I wake up every day aware that my actions will have a direct effect on the outcome of the company, an experience that stands in stark contrast to my time at Microsoft. While here I&amp;rsquo;m meeting some awesome people that I hope to work with in the future even beyond Census and I am gaining the skills to become a far better engineer and founder. It feels like every week I learn something new that will help me down the road when it comes to starting my own company. So this year for my career I want to&lt;/p>
&lt;ul>
&lt;li>Get involved with interviewing and hiring&lt;/li>
&lt;li>Learn about LLMs and how they work because AI might change how my career looks completely&lt;/li>
&lt;li>The rest of the goals here are redacted ;)&lt;/li>
&lt;/ul>
&lt;p>When it comes to my health my goals follow from last year. I want to continue healing my gut and putting on the weight I lost during the two years of my illness in 2019-2021. I currently weigh about 145 lbs, up 10 lbs from a year ago, with a height of 5'10 and by next year I want to weigh at least 155 lbs putting me just shy of my 160 lbs body-weight pre-illness. In terms of general fitness I am pivoting from focusing primarily on strength training and instead I want to increase my endurance and stamina as well as my flexibility. Gut health, stamina, and flexibility will be the core foundations upon which I build an unbreakable body. So this year for health I want to&lt;/p>
&lt;ul>
&lt;li>Weigh 155 lbs by EOY&lt;/li>
&lt;li>Run 10 miles at a pace of 8 minutes a mile&lt;/li>
&lt;li>Be capable of performing a split&lt;/li>
&lt;li>Perform reps on the ab wheel from a standing position&lt;/li>
&lt;/ul>
&lt;p>When it comes to adventure I have definitely been disappointed the past few years. COVID robbed two key years of my life and I graduated college a semester early just to have Omicron bar me from traveling throughout Asia as planned. And then I ended up moving to NYC (which was a bit of an adventure) but I grew up around here my whole life. I need to get out of the tri-state area and go see new places, experience different cultures, and meet different people. With COVID gone and my health mostly back to normal I want to put more emphasis on doing fun shit and injecting some chaos into my life before I pick up too many obligations and settle down. My character arc demands it. Having said that my career right now is crucial. I simply cannot be backpacking across Europe or working remotely in Asia while I&amp;rsquo;m grinding and trying to build something successful at Census. There are other things I can do, though, like&lt;/p>
&lt;ul>
&lt;li>Live in San Francisco for a month and work out of Census HQ&lt;/li>
&lt;li>Travel alone to a country that speaks a foreign language&lt;/li>
&lt;li>2-day motorcycle trip across the Moroccan desert&lt;/li>
&lt;li>Wild card adventure&lt;/li>
&lt;/ul>
&lt;p>The last big area of focus I want to touch on is my mind and more specifically, my communication. This primarily encompasses my writing and this blog (but also on rebuilding the confidence I lost the past three years). I&amp;rsquo;m happy I started this blog last year and I want to start publishing more often and more consistently. Writing is one of the few things that I simply cannot do while multitasking so to write more consistently I&amp;rsquo;ll have to be more disciplined about dedicating time to step back from everything else that&amp;rsquo;s going on and focus just on writing. This is a net positive. I wish for this blog to be more than just a technical resume-esque website and instead I want it to better reflect my mind and ideas, even the non-technical ones. I want to write about my various interests and what I&amp;rsquo;ve learned. I want to worry less about only posting complete thoughts and focus more on just posting what I think is interesting. At the end of the day this blog serves as a public extension of my private journal and I want to increase the surface area of that which I show, NOT because I want to build an audience (this blog literally has zero analytics of any kind and I am not interested in being a &amp;ldquo;creator&amp;rdquo;) but because I think that&amp;rsquo;s what makes the internet interesting. To that end I want to&lt;/p>
&lt;ul>
&lt;li>Post at least once a month on this blog&lt;/li>
&lt;li>Share my writing more publicly&lt;/li>
&lt;li>Add a blogroll of other independent blogs I am inspired by&lt;/li>
&lt;li>Write some non-technical posts about topics such as education, my illness, etc.&lt;/li>
&lt;/ul></description></item><item><title>I Was Wrong</title><link>https://olivergilan.com/blog/i-was-wrong/</link><pubDate>Sun, 04 Dec 2022 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/i-was-wrong/</guid><enclosure url="https://olivergilan.com/images/d2_neural_net.png" type="image/jpeg"/><description>&lt;p>I&amp;rsquo;m pretty proud of the fact that last year around October I pulled out of my crypto positions and largely switched my stance regarding the technology. For months at every party and get-together with other tech folks I was the only one in the room voicing my skepticism about the industry. I have been vindicated for the time being but the victory is sour because as I was excitedly exploring crypto to its natural conclusion I was neglecting and horribly mistaken about an adjacent industry: AI. When AI started to build hype around 2012 with things like IBM&amp;rsquo;s Watson and then Google Deepmind it was very exciting. I did Google&amp;rsquo;s machine learning course and learned the concepts behind those networks but came away unimpressed. It felt like powerful curve fitting with some very narrow applications but it certainly wasn&amp;rsquo;t anywhere close to general intelligence. Nevertheless the hype grew and startup after startup popped up with &amp;ldquo;AI&amp;rdquo; in the name promising magical results. Most of these startups weren&amp;rsquo;t even attempting to use neural networks to solve their problems&amp;ndash; a fact that more than one founder has openly admitted to me&amp;ndash; and the hype didn&amp;rsquo;t seem to be leading anywhere.&lt;/p>
&lt;p>That doesn&amp;rsquo;t mean there weren&amp;rsquo;t cool results; there certainly were but they were mostly academic or they seemed to be indicative of Moore&amp;rsquo;s law and how far computing had come as opposed to some fundamentally new type of software. AI became a buzzword and anyone using it was either talking about social media recommendation engines, self driving, or straight up bullshitting. Sometimes all 3.&lt;/p>
&lt;p>So I lost interest. It seemed like unjustified hype and then it seemed to plateau for a number of years and every time someone brought up the idea of AI to me I dismissed it and its potential impact. Candidates like Andrew Yang ran on a platform of increasing automation and how AI would replace jobs and I simply didn&amp;rsquo;t buy it. I still don&amp;rsquo;t fully buy it, for what it&amp;rsquo;s worth, but I now see a viable path to mass automation (whether this is catastrophic for workers or instead creates more abundance than humanity has ever seen is yet to be seen). Whenever it was brought up it was in the context of AGI or solving self driving, two problems that weren&amp;rsquo;t even remotely close to being solved but in dismissing those usecases I completely missed the slow and steady progress taking place in the field. Then things began rapidly and consistently changing with the release of GPT-3.&lt;/p>
&lt;h3 id="gpt--the-rise-of-llms">GPT &amp;amp; The Rise of LLMs &lt;a class="anchor" href="#gpt--the-rise-of-llms">
#
&lt;/a>&lt;/h3>&lt;p>GPT-3 was released in June of 2020 and it was obviously different than any other &amp;ldquo;AI&amp;rdquo; I had seen. It&amp;rsquo;s capability to respond to a variety of prompts and the quality of the responses was clearly on a different level even though it was still limited. It did fail for certain topics and was happy to spout impressive-sounding babble that didn&amp;rsquo;t actually mean anything and any attempt to have an ongoing conversation would quickly break down. Still, it forced me to step back and ask: is this going to change the world? My response at the time was no because of GPT-3&amp;rsquo;s obvious limitations and my implicit assumption that we were in for another decade-long plateau in the power of these models.&lt;/p>
&lt;p>Then DALLÂ·E was released at the start of 2021 and a year later DALLÂ·E 2 and I was blown away by it&amp;rsquo;s ability to understand certain concepts and synthesize images based off that. It was the first time I began to wonder if maybe there was some fundamental understanding of concepts happening in these models. But I thought to myself: this is impressive but is it practical? How expensive is it to train such a model? How accessible is this tech really? But then Midjourney and Stable Diffusion followed quickly after which blew that notion away. Now ChatGPT&amp;ndash; which is basically just the GPT-3 model with some filters and context tracking&amp;ndash; has displayed a level of intelligence and understanding that I never thought I&amp;rsquo;d see from a machine in my lifetime. And to top it all off, GPT-4 is rumored to be almost ready and is expected to be as a big a leap from GPT-2 to GPT-3. It&amp;rsquo;s safe to say my implicit assumption of a plateau in AI tech was wrong and things seem to instead be speeding up.&lt;/p>
&lt;p>Admittedly at the time of writing I don&amp;rsquo;t actually know how these models work at all. Back in the machine learning craze about 8 years ago I did some Google machine learning courses and learned the concepts around those systems. From what I&amp;rsquo;ve heard basically everything from back then is outdated and these systems operate under completely different principles. It&amp;rsquo;s very possible we&amp;rsquo;re not even scratching the surface of what these new models are capable of and this may just be the beginning of exponential growth in capability for LLMs. Such a thought is truly frightening.&lt;/p>
&lt;p>It&amp;rsquo;s worth mentioning that I &lt;em>still&lt;/em> don&amp;rsquo;t believe these models are conscious, whatever consciousness even is, but this brings me to my second mistake. I didn&amp;rsquo;t believe we were headed to general intelligence in the sense that we could create a computer that thinks like a human but that&amp;rsquo;s sort of missing the forest for the trees. If GPT becomes 10x more powerful than it is today it doesn&amp;rsquo;t really matter if it&amp;rsquo;s &amp;ldquo;conscious&amp;rdquo; or not because it&amp;rsquo;ll still be capable enough to perform a bunch of human functions and significantly affect the structure of society as we know it. In fact the whole question of consciousness has started to feel ancillary and while I have my theories around where consciousness comes from and how it can possibly be created in a machine it all feels largely irrelevant right now. It seems to be the case that consciousness is not a prerequisite for intelligence and instead the opposite is probably true.&lt;/p>
&lt;h3 id="emergence-of-ai--crypto">Emergence of AI &amp;amp; Crypto &lt;a class="anchor" href="#emergence-of-ai--crypto">
#
&lt;/a>&lt;/h3>&lt;p>As an aside, I find it amusing that we are seeing this emergence of AI in parallel with the emergence of crypto. Both technologies started with niche groups of highly technical individuals building new technology to solve a problem. During the last crypto cycle, though, we saw it really grab hold with &amp;ldquo;finance bros&amp;rdquo; and entrepreneur types; the type of person who likes the bling and flashiness of a place like Miami and envisions a future where they are the founder of the next big consumer social startup. This isn&amp;rsquo;t a knock against anyone of such description but the result was that everyone I knew in crypto fell into two buckets: extracting as much wealth as possible through financial market mechanisms like arbitration (or outright scams if they werent technical) or they were desperately trying to build the big usecase for crypto. Social apps, gaming, emerging market loans, ads, etc. Especially near the end it felt like everyone had an idea on how to make crypto useful in the real world and everyone wanted to claim that throne.&lt;/p>
&lt;p>In contrast, the AI space still feels overwhelmingly technical. It&amp;rsquo;s as though the entrepreneur-lifestyle type of person who 6 years ago would have started a company with AI in the name just to attract investors has since pivoted to crypto and they haven&amp;rsquo;t yet pivoted back. Maybe they&amp;rsquo;re burnt out from going all in on an industry that doesn&amp;rsquo;t seem like it&amp;rsquo;ll pan out, maybe higher interest rates prevents this behavior, or maybe they just haven&amp;rsquo;t caught on yet to whats been happening with with these new models but everyone I know who&amp;rsquo;s interested in AI is interested in building the models themselves not in end-user applications. As a result I think there&amp;rsquo;s a lot of alpha to be had right now in building the actual customer-facing tools powered by the models instead. We will absolutely see a massive crop of AI startups in the immediate future but for now the low hanging fruit is all still there.&lt;/p>
&lt;h3 id="pitfalls-of-ai-startups">Pitfalls of AI Startups &lt;a class="anchor" href="#pitfalls-of-ai-startups">
#
&lt;/a>&lt;/h3>&lt;p>I do think there are some pitfalls to watch out for if you plan on creating a product built around AI. The first is with the models themselves. GPT is incredibly impressive yet obviously limited and prone to just making stuff up or spitting out senseless babble. It would be a challenge to trust its output with anything critical but also using an automated system to sanitize or correct the output is very difficult because it&amp;rsquo;s generally completely unstructured.&lt;/p>
&lt;p>Secondly, and the biggest risk in my opinion, is the platform risk of relying on a company like OpenAI. We just saw how a company as big as Facebook could be brought to its knees because of the decision by executives at Apple. Building on top of GPT would represent an even bigger platform risk than that and absolutely needs to factor in to any business decision and it&amp;rsquo;s something that should scare the shit out of any startups trying to use OpenAI&amp;rsquo;s tools. The way around this is to only use open source models like Stable Diffusion and Midjourney&amp;ndash; but there&amp;rsquo;s no guarantee there will be any comparable open source models for something like GPT-4 and later models&amp;ndash; or to just accept the risk and dedicate a significant amount of revenue and resources to building your own models right from the start. I&amp;rsquo;m willing to bet we&amp;rsquo;ll see a &lt;em>lot&lt;/em> of AI companies that end up being successful going that route. If you can start with GPT and build a valuable product and start generating revenue you can then use that revenue to build in-house models that let you deleverage the platform risk. That&amp;rsquo;s easier said than done, though. It remains to be seen how easy building such models will be. It&amp;rsquo;s possible that once it&amp;rsquo;s demonstrated that such a model can be built it then becomes easy to reproduce and that most of the cost is in the initial research and experimentation.&lt;/p>
&lt;p>There&amp;rsquo;s a third less obvious risk but it&amp;rsquo;s that the space might simply be moving too fast to reliably build a customer-facing product. Maybe GPT-4 comes out and you immediately start building a product powered by it. A year later you&amp;rsquo;ve shipped the first version and acquire some customers but then another year later GPT-5 comes out and completely commoditizes your abilities. Would you be able to simply upgrade models? Are they plug-and-play? It&amp;rsquo;s probably not so straightforward which means that building right now introduces a risk of becoming outdated very quickly. This is a pretty unique risk but one that should be considered.&lt;/p>
&lt;h3 id="evaluating-potential-ai-startups-ideas">Evaluating Potential AI Startups Ideas &lt;a class="anchor" href="#evaluating-potential-ai-startups-ideas">
#
&lt;/a>&lt;/h3>&lt;p>One of the interesting phenomenons I&amp;rsquo;ve noticed with GPT and other LLMs is they are extremely impressive and yet it is very difficult to envision just how these models can be or might be used. The obvious low hanging fruit is there: AI profile pictures and picture book illustrations with DALLE, musical lyrics, poetry, different flavors of chatbots with GPT, etc. Those are certainly valid usecases yet none of them are venture-scale and I&amp;rsquo;ve had trouble of thinking about what can be done that &lt;em>is&lt;/em> venture-scale. I&amp;rsquo;ve been using the following framework to evaluate what sort of products and businesses would work well with a GPT-like model:&lt;/p>
&lt;p>&lt;strong>Domain w/ Clear Boundaries&lt;/strong>
Avoid completely open ended domains like &amp;ldquo;browsing the internet.&amp;rdquo; This just feels like a problem space that is too vast to reliably and consistently engineer these models to handle properly. If you are going to build an AI product to browse the internet instead have it focus only on a select number of websites and with a set number of actions. A digital assistant could reliably navigate to Google Calendar and manage a schedule. Then again, if it&amp;rsquo;s too simple of a domain then you &lt;em>probably&lt;/em> don&amp;rsquo;t even need an LLM and would see better results with just plain ol' software. Going back to the previous example, once you&amp;rsquo;ve captured user intent it&amp;rsquo;s trivial to use Google Calendar&amp;rsquo;s API to just automate someone&amp;rsquo;s calendar without any AI involved.&lt;/p>
&lt;p>&lt;strong>Pick Your Edge Cases Wisely&lt;/strong>
Any domain that is simple enough to not have any edge cases might be too simple to justify using something like GPT. Therefore you probably want to pick a domain with some type of long tail of edge cases but you should evaluate these cases very carefully and pick the problems where the edge cases aren&amp;rsquo;t critical. This is why I don&amp;rsquo;t like self driving as a problem space. There&amp;rsquo;s a seemingly infinite number of edge cases and getting it wrong on any of them can lead to catastrophic outcomes. Similar with something like a therapy chatbot. You only need it to mess up once and it creates dramatic harm.&lt;/p>
&lt;p>&lt;strong>Reduce Scarcity&lt;/strong>
One funny observation about GPT, DALL-E, Stable Diffusion, etc. is that so far they&amp;rsquo;ve really only reduced the scarcity of things that are alread post-scarcity. Sure making digital art more accessible reduces its scarcity but it&amp;rsquo;s not like there was a drought of good artists. Similarly generating 1 paragraph blurbs isn&amp;rsquo;t exactly reducing the scarcity of anything. Even at its best generating song lyrics or poems etc. isn&amp;rsquo;t dramatically reducing the scarcity of whatever its generating. It&amp;rsquo;s not as though you can&amp;rsquo;t be successful making music using GPT and you can probably even make a GPT-based product designed to help musicians but it doesn&amp;rsquo;t feel like a very defensible position and it also won&amp;rsquo;t change the world. Of course, changing the world is overrated and not everything has to be venture-scale but for the sake of this excercise it&amp;rsquo;s worth keeping in mind.&lt;/p>
&lt;p>So the real question going forward is: can this product effectively reduce the scarcity of something with extreme value? And can it do that by effectively navigating a clearly defined domain consistently enough with much greater efficiency than human counterparts? And when it messes up are those mistakes easy to spot and correct preferrably in an automated fashion? It&amp;rsquo;s definitely difficult to think about problems that fit all those criteria but they exist simply because of P != NP. That is, we currently have tons of humans doing jobs that are really tedious and manual and very automatable with AI and otherwise. Actually doing the work takes NP time but checking that the solution for the work is correct can happen a lot faster. So even if your product requires human oversight it can still potentially provide massive efficiency gains. Hint: I think paralegals and investment banking analysts fit this criteria perfectly and you could probably create a GPT-based product to have one individual do the work of 20 in these fields.&lt;/p>
&lt;p>I will not personally be pursuing any ideas around GPT right now but one of my big goals this year is to better understand the tech behind these large language models. Currently my stance is that there&amp;rsquo;s probably a 30% chance that these models end up being a more impactful invention than the iPhone and the internet combined. There&amp;rsquo;s still a massive chance they turn out to be impressive and fun and even useful but not revolutionary and yet&amp;hellip; 30% is quite a big chance to upend the world.&lt;/p></description></item><item><title>My Brain is Single-Threaded</title><link>https://olivergilan.com/blog/single-threaded-brain/</link><pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/single-threaded-brain/</guid><enclosure url="https://olivergilan.com/images/Single_Road.jpg" type="image/jpeg"/><description>&lt;p>I used to multitask a lot. My girlfriend in college would enter my room and see me gaming on one monitor, watching NFL Redzone on another, and completing school assignments on my laptop. I&amp;rsquo;ve since consciously and aggressively reduced the number of tasks I work on at any given time, especially as those tasks require deeper and more intense focus. This change was a response to a gradual realization that my brain is &amp;ldquo;single-threaded&amp;rdquo; in nature and any meaningful work requires minimizing costly context switching.&lt;/p>
&lt;p>I began really noticing it Junior year of college once I got to higher level maths and programming courses. When completing assignments I often found myself turning off everything including any music playing and working in complete silence, sometimes even with my phone locked away in a drawer if necessary. I was being challenged in a way that required genuine focus without distraction. It&amp;rsquo;s not that I physically couldn&amp;rsquo;t have a football game on in the background it&amp;rsquo;s just if I did I wouldn&amp;rsquo;t have noticed a single thing happening in it and if I did then it meant I had lost my flow state.&lt;/p>
&lt;p>It still wasn&amp;rsquo;t very often when I had assignments that challenged me such as a that so I didn&amp;rsquo;t take much conscious action but then I graduated and joined Microsoft and now Census and it&amp;rsquo;s all different. The scale and complexity of the systems I am working on and the pace at which things change is incredibly rapid compared to school. I&amp;rsquo;m being pushed so much harder every day than I have the past decade and it&amp;rsquo;s a welcome change. Especially at Census the agency I&amp;rsquo;m granted and the impact I can have leaves me with a wide open field of extremely creative work and it can only really be done effectively when focusing.&lt;/p>
&lt;p>But what does it mean to be single-threaded? It means that at any given time the processor (your brain) can only make progress on one active task. To work on two tasks at once it needs to switch back and forth. Every time it switches the entire context of what task its working on needs to change. This doesn&amp;rsquo;t matter if the cost for switching contexts is low and for the past decade most of my &amp;ldquo;work&amp;rdquo; in school has had a low cost. When I would watch football, play games, and do schoolwork it wasn&amp;rsquo;t that I was actually doing all three at once it was simply that the cost of switching my attention rapidly from a game to a tv screen to a worksheet was negligible. In fact if you find that you can switch between activities rapidly without burden it might be a sign that those activities aren&amp;rsquo;t worth doing. Or at least they might not be very &lt;em>fulfilling.&lt;/em>&lt;/p>
&lt;p>I have tried coming up with a good heuristic for what makes a task costly to context switch in and out of but I have been unsuccessful. My best approximation is that the cost to switch contexts increases as the complexity and novelty of the task increases. It has to be sufficiently complex because if it wasn&amp;rsquo;t you wouldn&amp;rsquo;t need to devote your full attention to it but it also needs to be novel. Programming can be extremely complex but because I&amp;rsquo;m very familiar with it&amp;ndash; it&amp;rsquo;s less novel&amp;ndash; it&amp;rsquo;s easier for me to switch into a programming context. My brain is familiar with the state of mind required for programming so it&amp;rsquo;s easier to switch from a natural resting state into it. In fact because I program so much the natural resting state of my mind has gotten a lot closer to that of when I&amp;rsquo;m programming. The times when programming has a high cost to context switch is when I&amp;rsquo;m analyzing a new system or a new part of the codebase or debugging something and I need to understand all the interactions happening. In other words, when I&amp;rsquo;m doing something novel. Similarly when writing blog posts such as these it&amp;rsquo;s far more unfamiliar and therefore far more costly for me to switch contexts. It can take hours for me to switch into the right mindset for writing&amp;ndash; it quite literally feels like my neurons are firing in a different direction&amp;ndash; so when I finally get into that flow state if I lose it I&amp;rsquo;m back to square one. That&amp;rsquo;s a massive cost and it&amp;rsquo;s entirely because writing is unexpectedly complex and it&amp;rsquo;s also not something I do very often.&lt;/p>
&lt;p>There&amp;rsquo;s no real takeaway here, just a development in how I approach work. The more important a task is the more I try to focus only on it. &lt;a href="https://www.bennadel.com/blog/4352-only-solve-one-new-problem-at-a-time.htm">Solve one problem at a time&lt;/a>. Get comfortable not jumping around to different tasks even when you hit a dopamine plateau. Get comfortable not looking at your phone in lulls. Learn how to not even think about whether you should look at your phone (that&amp;rsquo;s the hard part). As I&amp;rsquo;ve grown more conscious of the single threaded nature of my brain I&amp;rsquo;ve realized the need to curate what tasks are running on it more carefully because it&amp;rsquo;s the only way to achieve meaningful deep work that I find fulfilling.&lt;/p></description></item><item><title>Internal Knowledge Systems</title><link>https://olivergilan.com/blog/internal-knowledge-systems/</link><pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/internal-knowledge-systems/</guid><enclosure url="https://olivergilan.com/images/Mountain_of_Knowledge.jpg" type="image/jpeg"/><description>&lt;p>Whenever a group of people work together there exists between them a flow of information which can ultimately determine how successful that group is at accomplishing a specific mission. Many dysfunctional organizations have broken or inadequate flows of information at their core and make poor decisions because of it. For an organization to succeed at scale it needs to effectively transmit information in multiple dimensions: from its leadership to the individuals at the edges of the organization, from the edges of the org to its leadership, between teams working in tandem, between teams working orthogonally, etc. You can think of an organization of individuals in much the same way as that of a living organism with millions of cells all receiving various signals and pieces of information informing them to act in a certain manner. The organisms that are successful are the ones that get the right signals to specific cells so that they perform the right actions at any given time to benefit that organism. All sorts of information needs to get to the right place at the right time with sufficient accuracy to allow every individual in the organization to make the right decisions at any given point in time.&lt;/p>
&lt;p>The flow of information manifests itself in various ways with the default being tribal knowledge held by individuals. This informal repository of personal knowledge is augmented by internal message boards, company memos, documentation, notes, etc. The vast majority of organizations pay no mind to this dynamic and as a result most information in any given institution is what Samo Burja calls &lt;a href="https://samoburja.com/intellectual-dark-matter/">Intellectual Dark Matter&lt;/a>. Successful organizations and functional institutions are aware of their flow of information and take conscious steps to engineer it in a variety of ways. When it comes to startups and tech teams having an explicit formalized internal knowledge system that reduces IDM is crucial for maintaining efficiency and productivity at scale. I am interested in exploring what the ideal system looks like for tech teams in particular and the following is my working theory on what such a system looks like.&lt;/p>
&lt;h2 id="goals">Goals &lt;a class="anchor" href="#goals">
#
&lt;/a>&lt;/h2>&lt;p>The first step to building an effective internal knowledge system is understanding what the goals are. For different institutions this could mean different things but for my team at Census the goals of creating this system are as follows:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Increase Velocity&lt;/strong>&lt;br>
It&amp;rsquo;s almost a clichÃ© at this point but startups want to move fast. As we scale and add new engineers we want to maintain our productivity and continue to ship high quality code frequently. The faster new members to the team can get set up, grok the codebase, and start contributing the better. Likewise, the faster a team member can look at a new part of the codebase or grasp a new assignment and ship code the more value will be created.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Increase Quality&lt;/strong>&lt;br>
Oftentimes the tradeoff for speed is quality. As we grow we want Census to become &lt;em>more&lt;/em> stable and &lt;em>more&lt;/em> reliable and &lt;em>more&lt;/em> performant all while we add new engineers to the team, create new features, and onboard new customers. To do this while maintaining velocity we need as many engineers as possible to have the relevant information at their fingertips to make informed decisions autonomously.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Reduce Fragility&lt;/strong>&lt;br>
As systems and projects become more complex they tend to become more brittle. This is often due to more critical knowledge being known only by a select few individuals who have been there since the beginning and are then relied on when issues arise or changes need to be made. This is an instance of intellectual dark matter and can threaten the long term viability of a project. The sooner this knowledge is formalized and distributed the more pain we can avoid down the line as we scale.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Reduce Mistakes &amp;amp; Errors&lt;/strong>&lt;br>
As we scale the goal is to have our usage increase an order of magnitude more than our errors. If you 10x your customer count but only 2x your incidents then your codebase is actually becoming more stable despite an increase in absolute error count. When the project is accurately documented it is easier to spot missing or innacurate details and fix them.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Increase Autonomy&lt;/strong>&lt;br>
As more engineers on the team learn and think about the overall state and goals of the project the more they will be empowered to make small but important decisions correctly on their own. This increases the autonomy of the average engineer which increases productivity, increases quality, and creates a more enjoyable developer experience.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="the-effective-internal-knowledge-system">The Effective Internal Knowledge System &lt;a class="anchor" href="#the-effective-internal-knowledge-system">
#
&lt;/a>&lt;/h2>&lt;p>The term &lt;em>internal knowledge system&lt;/em> is fancy and useful when discussing this theoretically but in practicality this is pretty much just a system of documentation. Before I go into how we plan to solve this problem at Census allow me to throw another list at you. When thinking about this problem I&amp;rsquo;ve read about and observed many different internal documentation systems and I&amp;rsquo;ve seen the problems multiple teams face with them. Below is what I believe to be some key characteristics of an effective system for tech teams.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Declarative&lt;/strong>&lt;br>
The documentation should accurately describe the present state and goals of the system it is documenting. The past states of the system should be observable through a versioning mechanism. And above all it should clearly state what the overall goals for the system are so that members of the team are oriented around what changes need to be made to bring the system from its current state to its desired state.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Structured&lt;/strong>&lt;br>
I used to think it was enough for engineers to just put an effort into writing docs. I now know this to not be sufficient. Documentation needs to be structured in such a way that information has a logical place to live so that other members of the team immediately know where to look to find a given piece of knowledge.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Searchable&lt;/strong>&lt;br>
Documentation should be easily searchable. This means that documentation mediums like video or audio tend to do a poor job because it is hard to organize and skim a video for relevant information. You can &lt;code>ctrl+f&lt;/code> a 10,000 line written document (or 100 10,000 line documents) faster than you can skim a 5 minute video.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Relevant &amp;amp; Versioned&lt;/strong>&lt;br>
Avoid including everything. The core documentation system should do its best to not drown the signal in endless noise. Ideally when it comes to low level implementation details the code should be self documenting and then just focus on higher level details and the few low level details that really matter. I used to think just documenting everything is the way to go and it might be better to have too many docs than too little but I&amp;rsquo;ve come to appreciate knowing when to &lt;em>not&lt;/em> include something. At the very least there should be a mechanism to easily ignore the cruft and see only the core that matters.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Permissioned&lt;/strong>&lt;br>
Not everyone should or needs to have access to all the information. This is less relevant at startups but as a company scales the need to partition and segment information becomes crucial. A proper internal knowledge system should make it easy to ensure that only those with proper access can view any given piece of information.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="implementation">Implementation &lt;a class="anchor" href="#implementation">
#
&lt;/a>&lt;/h2>&lt;p>Okay so how do you actually build an effective internal knowledge system? Well I&amp;rsquo;m not quite sure but I plan on doing this for Census in the coming months so I&amp;rsquo;ll make sure to write another post explaining how that goes. My working theory so far is as follows: we already have a bunch of documentation but it&amp;rsquo;s scattered and unstructured. Most of it is in Notion but without any organization so the plan is to start there.&lt;/p>
&lt;p>I&amp;rsquo;ll begin with an overall directory structure as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-markdown" data-lang="markdown">.
|- Getting Started/
|- Architecture/
|--- Infra/
|--- Module 1/
|--- ...
|- Team 1/
|--- Style Guide
|--- ...
|- Team 2/
|- Team 3/
|- Ops/
|--- Planning/
|----- RFC/
|----- ...
|--- Deployments
|--- Git &lt;span style="color:#a61717;background-color:#e3d2d2">&amp;amp;&lt;/span> Github Workflow
|--- Logs &lt;span style="color:#a61717;background-color:#e3d2d2">&amp;amp;&lt;/span> Debugging
|- OnCall/
|--- Runbook/
|- Uncategorized/
&lt;/code>&lt;/pre>&lt;/div>&lt;br/>
&lt;p>I&amp;rsquo;ve intentionally kept out a lot of the subsections for each directory but each top-level directory should have an internal structure as well. You can think of this top level structure as a top-down approach but another approach is to take all your existing documents and group them together as leaf nodes creating gradually bigger groups from the bottom up. I think the latter approach is ultimately the best way to create a good system that fits your specific knowledge but the above structure is a solid generic starting point for most small engineering teams.&lt;/p>
&lt;p>Most of it is self-explanatory but to quickly go over it, the &lt;code>Getting Started&lt;/code> directory should hold all the info for a new member to the team to onboard including things like local environment setup, high level concepts, important tools, git flows, etc. &lt;code>Architecture&lt;/code> contains information regarding the infrastructure like cloud resources, service diagrams, etc. as well as sections for logical code modules that clearly explain how different parts of the codebase work. Then each team gets its own directory where they can outline team specific style guides, planning sections, common patterns, etc. This works because Census only has 3 engineering teams right now and they all share one repository but these might be unnecessary for your situation. &lt;code>Ops&lt;/code> holds all the information around&amp;hellip; you guessed it, ops! Things like deploying, planning, etc. &lt;code>OnCall&lt;/code> should have all the information needed for an engineer to successfully manage a week on call. Finally &lt;code>Uncategorized&lt;/code> is for any docs or info that doesn&amp;rsquo;t immediately fit into one of the existing buckets. This will happen and that&amp;rsquo;s fine; building this system is an iterative process. As the uncategorized information grows we&amp;rsquo;ll create new sections, shift old sections around, and try to reduce the uncategorized queue.&lt;/p>
&lt;p>Ideally we&amp;rsquo;ll get to a point where every section and piece of info has a unique number associated with it, different sections have different structured formats to make it easy to write new documents, every piece of information has a specific place to live, and finding any needed piece of information is effortless.&lt;/p>
&lt;p>Keep in mind that this won&amp;rsquo;t all happen overnight and these sections will grow and change. Initially it can even be painful to organize the docs because the existing information can feel overwhelming and older members on the team might have muscle memory for where certain information lives even if there&amp;rsquo;s no intuitive reason for it to live there. That muscle memory will be broken and new habits will need to be formed. In the long run it should make life easier though and I&amp;rsquo;ll write a follow-up to examine how this worked for us at Census.&lt;/p></description></item><item><title>Prioritizing Efforts</title><link>https://olivergilan.com/blog/prioritizing-efforts/</link><pubDate>Fri, 26 Aug 2022 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/prioritizing-efforts/</guid><enclosure url="https://olivergilan.com/images/Strategy.jpg" type="image/jpeg"/><description>&lt;p>Fast, a one-click checkout payments startup was founded in March 2019. In November of that year they raised a $2.5M seed round and then 5 months later they raised a $20M Series A led by Stripe. Their headcount grew rapidly and less than a year after raising their A they raised a monster $102M Series B round. Everything was trending in the right direction and in Februrary 2022 they announced they were looking to double their headcount by the end of the year. 2 Months later the company went bankrupt and shut down. There are many reasons why Fast imploded in such a spectacular fashion and without knowing all the information the best I can do is speculate but I believe their problems stemmed from poor prioritization.&lt;/p>
&lt;p>The most important task for the leadership team of any startup is to effectively prioritize work. Moving fast and being productive isn&amp;rsquo;t enough if it&amp;rsquo;s not going towards solving the right problems and focusing on the wrong problem once or twice could be enough to kill a young company. During the past few years where money was cheap and plentiful there was more room to experiment, pivot, and make mistakes with prioritization but that luxury is over for the foreseeable future. As the funding markets tighten and runways shorten I predict the companies that more effectively prioritize their efforts will win out.
On the surface this seems obviously true but in the day-to-day of a startup grind it can be deceptively difficult to know what work is the most important, especially as the company grows and the number of stakeholders&amp;ndash; all with issues most important to &lt;em>them&lt;/em>&amp;ndash; vie for attention. My CEO at Census gave me the framework for how he deals with the problem of prioritization: &lt;strong>focus on the work that most effectively derisks the grand vision.&lt;/strong>&lt;/p>
&lt;p>Think of it this way: when starting a company there is inevitably a grand vision for what you want it to become. This vision is what you want the company to look like in 10 years when it&amp;rsquo;s mature and has all the bells and whistles, integrations, market dominance, culture, etc. To get from nothing to that grand vision requires a lot of time and effort and throughout that journey there will be a number of risks that could prevent the vision from ever becoming a reality. Your job as a leader is to discern which risks are greatest at any point in time and focus the efforts of the business on overcoming those risks. As your company grows the amount of risks will generally increase but the severity of any given risk most likely decreases.&lt;/p>
&lt;p>For example, in the beginning when all you have is an idea the biggest risk is that it&amp;rsquo;s just a bad idea. If your idea isn&amp;rsquo;t valuable then it doesn&amp;rsquo;t matter if you do everything else right you will be unsuccessful which is why investors will always ask what sort of market validation you have done. By speaking to potential customers and experts in the field you can overcome this risk by getting an understanding of the market and its needs. But once you overcome that initial risk and you determine there&amp;rsquo;s a need for whatever you want to build then you have another risk: are people willing to pay you for your solution and how much? This is similar to the first step but subtly different in the fact that a lot of people will happily say they need a solution to a given problem and they might even say they&amp;rsquo;re willing to pay for it but when it comes time to fork over money it&amp;rsquo;s a whole different story. Customers happily willing to pay for a product or service is the so-called &lt;em>Product Market Fit&lt;/em> that every startup wants to achieve and it&amp;rsquo;s the most important risk any new company must overcome initially.&lt;/p>
&lt;p>Every company is different but most startups share some big risks that are worth thinking about:&lt;/p>
&lt;ul>
&lt;li>Do people want your product?&lt;/li>
&lt;li>Will people pay for your product?&lt;/li>
&lt;li>Can you build the product?&lt;/li>
&lt;li>Can you manage a growing team?&lt;/li>
&lt;li>Can you sell to customers?&lt;/li>
&lt;li>Will you run out of capital?&lt;/li>
&lt;li>Can you expand the market?&lt;/li>
&lt;li>Can you capture the market?&lt;/li>
&lt;li>Can you scale?&lt;/li>
&lt;li>Can you be profitable?&lt;/li>
&lt;/ul>
&lt;p>As you grow the risks will change and multiply but be less severe individually. Whereas not having PMF can singlehandedly destroy a company later risks such as regulatory risks, culture changes while scaling, technical debt, unit economics, distribution, competitors, etc. are less likely to be the sole downfall of a company. An important distinction is that the &lt;em>risk&lt;/em> in question is not necessarily about overall risk to individuals in the company but more about the vision itself. If you&amp;rsquo;re a young but growing company and you get a buyout offer technically the risk to you as an individual would basically be brought to near zero because an exit event like a buyout could result in becoming financially independent and therefore losing personal risk. Being acquired by the wrong company, however, could mean the original mission is now less likely than ever to materialize. This isn&amp;rsquo;t necessarily a bad thing and the vision for a company can certainly change over time but it&amp;rsquo;s worth keeping in mind when assessing what that real goal is and what efforts should be focused on to best get you there.&lt;/p>
&lt;p>So where do I see people make mistakes with this? I speak to a bunch of young founders and entrepreneurs and quite often they seem to be following a template for building a company: they have an idea, pitch it to investors, give away about 20% of their company to raise an initial seed round, immediately hire a team of engineers and a designer, and then start building. That &lt;em>might&lt;/em> be the right set of moves to make for your given situation but often times it&amp;rsquo;s really not necessary to do all that. Fundraising is an opportunity to overcome the risk of running out of capital but if you can validate a market, build an MVP, and start generating revenue with little capital then there&amp;rsquo;s not much need to raise money as you&amp;rsquo;re just giving away more equity than necessary. But maybe you don&amp;rsquo;t want to risk your own money when you can risk investor&amp;rsquo;s money and maybe you can&amp;rsquo;t build the MVP on the side while working a full time job so you need some money to pay yourself while you work on a prototype. In that case raise money and eliminate that risk but then there&amp;rsquo;s no need to suddenly hire a whole team. Adding more cooks to the kitchen does &lt;em>not&lt;/em> make it easier or faster to build a product in the early stages so you should ask yourself: &lt;em>why am I hiring this person? Is it because I just raised money and feel like this is the &amp;ldquo;next step&amp;rdquo; or does hiring someone with this skillset genuinely make the odds of success higher than doing something else?&lt;/em> This applies to any area of a business, not just hiring, and it&amp;rsquo;s common to fall into the trap of doing what feels easy. If you&amp;rsquo;re a good at engineering you might think your startup&amp;rsquo;s problems will be solved with cleaner code; if your background is in product management you might think just adding more features or conducting just one more customer interview is always the best path forward; if your background is in operations you might think introducing new processes or increasing headcount is always the best path forward. At any given point in the life of a company one of those strategies might be the optimal one but that analysis should be made irregardless of how comfortable you are in doing that sort of work and focus instead on how much that work will derisk the company.&lt;/p>
&lt;p>When using this framework a lot of the classic startup advice around moving fast, validating a market, finding PMF, scaling, etc. makes more sense. It also helps to explain, in part, why some companies fail. When Fast announced they were shutting down operations just a little over a year after raising $100M it became clear that leadership had not been appropriately derisking the company. According to &lt;a href="https://www.theinformation.com/articles/why-stripes-fast-horse-is-losing-the-one-click-checkout-race">The Information&lt;/a>, Fast&amp;rsquo;s revenue in 2021 was just $600,000 while its burn was $10 million per month! With this context it becomes even more shocking that Fast&amp;rsquo;s CEO and CTO gave an &lt;a href="https://www.businessinsider.com/fast-recruiting-tech-hiring-vicky-xiong-engineering-fintech-payments-2022-2">interview&lt;/a> to Business Insider in February 2022&amp;ndash; just two months before shutting down&amp;ndash; announcing their intention to &lt;em>double&lt;/em> their headcount by the end of 2022. This was after already doubling their headcount the previous year. I don&amp;rsquo;t have all the information they had so I do not want to judge too harshly from the comfort of my armchair but from where I&amp;rsquo;m sitting I can&amp;rsquo;t imagine that not having enough engineers was even close to the biggest risk the company faced at that time. In fact the opposite was true: 60% of Fast&amp;rsquo;s operating budget went to payroll making their employees one of their biggest risks instead of the biggest reductions in risk.&lt;/p>
&lt;p>And then you add-on the expensive corporate retreats, paying The Chainsmokers &lt;a href="https://www.npr.org/2022/04/05/1091077398/checkout-startup-fast-is-shutting-down-after-burning-through-investors-money">$1 million dollars&lt;/a> to perform at a conference, hiring a videographer to follow the CEO around the world to film him skiing, scuba diving, and perform other stunts, all while the engineering team was given a broad array of conflicting tasks &lt;a href="https://www.businessinsider.com/fast-startup-employees-domm-holland-overspending-overhiring-chaotic-2022-4">not related to the core mission&lt;/a>. Throwing a sick concert or making the CEO a celebrity influencer did nothing to derisk the mission of Fast and it&amp;rsquo;s telling that so much time and money was put into those efforts instead of things that would have been more effective.&lt;/p>
&lt;div class="quote-block">
&lt;div class="quote-block-inner">
&lt;blockquote>
&lt;p>One of the few warning signs engineers noticed is how Fast spent far more on infrastructure than the scale of the operation would have called for. Engineers sometimes brought up suggestions to scale infra down, and save costs - given there was not much revenue generated.&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;div class="quote-block-attribution">
&lt;p class="quote-author">
Pragmatic Engineer
&lt;/p>
&lt;a href="https://newsletter.pragmaticengineer.com/p/the-scoop-fast" class="quote-link">
Link
&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>I could harp on what I think Fast did wrong (chief among them was their propensity to &lt;a href="https://newsletter.pragmaticengineer.com/i/51799618/warning-signs-within-the-company">overengineer solutions&lt;/a>) but the actual lesson isn&amp;rsquo;t about the specifics of their actions and instead is focused on the fact that their actions did not do much to increase the odds of success. If Fast was a consumer social app then it may have made sense to make the CEO a celebrity or to throw fancy parties to build a brand. Fast wasn&amp;rsquo;t a consumer social app though and their focus on efforts completely unrelated to the performance, user experience, and developer experience led to the shutting down of a company a year after raising $100M.&lt;/p>
&lt;p>So if you&amp;rsquo;re in leadership position of a growing company (at an early stage company &lt;em>everyone&lt;/em> is in a leadership position) to best increase the odds of success I recommend identifying the biggest points of risk that threaten the long term vision and then prioritizing your efforts on those areas.&lt;/p></description></item><item><title>Is Work-Life Balance Worth It?</title><link>https://olivergilan.com/blog/work-life-balance/</link><pubDate>Wed, 27 Jul 2022 00:00:00 +0000</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/work-life-balance/</guid><enclosure url="https://olivergilan.com/images/The_Blacksmith.jpg" type="image/jpeg"/><description>&lt;p>I recently read a &lt;a href="https://twitter.com/shelbyn_23/status/1549944330646949890?s=20&amp;amp;t=a8NQKrJuA61IW0TGunCV0A">tweet&lt;/a> expressing exasperation with the standard 8-9 hour workday and how little time it leaves for life outside of work. Coincidentally the same day I came across this &lt;a href="https://every.to/p/what-i-miss-about-working-at-stripe">beautiful essay&lt;/a> by Brie Wolfson about her nostalgia for her time working at Stripe. What Brie misses most was the long workdays, the stress, the cameraderie, and being part of a group of people giving their all towards achieving a shared mission. These two distinct viewpoints reflect a difference in attitude toward work-life balance that I&amp;rsquo;ve seen take shape in &amp;ldquo;the discourse&amp;rdquo; online and even among friends &amp;amp; family. The former viewpoint believes that work is simply a means to an end for money, purely transactional, and that &amp;ldquo;life&amp;rdquo; is supposed to be lived outside of work. The latter viewpoint views work as an integral part of one&amp;rsquo;s life and that attemping to bisect the two is not a recipe for a happy life.&lt;/p>
&lt;p>It often feels as though my generation predominantly agrees with the former view of work-life balance while I personally believe that to live a fulfilled life one must seek work-life &lt;em>integration&lt;/em>. When I see tweets like the one above it makes me wonder if my belief is correct and if it is then why do so many people feel the opposite? Why do so many view work as some punishment or inconvenience that must be endured so that they can live their &amp;ldquo;real&amp;rdquo; lives after? The mindest of work-life integration can be an ideal that&amp;rsquo;s not available to everyone but most of the individuals in my social circle that try to separate work and life are in white collar jobs with more leverage as employees than most people. It&amp;rsquo;s easy to say people are just more lazy in this day and age but that seems like a cop-out to me and the more I think about this issue the more I feel that &lt;em>the work-life balance attitude is the natural result of various environmental incentives.&lt;/em>&lt;/p>
&lt;h2 id="caring-doesnt-pay">Caring Doesn&amp;rsquo;t Pay &lt;a class="anchor" href="#caring-doesnt-pay">
#
&lt;/a>&lt;/h2>&lt;p>My first instinct regarding this issue is too many people in my generation have seen others get burned (or they themselves got burned) by caring about work too much. Brie talks about late nights full of tears, stress, and joy. She mentions cancelling a vacation after her manager asked because her colleagues were working 15 hour days and she didn&amp;rsquo;t want to abandon them. The opportunity to work with a team of people you highly respect and throwing your all into a shared mission with them as Brie describes is a prospect I&amp;rsquo;m very drawn to and I firmly believe everyone should experience that at some point in their life. And yet it&amp;rsquo;s probably more common than not that after dedicating your blood, sweat, and tears to a company you still get fucked over. Maybe there&amp;rsquo;s a market downturn and you get laid off because of poor decisions by leadership; maybe the startup simply fails; or maybe it succeeds/ gets acquired and liquidation preferences leave you with little to no reward for your equity. The vast majority of statups are not financially rewarding for anyone other than the founding team so purely from a financial standpoint it can be irrational to dedicate your life to one.&lt;/p>
&lt;p>But startups are unusual in their own right! Even if they aren&amp;rsquo;t completely financially rational there&amp;rsquo;s a ton to be gained through connections, reputation, and skills that you can pick up by dedicating yourself at the right startup. Most people that emphasize work-life balance aren&amp;rsquo;t in that situation and probably work at an enterprise where many of those upsides are less prevalent and there is even less incentive to care about the work. During my time at Microsoft I could have been the most productive engineer in the world and the bottom line for Microsoft wouldn&amp;rsquo;t have changed. Or I could have died and the bottom line for Microsoft wouldn&amp;rsquo;t have changed. When you are so far removed from the result of your labor and the outcomes are so detached from the personal inputs there&amp;rsquo;s very little incentive to find meaning in the work. Marx called this phenomenon alienation, and while a revolution by the working class is probably not an appropriate nor effective solution, it&amp;rsquo;s still a very real result of working for many of these massive corporations. Enterprises also fail to create environments of agency in most cases. Orders come down from &amp;ldquo;the top&amp;rdquo; with little input from ICs and more often than not opportunities to take &amp;ldquo;ownership&amp;rdquo; are really just an excuse by a manager to shift more responsibilities downwards without doing the same for the associated upside and rewards.&lt;/p>
&lt;p>The result is that a vast swath of workers view passion for their job as irrational and even dowrnright risky. As it is now even if you work yourself to the bone and deliver real value to a business there&amp;rsquo;s a good chance you&amp;rsquo;ll be passed over for a promotion due to political reasons or the company will prioritize bringing someone external to fill a role above you instead of hiring internally. It&amp;rsquo;s hard to speak on behalf of other industries on this specific topic but at least in tech it can be far more rational to jump jobs every &lt;a href="https://developerpitstop.com/how-long-do-software-engineers-stay-at-a-job/#:~:text=Around%2050%25%20of%20software%20engineers,developer%20stays%20in%20one%20role.">2-3 years&lt;/a> than it is to stay at one company for an extended period of time. How is someone supposed to foster a deep understanding and affinity for their work if they are incentivized to leave every couple years? How are they supposed to be passionate about a mission if they&amp;rsquo;re treated as expendable?&lt;/p>
&lt;h2 id="work-has-changed-work-hasnt-changed">Work Has Changed, Work Hasn&amp;rsquo;t Changed &lt;a class="anchor" href="#work-has-changed-work-hasnt-changed">
#
&lt;/a>&lt;/h2>&lt;p>Beyond poor work environments and bad leadership there&amp;rsquo;s also the fundamental problem that most work is just &lt;a href="https://en.wikipedia.org/wiki/Bullshit_Jobs">bullshit&lt;/a>. The world is full of interesting problems and disciplines to master and I&amp;rsquo;m lucky that I get to work on my craft of software engineering every day. Meanwhile when talking to friends the majority of their day-to-day responsibilities include things like copying rows from an email to an Excel document, shifting images on a PowerPoint slide to be &lt;em>just&lt;/em> right, or compiling reports with little creative contribution. There&amp;rsquo;s two things that strike me about their descriptions of work:&lt;/p>
&lt;ol>
&lt;li>Most of this work could be automated or at least dramatically minimized&lt;/li>
&lt;li>It accomplishes very little of value&lt;/li>
&lt;/ol>
&lt;p>Work will feel dull when the nature of the work is dull. This is obvious and yet I&amp;rsquo;m constantly shocked by how many companies will go through great pain to hire the &amp;ldquo;best and brightest&amp;rdquo; from the most prestigious universities only to then have them spend their days copying rows from emails into Excel documents. There is an abundance of low hanging fruit for many businesses to reduce toil and unlock the creative productivity of their employees which would make many of these jobs more fulfilling and exciting, not to mention more valuable. If you work as an &amp;ldquo;analyst&amp;rdquo; in investment banking and your 15 hour days consist of putting meetings on the calendar for your boss you&amp;rsquo;re a lot more likely to feel disdain for your job than if you&amp;rsquo;re given tasks that involve actual analysis, creativity, and even risk-taking. In many ways this is a direct result of poor leadership that doesn&amp;rsquo;t understand how to value the skills of their employees nor how to build systems at scale for reducing toil.&lt;br>
Secondly, many of these bullshit jobs do not accomplish much of value which is often the real killer of morale. Many barista jobs can be automated too but they often get to see the direct result of their work by making drinks, becoming familiar with regulars, and directly providing a service many people find valuable. It doesn&amp;rsquo;t surprise me that I more often meet a barista who enjoys their work than I do a junior investment banker. Most white collar jobs have not adapted to the age of information and unlocked the creative productivity most of their employees have ot offer.&lt;/p>
&lt;p>There&amp;rsquo;s also the issue of the workday itself. When productivity was a direct result of time spent on the assembly line a 9-5 workday made sense but when work requires creative or analytical time spent at a desk only marginally results in higher output. There&amp;rsquo;s simply no reason for many white collar information jobs to require employees to sit at a desk for 8 hours a day and yet a shockingly small amount of companies even try to experiment with different working schedules that may better fit their employees' lives. I do think this argument is sometimes taken too far with people claiming that any more than 3 hours a day of creative work is a waste which misses the point that most people&amp;ndash; especially those early in their career&amp;ndash; cannot do 3 hours of productive work without a lot of &amp;ldquo;wasted&amp;rdquo; time inbetween. There&amp;rsquo;s also the fact that not all work work done in a creative job is creative. As a programmer no matter how productive I can be writing code or debugging a problem there&amp;rsquo;s still a lot of work to be done around planning, coordination, and team building. Brie talks about working 15 hour days which is fine and well when you are at an early stage startup trying to solve an ambitious problem and the mountains to climb seem never-ending. But most companies are not in that situation and making employees commute an hour each way in traffic to sit at a desk for 8 hours to only do 2 hours of productive creative work is not a good strategy to make people passionate about their jobs.&lt;/p>
&lt;h2 id="the-burdens-of-adulthood">The Burdens of Adulthood &lt;a class="anchor" href="#the-burdens-of-adulthood">
#
&lt;/a>&lt;/h2>&lt;p>Bad work environments and boring jobs aren&amp;rsquo;t where the problems end either. It also feels as though we have less time today than we had in the past. I am extremely fortunate to work as a software engineer in tech where employees have more leverage than normal. I can work from home and set my hours in a way most people can&amp;rsquo;t and yet even I often feel overwhelmed keeping up with the responsibilities outside of work e.g. cleaning my apartment regularly, doing my laundry, excercising, buying groceries and cooking for myself, cleaning dishes, etc. Just taking care of the bare necessities often takes up most of my time outside of work and that&amp;rsquo;s not even taking into account time spent with friends, leisure, hobbies, etc. Modern life is so full of &lt;a href="https://www.theatlantic.com/politics/archive/2021/07/how-government-learned-waste-your-time-tax/619568/">time taxes&lt;/a> just for daily survival that sometimes it feels like too much for one person to handle&amp;hellip; and it might be.&lt;/p>
&lt;p>In 1960 women were predominantly getting married &lt;a href="https://www.bgsu.edu/ncfmr/resources/data/family-profiles/hemez-distribution-age-first-marriage-fp-20-09.html#:~:text=In%201960%2C%20men's%20median%20age,FP%2D19%2D06">around the age of 20&lt;/a> and men around 22. Today those averages are at &lt;a href="https://www.prb.org/usdata/indicator/marriage-age-women/snapshot/#:~:text=The%20median%20age%20at%20first,across%20states%20and%20local%20areas">28 and 29&lt;/a> years old respectively. It&amp;rsquo;s not an exaggeration to say that people today shoulder the burden of adulthood alone for far longer than they have in the past. Similarly in 1960 &lt;a href="https://www.pewresearch.org/fact-tank/2015/12/30/its-no-longer-a-leave-it-to-beaver-world-for-american-families-but-it-wasnt-back-then-either/#:~:text=As%20more%20mothers%20enter%20the,%2Dat%2Dhome%20dads">about half&lt;/a> of mothers were stay-at-home mom&amp;rsquo;s whereas today that number has dropped below 30%. The cumulative effect is that historically an individual could work 8-9 hours a day but many of the responsibilities of adulthood outside of work were lessened by the contribution of a spouse while today even with a spouse there&amp;rsquo;s a good chance no one is staying home with the time to handle non-work responsibilities.&lt;/p>
&lt;p>What becomes evidently clear is that when women won their battles for equality and entered the workforce en masse they weren&amp;rsquo;t &lt;em>getting&lt;/em> jobs they were &lt;em>switching&lt;/em> jobs. Even just in 2019 if American women were paid minimum wage for the time they put into housework they would have earned &lt;a href="https://www.nytimes.com/interactive/2020/03/04/opinion/women-unpaid-labor.html">$1.5 trilltion&lt;/a>, a staggering amount. This is in modern times when the housework performed by women is a fraction of what it used to be. It&amp;rsquo;s not unreasonable to posit that because we did not value the labor of women monetarily and did not count it towards any of the metrics we use to judge the health of the economy we completely missed the fact that there was this massive amount of necessary labor being performed to support fulfilling lives. Of course the answer is not to make women return to these jobs&amp;ndash; the gender of the person performing the housework is irrelevant&amp;ndash; but this work still needs to be done and now more people are shouldering that burden alone for longer.&lt;/p>
&lt;h2 id="what-can-be-done">What Can Be Done &lt;a class="anchor" href="#what-can-be-done">
#
&lt;/a>&lt;/h2>&lt;p>So what can be done? I still believe the opportunity to enjoy one&amp;rsquo;s work and to find meaning in it is critical for a fulfilling life and we should do everything we can to change the incentives. Whether it&amp;rsquo;s on an individual level, company level, industry level, or even government level there&amp;rsquo;s plenty of things we can do to shift the cost-benefit of most of these jobs in a way that makes them more fulfilling and motivating. Not only would that make our society happier on average (which we desperately need) I suspect it would lead to greater productivity gains for the economy as a whole.&lt;/p>
&lt;h4 id="__change-the-costs-of-showing-up__">&lt;strong>Change the costs of showing up&lt;/strong>&lt;/h4>&lt;ul>
&lt;li>4 day work weeks, 10-3, variable work hours, etc. There&amp;rsquo;s plenty of room to experiment with different work schedules that better fit people&amp;rsquo;s lives and do not sacrifice on creative/analytical output&lt;/li>
&lt;li>Build better public transportation and denser cities to make it faster and easier to work in person. Pretty much every city in America besides New York requires a car to live and work but sitting in traffic and commuting for hours automatically makes the cost of showing up for work higher. Remote work has helped in this regard but ultimately young people who are passionate about their jobs will want to work in person even for a couple days a week and to be frank the logistics around working in person are terrible for most of America.&lt;/li>
&lt;/ul>
&lt;h4 id="__create-a-culture-of-loyalty-and-respect__">&lt;strong>Create a culture of loyalty and respect&lt;/strong>&lt;/h4>&lt;ul>
&lt;li>Prefer internal promotions over external hires&lt;/li>
&lt;li>Invest in employee development. If an employee leaves your company at the same level they joined that should be viewed as a failure in most instances. This means real investment in training and education beyond just online seminars or a Pluralsight subscription.&lt;/li>
&lt;li>Pay more, give better benefits. Pay is a sign of respect and should accurately reflect how valuable an employee is to an organization without that employee needing to employ Machiavellan negotiation tactics&lt;/li>
&lt;/ul>
&lt;h4 id="__improve-the-quality-of-work-itself__">&lt;strong>Improve the quality of work itself&lt;/strong>&lt;/h4>&lt;ul>
&lt;li>Reduce toil with tech automation and give the existing workforce more creative/analytical responsibilities&lt;/li>
&lt;li>Promote agency with flatter org structures and more ownership. Create opportunities for employees to take risks and benefit more from the wins&lt;/li>
&lt;/ul>
&lt;h4 id="__reduce-peoples-overall-economic-risk__">&lt;strong>Reduce people&amp;rsquo;s overall economic risk&lt;/strong>&lt;/h4>&lt;ul>
&lt;li>Start offering internships for high school students and invest in on-the-job education. Instead of people entering the workforce at 22 years old with thousands of dollars of debt we should consider the benefits of them joining the workforce out of high school, debt free, especially when most of the skills will be learned on the job regardless of whether they have a degree or not. This needs to be driven by the businesses and there&amp;rsquo;s a whole bunch of caveats to making a dynamic like this work but it&amp;rsquo;s possible. This is a whole other post I will write about in the future but there&amp;rsquo;s a &lt;em>lot&lt;/em> of room to change peoples economic outlook by changing the structure of the education-to-work pipeline.&lt;/li>
&lt;li>Make healthcare cheaper and separate from employment. Healthcare is one of the biggest spending categories for people in America. By making it cheaper you automatically make most people richer by some degree and by detaching from employment status you empower employees to more readily bad jobs and either take risks making their own companies or joining companies that they are passionate about.&lt;/li>
&lt;li>Make housing cheaper. By making housing cheaper across the board you enable people to more readily move and organize themselves physically in localities where they can meet people with interests such as theirs. If we want people to dedicate themselves to shared missions it&amp;rsquo;s important that they can work and live near others with a similar mindset. Just between cheaper housing and healthcare you will give employees a ton of leverage to leave bad jobs and find other people working on missions they find meaningful.&lt;/li>
&lt;li>Provide better paid parental leave and childcare. Right now the cost of raising a family and doing much of the important housework is simply too high. We need find a way to reward the massive amount of unpaid labor being performed at home.&lt;/li>
&lt;/ul>
&lt;p>For each of these changes there will be caveats and unintended consequences but what we do know is that whatever we&amp;rsquo;re doing right now isn&amp;rsquo;t working. People find meaning in life when they can dedicate themselves to a mission whether that&amp;rsquo;s raising children, becoming a champion of a sport, writing a novel, mastering a craft, etc. While not necessary, most missions people dedicate themselves to are directly economically productive and thus become jobs and that&amp;rsquo;s a good thing because when groups of people work together they can often accomplish far more than what an individual ever could. I view the trend to try and separate work from life as a failure on the part of our society and we should work on all levels to fix the incentives. Empowering people to live a life of meaning means more than just making them happy in a corporate job but there&amp;rsquo;s also little reason why more corporate jobs can&amp;rsquo;t be more &lt;a href="https://theoatmeal.com/comics/unhappy">compelling&lt;/a>.&lt;/p></description></item><item><title>How to Create a Blog from Scratch with Hugo</title><link>https://olivergilan.com/blog/how-to-create-a-blog-in-hugo/</link><pubDate>Thu, 03 Mar 2022 10:04:15 -0500</pubDate><author>Oliver Gilan</author><guid>https://olivergilan.com/blog/how-to-create-a-blog-in-hugo/</guid><enclosure url="https://olivergilan.com/images/Hugo_SSG.png" type="image/jpeg"/><description>&lt;p>In this post I&amp;rsquo;ll walk you through creating the personal blog you&amp;rsquo;re currently reading using Hugo. When choosing my stack for this blog I had a few requirements in mind: low maintenance, high performance/low bundle sizes, simple clean interface with reusable components, and markdown support. Hugo meets all these requirements with blazing fast compile times as well as no reliance on JavaScript or other libraries that could lead to bloated bundles. It supports a ton of different themes but also has the ability to create very simple themes from scratch with reusable components. And it supports markdown which is my preffered method for writing blog posts. So all I need to do is write a new post in markdown, add it to a specific directory, and push to GitHub and Hugo will generate the necessary html to be served.&lt;/p>
&lt;p>For the purposes of this blog I&amp;rsquo;ll use GitHub actions to generate the site and host it on GitHub pages.&lt;/p>
&lt;div id="tocContainer">
&lt;p id="contents">Contents&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#getting-started">Getting Started&lt;/a>&lt;/li>
&lt;li>&lt;a href="#hugo-core-concepts">Hugo Core Concepts&lt;/a>&lt;/li>
&lt;li>&lt;a href="#building-the-template">Building the Template&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#working-with-menus">Working with Menus&lt;/a>&lt;/li>
&lt;li>&lt;a href="#target-blank">Target Blank&lt;/a>&lt;/li>
&lt;li>&lt;a href="#post-page">Post Page&lt;/a>&lt;/li>
&lt;li>&lt;a href="#shortcodes">Shortcodes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#footer">Footer&lt;/a>&lt;/li>
&lt;li>&lt;a href="#header-anchors">Header Anchors&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#rss">RSS&lt;/a>&lt;/li>
&lt;li>&lt;a href="#compiling-and-hosting">Compiling and Hosting&lt;/a>&lt;/li>
&lt;li>&lt;a href="#conclusion">Conclusion&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;h2 id="getting-started">Getting Started &lt;a class="anchor" href="#getting-started">
#
&lt;/a>&lt;/h2>&lt;p>To get started &lt;a href="https://gohugo.io/getting-started/installing">install Hugo&lt;/a>. I&amp;rsquo;m on Mac so I used Homebrew:
&lt;div class="code-block">
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Shell" data-lang="Shell">brew install hugo
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>Once it&amp;rsquo;s installed use the hugo cli to scaffold a new site for you.&lt;/p>
&lt;div class="code-block">
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">hugo new site blogname
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>You now have the scaffolding for a new site! You can run the site locally using &lt;code>hugo server&lt;/code> but you won&amp;rsquo;t see anything just yet! Let&amp;rsquo;s create our site!&lt;/p>
&lt;p>At this point you can add an existing theme to your site but I will create me own. Keep in mind, I didn&amp;rsquo;t use a theme because I wanted to create something ultra simple and creating it from scratch helps me understand how Hugo works in greater detail. If you want to create a more complex site or you just want to create something fast I recommend starting with a theme and you can always modify it later but at least you have a base to start from. You can view a list of themes &lt;a href="https://themes.gohugo.io/">here&lt;/a> and choose one you like. Download the theme&amp;rsquo;s source code and add it the &lt;code>themes&lt;/code> directory of your site. Then initialize git.&lt;/p>
&lt;div class="code-block">
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#0086b3">cd&lt;/span> blogname
git init
git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>And set the theme in the config.toml file.&lt;/p>
&lt;div class="code-block">
&lt;p class="filepath">
config.toml
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">theme = &lt;span style="color:#d14">&amp;#34;ananke&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Like I said, I didn&amp;rsquo;t use a theme so I will leave my themes directory empty and create a site from scratch.&lt;/p>
&lt;p>Now let&amp;rsquo;s set some of the key settings in our configuration file. Open the &lt;code>config.toml&lt;/code> file and set your baseUrl, language, and title. For me, the title of my blog is simply my name.
&lt;div class="code-block">
&lt;p class="filepath">
config.toml
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">baseURL = &lt;span style="color:#d14">&amp;#39;https://olivergilan.com/&amp;#39;&lt;/span>
languageCode = &lt;span style="color:#d14">&amp;#39;en-us&amp;#39;&lt;/span>
title = &lt;span style="color:#d14">&amp;#39;Oliver Gilan&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;h2 id="hugo-core-concepts">Hugo Core Concepts &lt;a class="anchor" href="#hugo-core-concepts">
#
&lt;/a>&lt;/h2>&lt;p>It&amp;rsquo;s important to understand the directory structure of Hugo. The scaffolding generator for Hugo created a few important directories to understand. The themes directory as previously mentioned handles all the code.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>content/&lt;/code> handles all the content of your site. This is where I&amp;rsquo;ll be putting my markdown files for my blog.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>layouts/&lt;/code> will hold your html files that are used to render the content for any given page. This is where we will create the templates for our site.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>static/&lt;/code> holds your static files like custom css files or javascript files we might want to reference from our layouts.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>How you structure your content within these directories will determine how Hugo generates your site. For example, for my blog I only want a couple pages: I want&lt;/p>
&lt;ol>
&lt;li>A homepage which will act as my &amp;ldquo;About&amp;rdquo; page&lt;/li>
&lt;li>A blog page that lists all my posts in chronological order&lt;/li>
&lt;li>A page for each blog post&lt;/li>
&lt;/ol>
&lt;p>So in my content directory I create a &lt;code>blog/&lt;/code> directory and an &lt;code>_index.md&lt;/code> file. Within the blog directory I will put each post as a markdown file. This very post that you&amp;rsquo;re reading now is located at &lt;code>content/blog/CreateABlogWithHugo.md&lt;/code>.&lt;/p>
&lt;p>If you want more pages, create more directories. For example if you want your &amp;ldquo;About&amp;rdquo; to be separate from your homepage create an &lt;code>about/&lt;/code> directory next to &lt;code>blog/&lt;/code>. If you want a contact page create a &lt;code>contact/&lt;/code> directory. Each directory under &lt;code>content/&lt;/code> tells Hugo to generate a page of some sort to render that content.&lt;/p>
&lt;div class="aside">
&lt;div class="aside-text">
&lt;strong>FYI:&lt;/strong> To create a new markdown file in content, use the CLI command &lt;code>hugo new [path]&lt;/code>
for example: &lt;code>hugo new blog/firstpost.md&lt;/code>
This generates the markdown file preloaded with front matter fields that you can fill in.
This generator uses the file in &lt;code>archetypes/default.md&lt;/code> as a template. You can add more fields in that template file to suit your needs. I left it as is for now.
&lt;/div>
&lt;/div>
&lt;p>Because my site is simple I decided to keep all my css in one file but you can of course split it up. Add any CSS or JS files you want to the &lt;code>static/&lt;/code> directory. I added mine to &lt;code>static/css/style.css&lt;/code> as well as the fonts my site will use to &lt;code>static/fonts/&lt;/code>. You can of course load your fonts from an external service like Google fonts but I choose to serve them with my site.&lt;/p>
&lt;p>So now you have some content in your content directory and you have your css, javascript, or any other static files in your static directory. Now let&amp;rsquo;s actually build the template files that tell Hugo how to render your content!&lt;/p>
&lt;h2 id="building-the-template">Building the Template &lt;a class="anchor" href="#building-the-template">
#
&lt;/a>&lt;/h2>&lt;p>The first part of the template I want to build is the navigation bar. This will be present on all of the pages in my site and won&amp;rsquo;t change. To get started create the following files within the layouts directory:&lt;/p>
&lt;p>&lt;code>layout/_default/baseof.html&lt;/code> &lt;br>
&lt;code>layout/partials/header.html&lt;/code>&lt;/p>
&lt;p>&lt;code>baseof.html&lt;/code> will be the base template that holds the other templates. You can think of this as the root component in a framework like React. All that I&amp;rsquo;ll put in that file is the following:&lt;/p>
&lt;div class="code-block">
&lt;p class="filepath">
layouts/defaults/baseof.html
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#999;font-weight:bold;font-style:italic">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#000080">html&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">meta&lt;/span> &lt;span style="color:#008080">charset&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;utf-8&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#000080">link&lt;/span> &lt;span style="color:#008080">rel&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;/css/style.css&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#000080">title&lt;/span>&amp;gt;{{ block &amp;#34;title&amp;#34; . }} {{ .Site.Title }} {{ end }}&amp;lt;/&lt;span style="color:#000080">title&lt;/span>&amp;gt;
{{ block &amp;#34;head&amp;#34; . }} {{ end }}
&amp;lt;/&lt;span style="color:#000080">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">body&lt;/span>&amp;gt;
&lt;span style="color:#998;font-style:italic">&amp;lt;!-- Code that all your templates share, like a header --&amp;gt;&lt;/span>
{{ block &amp;#34;main&amp;#34; . }}
&lt;span style="color:#998;font-style:italic">&amp;lt;!-- The part of the page that begins to differ between templates --&amp;gt;&lt;/span>
{{ end }} {{ block &amp;#34;footer&amp;#34; . }}
&lt;span style="color:#998;font-style:italic">&amp;lt;!-- More shared code, perhaps a footer but that can be overridden if need be in --&amp;gt;&lt;/span>
{{ end }}
&amp;lt;/&lt;span style="color:#000080">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>You can see I link to the stylesheet here so that every other page has access to the css. The parts that say &lt;code>{{ block [name] }}&lt;/code> tell Hugo to render another layout in that location. If Hugo cannot find an appropriate layout to render in place of a block statement it will fallback to the default which you can set by adding any content you want between the beginning of the block and the &lt;code>{{ end }}&lt;/code> statement. Notice how in the &lt;code>&amp;lt;title&amp;gt;&lt;/code> tag I tell Hugo to render the site&amp;rsquo;s title as the default. &lt;code>.Site.Title&lt;/code> will evaluate to whatever you set as the title in the config file.&lt;/p>
&lt;p>Now let&amp;rsquo;s implement the header component. Notice that it&amp;rsquo;s located in a directory called &amp;ldquo;partials.&amp;rdquo; In Hugo a partial is a reusable component that can be plugged into any layout in a similar way to a React component.
In &lt;code>header.html&lt;/code> add the following code:
&lt;div class="code-block">
&lt;p class="filepath">
layouts/partials/header.html
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#000080">header&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">nav&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">a&lt;/span> &lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;{{.Site.BaseURL}}&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">h1&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;site-title&amp;#34;&lt;/span>&amp;gt;{{ .Site.Title }}&amp;lt;/&lt;span style="color:#000080">h1&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">a&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">ul&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;section-list&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#000080">ul&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">nav&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">header&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;h3 id="working-with-menus">Working with Menus &lt;a class="anchor" href="#working-with-menus">
#
&lt;/a>&lt;/h3>&lt;p>Notice how in the above header partial I don&amp;rsquo;t actually have the unordered list implemented. I could of course manually create each &lt;code>&amp;lt;li&amp;gt;&lt;/code> element and point it to the designated page but I&amp;rsquo;d rather have Hugo dynamically render that menu for me. This makes it easier to update in the future.&lt;/p>
&lt;p>We can do this with some updates to the config of the site. Add the following:
&lt;div class="code-block">
&lt;p class="filepath">
config.toml
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">sectionPagesMenu = &lt;span style="color:#d14">&amp;#34;main&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>This tells Hugo to take every section page of the site and create menu called &lt;code>main&lt;/code> . The only section page I have right now is for my &lt;code>content/blog/&lt;/code> directory so right now Hugo has one menu &lt;code>main&lt;/code> with an element for that blog page. We can make the partial use that dynamic menu with the following code:&lt;/p>
&lt;div class="code-block">
&lt;p class="filepath">
layouts/partials/header.html
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#000080">header&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">nav&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">a&lt;/span> &lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;{{.Site.BaseURL}}&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">h1&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;site-title&amp;#34;&lt;/span>&amp;gt;{{ .Site.Title }}&amp;lt;/&lt;span style="color:#000080">h1&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">a&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">ul&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;section-list&amp;#34;&lt;/span>&amp;gt;
{{ range .Site.Menus.main }}
&amp;lt;&lt;span style="color:#000080">li&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;section-item horizontal-list&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">a&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;section-link small-thick&amp;#34;&lt;/span> &lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;{{.URL}}&amp;#34;&lt;/span>
&amp;gt;{{.Title}}&amp;lt;/&lt;span style="color:#000080">a&lt;/span>
&amp;gt;
&amp;lt;/&lt;span style="color:#000080">li&lt;/span>&amp;gt;
{{ end }}
&amp;lt;/&lt;span style="color:#000080">ul&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">nav&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">header&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>This takes the &lt;code>main&lt;/code> menu and for each item in it renders a &lt;code>&amp;lt;li&amp;gt;&lt;/code> tag with a link to that page&amp;rsquo;s URL and it&amp;rsquo;s title.&lt;/p>
&lt;p>By default Hugo pluralizes the titles which I do not want because I want the menu to say &lt;code>Blog&lt;/code> not &lt;code>Blogs&lt;/code>. To disable the pluralization add the following to your config file:
&lt;div class="code-block">
&lt;p class="filepath">
config.toml
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">pluralizelisttitles = &lt;span style="color:#000;font-weight:bold">false&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>I also want to add more links to external sites such as my GitHub. Hugo can&amp;rsquo;t automatically add that to the menu because I don&amp;rsquo;t have a page for it but I can manually add it through the config with the following:&lt;/p>
&lt;div class="code-block">
&lt;p class="filepath">
config.toml
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">[menu]
[[menu.main]]
identifier = &lt;span style="color:#d14">&amp;#34;github&amp;#34;&lt;/span>
name = &lt;span style="color:#d14">&amp;#34;GitHub&amp;#34;&lt;/span>
title = &lt;span style="color:#d14">&amp;#34;GitHub&amp;#34;&lt;/span>
url = &lt;span style="color:#d14">&amp;#34;https://github.com/olivergilan&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>This manually adds another element to the main menu so that it gets rendered using the given title and url fields. Now if I ever want to add, remove, or update an element on my navigation bar I can just quickly edit my config file without modifying the html code.&lt;/p>
&lt;h3 id="target-blank">Target Blank &lt;a class="anchor" href="#target-blank">
#
&lt;/a>&lt;/h3>&lt;p>One last feature I want to add is to open certain links in a new tab. If a user clicks a link to my blog page or any other page within my site it should navigate within the same tab but if a user clicks my GitHub link I want it to open in a new tab so they can easily switch back to my site if they want to. This can be achieved by adding the following code:&lt;/p>
&lt;div class="code-block">
&lt;p class="filepath">
config.toml
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">[menu]
[[menu.main]]
identifier = &lt;span style="color:#d14">&amp;#34;github&amp;#34;&lt;/span>
name = &lt;span style="color:#d14">&amp;#34;GitHub&amp;#34;&lt;/span>
title = &lt;span style="color:#d14">&amp;#34;GitHub&amp;#34;&lt;/span>
url = &lt;span style="color:#d14">&amp;#34;https://github.com/olivergilan&amp;#34;&lt;/span>
[menu.main.params]
targetBlank = &lt;span style="color:#000;font-weight:bold">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="code-block">
&lt;p class="filepath">
layouts/partials/header.html
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#000080">header&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">nav&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">a&lt;/span> &lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;{{.Site.BaseURL}}&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">h1&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;site-title&amp;#34;&lt;/span>&amp;gt;{{ .Site.Title }}&amp;lt;/&lt;span style="color:#000080">h1&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">a&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">ul&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;section-list&amp;#34;&lt;/span>&amp;gt;
{{ range .Site.Menus.main }}
&amp;lt;&lt;span style="color:#000080">li&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;section-item horizontal-list&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">a&lt;/span>
&lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;section-link small-thick&amp;#34;&lt;/span>
&lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;{{.URL}}&amp;#34;&lt;/span>
&lt;span style="color:#a61717;background-color:#e3d2d2">{{&lt;/span> &lt;span style="color:#008080">with&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">.&lt;/span>&lt;span style="color:#008080">Params&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">.&lt;/span>&lt;span style="color:#008080">targetBlank&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">}}&lt;/span>&lt;span style="color:#008080">target&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;_blank&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">{{&lt;/span> &lt;span style="color:#008080">end&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">}}&lt;/span>&amp;gt;
{{ .Title }}
&amp;lt;/&lt;span style="color:#000080">a&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">li&lt;/span>&amp;gt;
{{ end }}
&amp;lt;/&lt;span style="color:#000080">ul&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">nav&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">header&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>This adds a paramer to that specific menu item with name &lt;code>targetBlank&lt;/code> and value &lt;code>true&lt;/code>. Then within the partial for each menu item I check if it has that parameter and if it does I add the &lt;code>target=&amp;quot;_blank&amp;quot;&lt;/code> attribute to the href element. This will make the link open in a new tab! Now I have a working navbar/header! I can add it to my &lt;code>layouts/defaults/baseof.html&lt;/code> file so that it appears at the top of every page on my site and add some css to style it how I want.
&lt;div class="code-block">
&lt;p class="filepath">
layouts/defaults/baseof.html
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#999;font-weight:bold;font-style:italic">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#000080">html&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">meta&lt;/span> &lt;span style="color:#008080">charset&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;utf-8&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#000080">link&lt;/span> &lt;span style="color:#008080">rel&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;/css/style.css&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#000080">title&lt;/span>&amp;gt;{{ block &amp;#34;title&amp;#34; . }} {{ .Site.Title }} {{ end }}&amp;lt;/&lt;span style="color:#000080">title&lt;/span>&amp;gt;
{{ block &amp;#34;head&amp;#34; . }} {{ end }}
&amp;lt;/&lt;span style="color:#000080">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">body&lt;/span>&amp;gt;
{{ partial &amp;#34;header&amp;#34; . }}
&lt;span style="color:#998;font-style:italic">&amp;lt;!-- Code that all your templates share, like a header --&amp;gt;&lt;/span>
{{ block &amp;#34;main&amp;#34; . }}
&lt;span style="color:#998;font-style:italic">&amp;lt;!-- The part of the page that begins to differ between templates --&amp;gt;&lt;/span>
{{ end }} {{ block &amp;#34;footer&amp;#34; . }}
&lt;span style="color:#998;font-style:italic">&amp;lt;!-- More shared code, perhaps a footer but that can be overridden if need be in --&amp;gt;&lt;/span>
{{ end }}
&amp;lt;/&lt;span style="color:#000080">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>Using &lt;code>{{ partial &amp;quot;header&amp;quot; . }}&lt;/code> tells Hugo to look in the partials directory, find the file with that name and render it. Don&amp;rsquo;t forget the period after the partial name, that&amp;rsquo;s not a typo. That period passes in the current context so when the code within the partial uses &lt;code>.Site.Title&lt;/code> or &lt;code>.Site.Menus...&lt;/code> it&amp;rsquo;s doing so with that context being passed in. And now we have a working header with a navigation menu that can be reused on every page!&lt;/p>
&lt;h3 id="post-page">Post Page &lt;a class="anchor" href="#post-page">
#
&lt;/a>&lt;/h3>&lt;p>So now you&amp;rsquo;ve got the scaffolding of your site created and you have a navigation bar that will appear at the top of every page. Let&amp;rsquo;s spend some time creating the template for each blog post as this is where people will be spending the most time on your site.
Create a new file &lt;code>layouts/blog/single.html&lt;/code>. This will be used by Hugo to render individual pages in the blog section of the site.&lt;/p>
&lt;p>This is the code I have in my template:
&lt;div class="code-block">
&lt;p class="filepath">
layouts/blog/single.html
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">{{ define &amp;#34;head&amp;#34; }}
&amp;lt;&lt;span style="color:#000080">link&lt;/span> &lt;span style="color:#008080">rel&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;/css/post.css&amp;#34;&lt;/span> /&amp;gt;
{{ end }} {{ define &amp;#34;main&amp;#34; }}
&amp;lt;&lt;span style="color:#000080">section&lt;/span> &lt;span style="color:#008080">id&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;main&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">h1&lt;/span> &lt;span style="color:#008080">id&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;title&amp;#34;&lt;/span>&amp;gt;{{ .Title }}&amp;lt;/&lt;span style="color:#000080">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">section&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;post-metadata&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">h4&lt;/span> &lt;span style="color:#008080">id&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;date&amp;#34;&lt;/span>&amp;gt;{{ .Date.Format &amp;#34;Mon Jan 2, 2006&amp;#34; }}&amp;lt;/&lt;span style="color:#000080">h4&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">h5&lt;/span> &lt;span style="color:#008080">id&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;wordcount&amp;#34;&lt;/span>&amp;gt;{{ .WordCount }} Words&amp;lt;/&lt;span style="color:#000080">h5&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">section&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">article&lt;/span> &lt;span style="color:#008080">id&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;content&amp;#34;&lt;/span>&amp;gt;{{ .Content }}&amp;lt;/&lt;span style="color:#000080">article&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">section&lt;/span>&amp;gt;
{{ end }} {{ define &amp;#34;footer&amp;#34; }} {{ partial &amp;#34;footer&amp;#34; . }} {{ end }}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>Pretty straightforward but to quickly go over it. Each &amp;ldquo;define&amp;rdquo; block implements one of the &amp;ldquo;block&amp;rdquo; statements in the &lt;code>baseof.html&lt;/code> file we created earlier. The head block allows me to inject custom properties into the pages head tag. In this case I made a separate css file for css relating only to blog posts and I link that here. Then in the main block I create the post itself. Notice how I use varriables like .Title, .WordCount, .Content, and the .Date.Format function. These are all provided by Hugo automatically. For example the beginning of this blog post has the following Front Matter:&lt;/p>
&lt;div class="code-block">
&lt;p class="filepath">
content/blog/HowToCreateABlogWithHugo.md
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-markdown" data-lang="markdown">---
title: &amp;#34;How to Create a Blog from Scratch with Hugo&amp;#34;
date: 2022-02-05T10:04:15-05:00
draft: true
---
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>That &amp;ldquo;title&amp;rdquo; field is then used by Hugo for the .Title variable when rendering the page for that post. The Content parameter takes whatever I wrote in the Markdown file and generates the blog page&amp;rsquo;s content from it. Everything else here is pretty much standard. You can open dev tools in chrome and look at what sort of elements get rendered from your markdown and then just use css to style your blog posts however you&amp;rsquo;d like.&lt;/p>
&lt;p>Because this is a technical blog one of the important elements for posts will be the inclusion of code blocks. Adding code blocks can be achieved in Hugo using &lt;a href="https://gohugo.io/content-management/shortcodes/">Shortcodes&lt;/a>. Hugo has a built-in &lt;a href="https://gohugo.io/content-management/syntax-highlighting/#highlight-shortcode">Highlight&lt;/a> shortcode that can be used to add syntax highlighting to a block of code in your markdown file (can also be activated using code fences instead of the shortcode tag). In my opinion the highlight shortcode is a bit limited: it will highlight your code but that&amp;rsquo;s it. When I have a code block I want to optionally include the filepath for that code block and you might want to include other things like a &amp;ldquo;Copy to Clipboard&amp;rdquo; button. To do that we need to create our own shortcode!&lt;/p>
&lt;h3 id="shortcodes">Shortcodes &lt;a class="anchor" href="#shortcodes">
#
&lt;/a>&lt;/h3>&lt;p>A shortcode is a simple snippet inside a content file that Hugo will render using a predefined template. Within the layouts directory create shortcodes directory and add the following file:
&lt;div class="code-block">
&lt;p class="filepath">
layouts/shortcodes/code.html
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#000080">div&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;code-block&amp;#34;&lt;/span>&amp;gt;
{{ with .Get &amp;#34;file&amp;#34; }}
&amp;lt;&lt;span style="color:#000080">div&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;filepath&amp;#34;&lt;/span>&amp;gt;{{.}}&amp;lt;/&lt;span style="color:#000080">div&lt;/span>&amp;gt;
{{ end }}
&amp;lt;&lt;span style="color:#000080">div&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;code&amp;#34;&lt;/span>&amp;gt;{{ .Inner | markdownify }}&amp;lt;/&lt;span style="color:#000080">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>Now in my content markdown files if I want a code block I can use
&lt;div class="code-block">
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-markdown" data-lang="markdown">This is a normal paragraph...
{{&amp;lt; &lt;span style="color:#000080">code&lt;/span> &lt;span style="color:#008080">file&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;optional/file/path&amp;#34;&lt;/span> &amp;gt;}}
{{&amp;lt; &lt;span style="color:#000080">highlight&lt;/span> &lt;span style="color:#008080">markdown&lt;/span> &amp;gt;}}
// Code goes here
{{&amp;lt; /&lt;span style="color:#000080">highlight&lt;/span> &amp;gt;}}
{{&amp;lt; /&lt;span style="color:#000080">code&lt;/span> &amp;gt;}}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>I can pass in an optional &amp;ldquo;file&amp;rdquo; parameter and if it exists Hugo will render that div with class &amp;ldquo;filepath&amp;rdquo; that I can style how I want. The inner code within the shortcode gets processed through the markdown renderer using the &lt;code>markdownify&lt;/code> function. Because shortcodes can nest within each other, the .Inner content still gets the the built-in Highlight shortcode so my custom shortcode acts as a wrapper extending the native functionality.
Notice how my shortcode is literally called &amp;ldquo;code&amp;rdquo; and that&amp;rsquo;s because of how I named the shortcode html file. Name the file whatever you want that specific shortcode to be.&lt;/p>
&lt;p>Don&amp;rsquo;t forget to customize how Hugo styles the code syntax by updating your config file.
&lt;div class="code-block">
&lt;p class="filepath">
config.toml
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">[markup]
[markup.highlight]
anchorLineNos = &lt;span style="color:#000;font-weight:bold">false&lt;/span>
codeFences = &lt;span style="color:#000;font-weight:bold">true&lt;/span>
guessSyntax = &lt;span style="color:#000;font-weight:bold">false&lt;/span>
hl_Lines = &lt;span style="color:#d14">&amp;#39;&amp;#39;&lt;/span>
lineAnchors = &lt;span style="color:#d14">&amp;#39;&amp;#39;&lt;/span>
lineNoStart = &lt;span style="color:#099">1&lt;/span>
lineNos = &lt;span style="color:#000;font-weight:bold">false&lt;/span>
lineNumbersInTable = &lt;span style="color:#000;font-weight:bold">true&lt;/span>
noClasses = &lt;span style="color:#000;font-weight:bold">true&lt;/span>
style = &lt;span style="color:#d14">&amp;#39;dracula&amp;#39;&lt;/span>
tabWidth = &lt;span style="color:#099">4&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>And there you have it! A little bit of styling and you can have a custom code block or any other custom markdown element.&lt;/p>
&lt;h3 id="footer">Footer &lt;a class="anchor" href="#footer">
#
&lt;/a>&lt;/h3>&lt;p>For the footer I created another partial with a custom menu in the config for the different social elements.
&lt;div class="code-block">
&lt;p class="filepath">
layouts/partials/footer.html
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#000080">footer&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">div&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;socials&amp;#34;&lt;/span>&amp;gt;
{{ range .Site.Menus.socials }}
&amp;lt;&lt;span style="color:#000080">a&lt;/span>
&lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;section-link small-thick&amp;#34;&lt;/span>
&lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;{{.URL}}&amp;#34;&lt;/span>
&lt;span style="color:#a61717;background-color:#e3d2d2">{{&lt;/span>&lt;span style="color:#008080">with&lt;/span>
&lt;span style="color:#a61717;background-color:#e3d2d2">.&lt;/span>&lt;span style="color:#008080">Params&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">.&lt;/span>&lt;span style="color:#008080">targetBlank&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">}}&lt;/span>
&lt;span style="color:#008080">target&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;_blank&amp;#34;&lt;/span>
&lt;span style="color:#a61717;background-color:#e3d2d2">{{&lt;/span>&lt;span style="color:#008080">end&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">}}&lt;/span>
&amp;gt;
{{ with .Params.icon }}
&amp;lt;&lt;span style="color:#000080">img&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;social-icon&amp;#34;&lt;/span> &lt;span style="color:#008080">src&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;{{.}}&amp;#34;&lt;/span> /&amp;gt;
{{end}}
&amp;lt;/&lt;span style="color:#000080">a&lt;/span>&amp;gt;
{{ end }}
&amp;lt;/&lt;span style="color:#000080">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#000080">p&lt;/span>&amp;gt;&lt;span style="color:#a61717;background-color:#e3d2d2">&amp;amp;&lt;/span>copy {{ dateFormat &amp;#34;2006&amp;#34; now }} {{ .Site.Title }}&amp;lt;/&lt;span style="color:#000080">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#000080">footer&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;div class="code-block">
&lt;p class="filepath">
config.toml
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">[menu]
[[menu.socials]]
identifier = &lt;span style="color:#d14">&amp;#34;github&amp;#34;&lt;/span>
name = &lt;span style="color:#d14">&amp;#34;GitHub&amp;#34;&lt;/span>
title = &lt;span style="color:#d14">&amp;#34;GitHub&amp;#34;&lt;/span>
url = &lt;span style="color:#d14">&amp;#34;https://github.com/olivergilan&amp;#34;&lt;/span>
[menu.socials.params]
targetBlank = &lt;span style="color:#000;font-weight:bold">true&lt;/span>
icon = &lt;span style="color:#d14">&amp;#34;/icons/github.png&amp;#34;&lt;/span>
[[menu.socials]]
identifier = &lt;span style="color:#d14">&amp;#34;linkedin&amp;#34;&lt;/span>
name = &lt;span style="color:#d14">&amp;#34;LinkedIn&amp;#34;&lt;/span>
title = &lt;span style="color:#d14">&amp;#34;LinkedIn&amp;#34;&lt;/span>
url = &lt;span style="color:#d14">&amp;#34;https://linkedin.com/in/oliver-gilan/&amp;#34;&lt;/span>
[menu.socials.params]
targetBlank = &lt;span style="color:#000;font-weight:bold">true&lt;/span>
icon = &lt;span style="color:#d14">&amp;#34;/icons/linkedin.png&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>In the above &amp;ldquo;socials&amp;rdquo; menu, the items have a custom icon parameter that contains the path to the icon for that element within the &lt;code>static&lt;/code> directory.&lt;/p>
&lt;p>This time I don&amp;rsquo;t want the footer on every page, only on my blog post pages. So instead of adding this to the base template I add it to my single page template for the blog section. If you scroll up to the code block above you&amp;rsquo;ll see I define the &amp;ldquo;footer&amp;rdquo; block and declare the footer partial in that block. Now it&amp;rsquo;ll be added to every blog post.&lt;/p>
&lt;h3 id="header-anchors">Header Anchors &lt;a class="anchor" href="#header-anchors">
#
&lt;/a>&lt;/h3>&lt;p>One nice feature on a lot of blogs is having anchors for different sections of individual posts. If you look above this paragraph at this section&amp;rsquo;s heading you&amp;rsquo;ll see the &amp;ldquo;#&amp;rdquo; tag which is clickable and if you look at the URL you&amp;rsquo;ll notice it now contains that header in it. This allows you to link to a specific section of a webpage. Hugo has a feature called &lt;a href="https://gohugo.io/getting-started/configuration-markup/#markdown-render-hooks">Markdown Render Hooks&lt;/a> that makes adding these anchors easy. For a more in-depth explanation of how this works check out &lt;a href="https://pavelkorolev.xyz/blog/2020-10-31-hugo-header-anchors/">this post&lt;/a> by Pavel Korolev.&lt;/p>
&lt;div class="code-block">
&lt;p class="filepath">
layouts/_defaults/_markup/render-heading.html
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#000080">h&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">{{&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">.&lt;/span>&lt;span style="color:#008080">Level&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">}}&lt;/span> &lt;span style="color:#008080">id&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;{{ .Anchor | safeURL }}&amp;#34;&lt;/span>&amp;gt;{{ .Text | safeHTML }}
{{- if and (ge .Level 1) (le .Level 6) }}{{&amp;#34; &amp;#34; -}}
&amp;lt;&lt;span style="color:#000080">a&lt;/span> &lt;span style="color:#008080">class&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;anchor&amp;#34;&lt;/span> &lt;span style="color:#008080">href&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;#{{ .Anchor | safeURL }}&amp;#34;&lt;/span>&amp;gt;
#
&amp;lt;/&lt;span style="color:#000080">a&lt;/span>&amp;gt;
{{- end -}}
&lt;span style="color:#a61717;background-color:#e3d2d2">&amp;lt;&lt;/span>/h{{ .Level }}&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2 id="rss">RSS &lt;a class="anchor" href="#rss">
#
&lt;/a>&lt;/h2>&lt;p>Adding an RSS feed to the site is really quite simple with Hugo. Hugo has a default RSS template but it doesn&amp;rsquo;t quite fit my needs because I want to only have blog posts on the feed and nothing else. By default Hugo creates a feed for each section of your site but in my case I only want one feed for the root of my site and I only want it to contain pages from the blog section. To do this I followed this &lt;a href="https://benjamincongdon.me/blog/2020/01/14/Tips-for-Customizing-Hugo-RSS-Feeds/">awesome post&lt;/a> by Benjamin Congdon.&lt;/p>
&lt;h2 id="compiling-and-hosting">Compiling and Hosting &lt;a class="anchor" href="#compiling-and-hosting">
#
&lt;/a>&lt;/h2>&lt;p>When it comes to compiling and hosting I want it to be as simple as possible. I don&amp;rsquo;t want to spend time in the future messing around with all this infra or manually copying files to servers, etc. Because I&amp;rsquo;m hosting this whole repository in GitHub I just used &lt;a href="https://github.com/features/actions">GitHub Actions&lt;/a> to build my site. To do that just create the following file:&lt;/p>
&lt;div class="code-block">
&lt;p class="filepath">
.github/workflows/gh-pages.yml
&lt;/p>
&lt;div class="code-block-inner">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#000080">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>github pages&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#000080">on&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">push&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">branches&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- main&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#998;font-style:italic"># Set a branch to deploy&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">pull_request&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#000080">jobs&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">deploy&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">runs-on&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>ubuntu-20.04&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">steps&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000080">uses&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>actions/checkout@v2&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">with&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">submodules&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#998;font-style:italic"># Fetch Hugo themes (true OR recursive)&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">fetch-depth&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#099">0&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#998;font-style:italic"># Fetch all history for .GitInfo and .Lastmod&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000080">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Setup Hugo&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">uses&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>peaceiris/actions-hugo@v2&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">with&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">hugo-version&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#d14">&amp;#34;latest&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#998;font-style:italic"># extended: true&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000080">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Build&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">run&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>hugo --minify&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000080">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Deploy&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">uses&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>peaceiris/actions-gh-pages@v3&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">if&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>github.ref == &amp;#39;refs/heads/main&amp;#39;&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">with&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">github_token&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>${{ secrets.GITHUB_TOKEN }}&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">publish_dir&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>./public&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Once you add this file to your repo and push it to GitHub it automatically creates a workflow that executes the above job. The job runs every time there is a new change pushed to the master branch of the repo. The Job first checks out the latest commits of the master branch, installs Hugo, compiles the site, then pushes the compiled static files to the gh-pages branch of the repository.&lt;/p>
&lt;p>This is great because it means whenever I want to make a change to the site, whether that&amp;rsquo;s changing code or just adding a new blog post, I simply need to push the change to my master branch and it&amp;rsquo;ll automatically rebuild the site and push the new build to the gh-pages branch.&lt;/p>
&lt;p>For hosting I want to keep it simple as well so I&amp;rsquo;m just hosting my site on &lt;a href="https://pages.github.com/">GitHub Pages&lt;/a>. In the settings for my repository I set the gh-pages branch to be the source for the served pages and I add my custom domain so that people can access the site with my custom URL.&lt;/p>
&lt;h2 id="conclusion">Conclusion &lt;a class="anchor" href="#conclusion">
#
&lt;/a>&lt;/h2>&lt;p>And that&amp;rsquo;s it! Now I have a functioning blog that I can add new features to and expand whenever I want. It&amp;rsquo;s incredibly simple and minimal, no themes or bloated JavaScript frameworks (actually no JS at all as of right now), and it fits nicely into my existing workflows.&lt;/p></description></item></channel></rss>